/**
 * @fileoverview Firestore Security Rules for the FaustApp application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and restricts appointment creation to admins, with public read access.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data, accessible only by the user and admins.
 * - /members/{memberId}: Stores detailed user profile information, accessible only by the user and admins.
 * - /appointments/{appointmentId}: Stores appointment data, writable only by admins, and readable by all.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect user privacy.
 * - Read access to appointments is public to allow all users to view the calendar.
 * - Ambiguous or missing write rules default to explicit denial.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own document.
     * @allow (get, update, delete) User with matching UID can access their own document.
     * @deny (create) User cannot create a document with a different UID.
     * @deny (get, update, delete) User cannot access another user's document.
     * @principle Enforces document ownership and prevents unauthorized access to user data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to member profile documents.
     * @path /members/{memberId}
     * @allow (create) User with matching UID can create their own member document.
     * @allow (get, update, delete) User with matching UID can access their own member document.
     * @deny (create) User cannot create a member document with a different UID.
     * @deny (get, update, delete) User cannot access another user's member document.
     * @principle Enforces document ownership and prevents unauthorized access to user data.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(memberId) {
        return request.auth.uid == get(/databases/$(database)/documents/members/$(memberId)).data.userId;
      }
       function isExistingOwner(memberId) {
        return isOwner(memberId) && exists(resource);
      }

      allow get: if isOwner(memberId);
      allow list: if false; // User listing is not permitted.

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(memberId);
      allow delete: if isExistingOwner(memberId);
    }

    /**
     * @description Controls access to appointment documents.
     * @path /appointments/{appointmentId}
     * @allow (get, list) All users can read appointments.
     * @deny (create, update, delete) Only admins can create, update, or delete appointments.
     * @principle Allows public read access for calendar visibility while restricting write access to authorized personnel.
     */
    match /appointments/{appointmentId} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if true;
      allow list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}