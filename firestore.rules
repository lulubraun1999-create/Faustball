/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for both user authentication data and editable profile information. Users can only read and write their own data, and administrators have no special privileges in this version.
 *
 * Data Structure:
 * - /users/{userId}: Stores core, mostly read-only user data.
 * - /members/{memberId}: Stores editable profile information for each user.
 *
 * Key Security Decisions:
 * - No user listing: Listing all users is explicitly denied to prevent information leakage.
 * - Owner-only access: Only the authenticated user can read or write data under their respective /users/{userId} and /members/{memberId} paths.
 *
 * Denormalization for Authorization:
 * To simplify authorization checks and improve performance, the 'userId' field within the /members/{memberId} document is used to directly enforce ownership. This avoids the need for costly `get()` operations to a separate /users/{userId} document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure core user authentication data.
     * @path /users/{userId}
     * @allow (get) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can read their own profile data.
     * @allow (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own profile data.
     * @allow (update) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can update their own profile data.
     * @allow (delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can delete their own profile data.
     * @deny (get) User 'attackerId' cannot read User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' data.
     * @deny (create) User 'attackerId' cannot create User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' data.
     * @deny (update) User 'attackerId' cannot update User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' data.
     * @deny (delete) User 'attackerId' cannot delete User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure editable user profile data.
     * @path /members/{memberId}
     * @allow (get) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can read their own member data.
     * @allow (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own member data.
     * @allow (update) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can update their own member data.
     * @allow (delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can delete their own member data.
     * @deny (get) User 'attackerId' cannot read User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' member data.
     * @deny (create) User 'attackerId' cannot create User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' member data.
     * @deny (update) User 'attackerId' cannot update User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' member data.
     * @deny (delete) User 'attackerId' cannot delete User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' member data.
     * @principle Enforces document ownership for all operations.
     */
    match /members/{memberId} {
      allow get: if isMember(memberId);
      allow list: if false;
      allow create: if isMember(memberId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingMember(memberId) && resource.data.userId == request.auth.uid;
      allow delete: if isExistingMember(memberId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isMember(memberId) {
        return isSignedIn() && request.auth.uid == memberId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    function isExistingMember(memberId) {
      return isMember(memberId) && resource != null;
    }
  }
}