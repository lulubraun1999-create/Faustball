rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      // Use exists() for safety. The document might not exist yet during signup.
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isMemberOf(teamId) {
        return exists(/databases/$(database)/documents/members/$(request.auth.uid)) && teamId in get(/databases/$(database)/documents/members/$(request.auth.uid)).data.teams;
    }

    // --- User & Member Data ---
    match /users/{userId} {
      allow get: if isAdmin() || isOwner(userId);
      allow list: if isAdmin();
      // Allow creation during signup, or updates by owner/admin.
      allow write: if isAdmin() || isOwner(userId);
    }

    match /members/{memberId} {
      allow get: if isAdmin() || isOwner(memberId);
      allow list: if isAdmin();
      // Allow creation during signup, or updates by owner/admin.
      allow write: if isAdmin() || isOwner(memberId);
    }
    
    // --- Group Data (Teams & Classes) ---
    // Denormalized member data is nested under groups.
    match /groups/{groupId} {
      // Any signed-in user can read group information.
      allow read: if isSignedIn();
      // Only admins can modify groups.
      allow write: if isAdmin();

      match /members/{memberId} {
          allow read: if isSignedIn();
          allow write: if isAdmin();
      }
    }

    // --- Core Data Collections (Appointment Types & Locations) ---
    match /appointmentTypes/{typeId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    match /locations/{locationId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // --- News Articles ---
    match /news/{newsId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // --- Penalty Catalog ---
    match /penalties/{penaltyId} {
       allow read: if isSignedIn();
       allow write: if isAdmin();
    }

    // --- Appointment Exceptions ---
    match /appointmentExceptions/{exceptionId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // --- Polls ---
    match /polls/{pollId} {
      // Allow any signed-in user to READ/LIST polls. Client-side queries handle filtering.
      // Allow users to VOTE (update) on any poll they can see.
      allow read, update: if isSignedIn();
      // Only admins can create or delete polls.
      allow create, delete: if isAdmin();
    }

    // --- Appointments & Responses ---
    match /appointments/{appointmentId} {
      // Allow any signed-in user to read any appointment document.
      // The client query is responsible for filtering by team membership.
      allow read: if isSignedIn();
      // Only admins can create, update, or delete appointments.
      allow write: if isAdmin();
    }
    
    match /appointmentResponses/{responseId} {
      // An admin can manage all responses.
      // A user can create, read, or manage their OWN responses.
      allow create: if isSignedIn();
      allow read, update, delete: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);
      allow list: if isAdmin();
    }

    // --- Team Treasury ---
    match /treasury/{transactionId} {
      allow read: if isAdmin() || (isSignedIn() && exists(/databases/$(database)/documents/members/$(request.auth.uid)) && resource.data.teamId in get(/databases/$(database)/documents/members/$(request.auth.uid)).data.teams);
      allow list: if isAdmin();
      allow write: if isAdmin();
    }
  }
}
