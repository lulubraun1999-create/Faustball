/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for both core user data and profile information.
 * Only the authenticated user or an admin can read or write their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data (authentication).
 * - /members/{memberId}: Stores editable profile information for members.  It is assumed that `memberId` will match `userId`.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document and member profile.
 * - There is no public listing of users or members.
 * - Role-based authorization is not yet implemented (no admin role checks).
 *
 * Denormalization for Authorization:
 *   - The `/members/{memberId}` collection's documents should denormalize the `userId` from the `Member` schema into the document ID (`memberId`).
 *     This allows for efficient ownership checks without extra `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user authentication data.
     * @path /users/{userId}
     * @allow (create) User with matching auth UID can create their own document.
     * @allow (get, update, delete) Authenticated user can access their own document.
     * @deny (create) User cannot create a document with a mismatched ID.
     * @deny (get, update, delete) User cannot access another user's document.
     * @principle Enforces strict user-ownership; self-creation on create.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to member profile data.
     * @path /members/{memberId}
     * @allow (create) User with matching auth UID can create their own profile.
     * @allow (get, update, delete) Authenticated user can access their own profile.
     * @deny (create) User cannot create a profile with a mismatched ID.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces strict user-ownership; self-creation on create.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memberId) {
        return request.auth.uid == memberId;
      }

        function isExistingOwner(memberId) {
          return isSignedIn() && isOwner(memberId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(memberId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(memberId);
      allow update: if isExistingOwner(memberId);
      allow delete: if isExistingOwner(memberId);
    }
  }
}