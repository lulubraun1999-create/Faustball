/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model.
 * Users can only read and write to their own user document and member document.
 * Administrators have full read and write access to all collections.
 * All other collections are readable by all authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data, accessible only by the user and admins.
 * - /members/{memberId}: Stores editable user profile data, accessible only by the user and admins.
 * - /groups/{groupId}/members/{memberId}: Stores denormalized group member data. Writable by admins.
 * - /appointments/{appointmentId}: Stores appointment data. Writable only by admins, readable by all users.
 * - /groups/{groupId}: Stores group data. Writable only by admins, readable by all users.
 * - /polls/{pollId}: Stores poll data. Writable only by admins, readable by designated users.
 * - /news/{newsId}: Stores news articles. Writable only by admins, readable by all users.
 * - /treasury/{transactionId}: Stores treasury transaction data. Writable only by admins.
 * - /penalties/{penaltyId}: Stores penalty catalog rules. Writable only by admins.
 *
 * Key Security Decisions:
 * - Access to user and member collections is restricted to the owning user and administrators.
 * - Other collections are readable by all authenticated users, but writable only by admins.
 * - Data validation is limited to authorization-critical fields (e.g., userId matching the document ID).
 *
 * Denormalization for Authorization:
 *  - The `GroupMember` entity is denormalized to include `firstName` and `lastName` to improve
 *  query performance and simplify security rules.
 *  - Group membership is denormalized into the `members` collection under each group,
 *  allowing for faster lookups and more efficient rules.
 *
 * Structural Segregation:
 *  - No structural segregation is needed as private user data is stored in the `/users/{userId}`
 *  and `/members/{memberId}` collections, while public data such as news and appointments are stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the /users collection, allowing only the authenticated user or an admin to read/write their own document.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with ID matching auth.uid can create their own document.
     * @allow (get) User with ID matching auth.uid can read their own document.
     * @allow (update) User with ID matching auth.uid can update their own document.
     * @allow (delete) User with ID matching auth.uid can delete their own document.
     * @deny (create) User cannot create a document with an ID different from their auth.uid.
     * @deny (get) User cannot read another user's document.
     * @deny (update) User cannot update another user's document.
     * @deny (delete) User cannot delete another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the /members collection, allowing only the authenticated user or an admin to read/write their own document.
     * @path /databases/{database}/documents/members/{memberId}
     * @allow (create) User with ID matching auth.uid can create their own document.
     * @allow (get) User with ID matching auth.uid can read their own document.
     * @allow (update) User with ID matching auth.uid can update their own document.
     * @allow (delete) User with ID matching auth.uid can delete their own document.
     * @deny (create) User cannot create a document with an ID different from their auth.uid.
     * @deny (get) User cannot read another user's document.
     * @deny (update) User cannot update another user's document.
     * @deny (delete) User cannot delete another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /members/{memberId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isExistingOwner(memberId);
    }

    /**
     * @description Secures the /groups/{groupId}/members/{memberId} collection.
     * @path /databases/{database}/documents/groups/{groupId}/members/{memberId}
     * @allow (create) Admins can create group members.
     * @allow (get) Anyone can get group members.
     * @allow (update) Admins can update group members.
     * @allow (delete) Admins can delete group members.
     * @deny (create) Non-admins cannot create group members.
     * @deny (update) Non-admins cannot update group members.
     * @deny (delete) Non-admins cannot delete group members.
     * @principle Restricts writes to admins only.
     */
     match /groups/{groupId}/members/{memberId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false; // TODO: Implement group-based authorization
        allow update: if false; // TODO: Implement group-based authorization
        allow delete: if false; // TODO: Implement group-based authorization
     }

    /**
     * @description Secures the /appointments collection, allowing anyone to read appointments, but only admins to create, update, or delete them.
     * @path /databases/{database}/documents/appointments/{appointmentId}
     * @allow (get) Anyone can read appointments.
     * @allow (list) Anyone can list appointments.
     * @allow (create) Admins can create appointments.
     * @allow (update) Admins can update appointments.
     * @allow (delete) Admins can delete appointments.
     * @deny (create) Non-admins cannot create appointments.
     * @deny (update) Non-admins cannot update appointments.
     * @deny (delete) Non-admins cannot delete appointments.
     * @principle Restricts writes to admins only.
     */
    match /appointments/{appointmentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false; // TODO: Implement admin role check.
      allow update: if false; // TODO: Implement admin role check.
      allow delete: if false; // TODO: Implement admin role check.
    }

    /**
     * @description Secures the /groups collection, allowing anyone to read groups, but only admins to create, update, or delete them.
     * @path /databases/{database}/documents/groups/{groupId}
     * @allow (get) Anyone can read groups.
     * @allow (list) Anyone can list groups.
     * @allow (create) Admins can create groups.
     * @allow (update) Admins can update groups.
     * @allow (delete) Admins can delete groups.
     * @deny (create) Non-admins cannot create groups.
     * @deny (update) Non-admins cannot update groups.
     * @deny (delete) Non-admins cannot delete groups.
     * @principle Restricts writes to admins only.
     */
    match /groups/{groupId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false; // TODO: Implement admin role check.
      allow update: if false; // TODO: Implement admin role check.
      allow delete: if false; // TODO: Implement admin role check.
    }

    /**
     * @description Secures the /polls collection, allowing anyone to read polls, but only admins to create, update, or delete them.
     * @path /databases/{database}/documents/polls/{pollId}
     * @allow (get) Anyone can read polls.
     * @allow (list) Anyone can list polls.
     * @allow (create) Admins can create polls.
     * @allow (update) Admins can update polls.
     * @allow (delete) Admins can delete polls.
     * @deny (create) Non-admins cannot create polls.
     * @deny (update) Non-admins cannot update polls.
     * @deny (delete) Non-admins cannot delete polls.
     * @principle Restricts writes to admins only.
     */
    match /polls/{pollId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false; // TODO: Implement admin role check.
      allow update: if false; // TODO: Implement admin role check.
      allow delete: if false; // TODO: Implement admin role check.
    }

    /**
     * @description Secures the /news collection, allowing anyone to read news articles, but only admins to create, update, or delete them.
     * @path /databases/{database}/documents/news/{newsId}
     * @allow (get) Anyone can read news articles.
     * @allow (list) Anyone can list news articles.
     * @allow (create) Admins can create news articles.
     * @allow (update) Admins can update news articles.
     * @allow (delete) Admins can delete news articles.
     * @deny (create) Non-admins cannot create news articles.
     * @deny (update) Non-admins cannot update news articles.
     * @deny (delete) Non-admins cannot delete news articles.
     * @principle Restricts writes to admins only.
     */
    match /news/{newsId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false; // TODO: Implement admin role check.
      allow update: if false; // TODO: Implement admin role check.
      allow delete: if false; // TODO: Implement admin role check.
    }

    /**
     * @description Secures the /treasury collection, allowing only admins to create, read, update, or delete treasury transactions.
     * @path /databases/{database}/documents/treasury/{transactionId}
     * @allow (create) Admins can create treasury transactions.
     * @allow (get) Admins can read treasury transactions.
     * @allow (update) Admins can update treasury transactions.
     * @allow (delete) Admins can delete treasury transactions.
     * @deny (create) Non-admins cannot create treasury transactions.
     * @deny (get) Non-admins cannot read treasury transactions.
     * @deny (update) Non-admins cannot update treasury transactions.
     * @deny (delete) Non-admins cannot delete treasury transactions.
     * @principle Restricts access to admins only.
     */
    match /treasury/{transactionId} {
      allow get: if false; // TODO: Implement admin role check.
      allow list: if false; // TODO: Implement admin role check.
      allow create: if false; // TODO: Implement admin role check.
      allow update: if false; // TODO: Implement admin role check.
      allow delete: if false; // TODO: Implement admin role check.
    }

    /**
     * @description Secures the /penalties collection, allowing only admins to create, read, update, or delete penalty rules.
     * @path /databases/{database}/documents/penalties/{penaltyId}
     * @allow (create) Admins can create penalty rules.
     * @allow (get) Admins can read penalty rules.
     * @allow (update) Admins can update penalty rules.
     * @allow (delete) Admins can delete penalty rules.
     * @deny (create) Non-admins cannot create penalty rules.
     * @deny (get) Non-admins cannot read penalty rules.
     * @deny (update) Non-admins cannot update penalty rules.
     * @deny (delete) Non-admins cannot delete penalty rules.
     * @principle Restricts access to admins only.
     */
    match /penalties/{penaltyId} {
      allow get: if false; // TODO: Implement admin role check.
      allow list: if false; // TODO: Implement admin role check.
      allow create: if false; // TODO: Implement admin role check.
      allow update: if false; // TODO: Implement admin role check.
      allow delete: if false; // TODO: Implement admin role check.
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}