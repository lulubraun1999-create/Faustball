/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and editable member data,
 * while allowing public read access to appointments and groups. Administrative privileges
 * are not explicitly modeled in this version.
 *
 * Data Structure:
 * - /users/{userId}: Stores authentication-related data. The 'userId' MUST match the Firebase Auth UID.
 * - /members/{memberId}: Stores profile data. Each 'member' document should contain a 'userId' field
 *   that matches the associated user's UID.
 * - /appointments/{appointmentId}: Stores appointment data, publicly readable.
 * - /groups/{groupId}: Stores group data, publicly readable.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - All write operations are secured with authorization checks.
 * - No schema validation is performed beyond relational integrity checks (ownership).
 * - No administrative roles are defined in this iteration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user accounts. Only the authenticated user or an admin can read their own data. No one can list all users.
     * @path /users/{userId}
     * @allow (get) User with UID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can read their own data.
     * @deny (get) User with UID 'otherUserId' cannot read another user's data.
     * @allow (create) User with UID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own document.
     * @deny (create) User with UID 'otherUserId' cannot create a document with a different userId.
     * @allow (update) User with UID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can update their own document.
     * @deny (update) User with UID 'otherUserId' cannot update another user's document.
     * @allow (delete) User with UID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can delete their own document.
     * @deny (delete) User with UID 'otherUserId' cannot delete another user's document.
     * @deny (list) No one can list all user documents.
     * @principle Enforces document ownership for writes and prevents user enumeration.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures member profiles. Only the authenticated user or an admin can read or write their own profile.
     * @path /members/{memberId}
     * @allow (get) User with UID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can read their own profile.
     * @deny (get) User with UID 'otherUserId' cannot read another user's profile.
     * @allow (create) User with UID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create a profile with their userId.
     * @deny (create) User with UID 'otherUserId' cannot create a profile with a different userId.
     * @allow (update) User with UID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can update their own profile.
     * @deny (update) User with UID 'otherUserId' cannot update another user's profile.
     * @allow (delete) User with UID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can delete their own profile.
     * @deny (delete) User with UID 'otherUserId' cannot delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /members/{memberId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && (request.resource.data.userId == resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows public read access to appointments, but restricts write access to authenticated users.
     * @path /appointments/{appointmentId}
     * @allow (get) Any user can read appointment data.
     * @allow (list) Any user can list appointment documents.
     * @deny (create) Only authenticated users can create appointments, owner ID must be present in data.
     * @deny (update) Only authenticated users can update appointments.
     * @deny (delete) Only authenticated users can delete appointments.
     * @principle Public read, owner-only writes.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to groups, but restricts write access to authenticated users.
     * @path /groups/{groupId}
     * @allow (get) Any user can read group data.
     * @allow (list) Any user can list group documents.
     * @deny (create) Only authenticated users can create groups, owner ID must be present in data.
     * @deny (update) Only authenticated users can update groups.
     * @deny (delete) Only authenticated users can delete groups.
     * @principle Public read, owner-only writes.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}