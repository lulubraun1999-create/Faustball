/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model where 'admin' users have elevated privileges.
 * Regular users can only access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user authentication data. Accessible only by admins or the user themselves.
 * - /members/{memberId}: Stores user profile data. Accessible by admins or the owning user.
 * - /appointments/{appointmentId}: Stores all appointments. Writable only by admins, readable by all users.
 * - /groups/{groupId}: Stores groups (classes and teams). Writable only by admins, readable by all users.
 *
 * Key Security Decisions:
 * - Users can only list documents in collections explicitly marked as listable.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 * - The ruleset prioritizes simplicity and performance by avoiding complex queries and using denormalized data where appropriate.
 *
 * Denormalization for Authorization:
 *  - The system assumes that the `userId` field within the `/members/{memberId}` collection matches the document ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures core user account information.
     * @path /users/{userId}
     * @allow (create, update, get) if the user is the owner (userId matches auth.uid) or is an admin.
     * @deny (create, update, get) if the user is not the owner or is not an admin.
     * @principle Enforces document ownership and admin override for user data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false; // Listing users is not permitted

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if false;
    }

    /**
     * @description Secures editable profile information for a team member.
     * @path /members/{memberId}
     * @allow (create, update, get) if the user is the owner (userId matches auth.uid) or is an admin.
     * @deny (create, update, get) if the user is not the owner or is not an admin.
     * @principle Enforces document ownership and admin override for member data.
     */
    match /members/{memberId} {
      allow get: if isSignedIn() && (isOwner(memberId) || isAdmin());
      allow list: if false; // Listing members is not permitted

      allow create: if isSignedIn() && isOwner(memberId);
      allow update: if isSignedIn() && (isOwner(memberId) || isAdmin());
      allow delete: if false;
    }

    /**
     * @description Secures appointment data, allowing public reads and admin-only writes.
     * @path /appointments/{appointmentId}
     * @allow (get, list) if true (publicly readable).
     * @allow (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Provides public read access with restricted write access based on admin role.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;

      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Secures group data (classes and teams), allowing public reads and admin-only writes.
     * @path /groups/{groupId}
     * @allow (get, list) if true (publicly readable).
     * @allow (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     */
    match /groups/{groupId} {
      allow get, list: if true;

      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an administrator.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return request.auth.token.email == "admin@faustapp.de"; // Only allow creation if admin@faustapp.de
    }
  }
}