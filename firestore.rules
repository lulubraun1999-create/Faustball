rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user accounts.
     * @path /users/{userId}
     * @allow (create) - If the user's auth UID matches the userId.
     * @allow (get) - If the user is the owner or an admin.
     * @allow (update) - If the user is the owner or an admin.
     * @allow (delete) - If the user is the owner or an admin.
     * @deny (list) - Listing users is not allowed.
     * @principle Enforces document ownership and admin overrides.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
    }

    /**
     * @description Controls access to member profiles.
     * @path /members/{memberId}
     * @allow (create) - If the user's auth UID matches the member's userId or if admin
     * @allow (get) - If the user is the owner or an admin.
     * @allow (update) - If the user is the owner or an admin.
     * @allow (delete) - If the user is the owner or an admin.
     * @deny (create) - If the user's auth UID doesn't match the member's userId and not an admin.
     * @deny (list) - Listing members is not allowed.
     * @principle Enforces document ownership and admin overrides.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow create: if isSignedIn() && (request.resource.data.userId == request.auth.uid || isAdmin());
      allow get: if isSignedIn() && (request.resource.data.userId == request.auth.uid || isAdmin());
      allow update: if isSignedIn() && (request.resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isSignedIn() && (request.resource.data.userId == request.auth.uid || isAdmin());
      allow list: if false;
    }

    /**
     * @description Controls access to appointments.
     * @path /appointments/{appointmentId}
     * @allow (get) - Public read access.
     * @allow (list) - Public read access.
     * @allow (create) - Admin-only write access.
     * @allow (update) - Admin-only write access.
     * @allow (delete) - Admin-only write access.
     * @principle Public read, admin-only write.
     */
    match /appointments/{appointmentId} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to groups (classes and teams).
     * @path /groups/{groupId}
     * @allow (get) - Public read access.
     * @allow (list) - Public read access.
     * @allow (create) - Admin-only write access.
     * @allow (update) - Admin-only write access.
     * @allow (delete) - Admin-only write access.
     * @principle Public read, admin-only write.
     */
    match /groups/{groupId} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}