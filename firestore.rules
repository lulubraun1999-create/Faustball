rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the /users/{userId} collection.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with matching auth UID can create their own record.
     * @allow (get, update, delete) User with matching auth UID or admin can read/modify their own record.
     * @deny (list) Listing all users is not allowed.
     * @deny (create) User cannot create a record with a mismatched user id.
     * @deny (update, delete) User cannot modify a record that does not exist.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);

      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Secures the /members/{memberId} collection.
     * @path /databases/{database}/documents/members/{memberId}
     * @allow (create) Authenticated user can create a member profile.
     * @allow (get, update, delete) User with matching userId in document or admin can read/modify.
     * @deny (create) User cannot create a record with a mismatched user id.
     * @deny (update, delete) User cannot modify a record that does not exist.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memberId) {
        return request.auth.uid == resource.data.userId;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }


      allow get: if resource.data.userId == request.auth.uid || isAdmin();
      allow list: if false; // Listing members is not explicitly mentioned as allowed anywhere, so it is denied.

      allow create: if isSignedIn();

      allow update: if resource.data.userId == request.auth.uid || isAdmin();
      allow delete: if resource.data.userId == request.auth.uid || isAdmin();
    }

    /**
     * @description Secures the /appointments/{appointmentId} collection.
     * @path /databases/{database}/documents/appointments/{appointmentId}
     * @allow (get, list) Public read access for all users.
     * @allow (create, update, delete) Only admins can write.
     * @deny (create, update, delete) Non admins cannot write.
     * @principle Grants public read access with admin-only writes.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secures the /groups/{groupId} collection.
     * @path /databases/{database}/documents/groups/{groupId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only admins can write.
     * @deny (create, update, delete) Non admins cannot write.
     * @principle Grants public read access with admin-only writes.
     */
    match /groups/{groupId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}