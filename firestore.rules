/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model.
 * - Users can only read or write their own data in `/users/{userId}`.
 * - Members can only read or write their own data in `/members/{memberId}`.
 * - Appointments and Groups data is publicly readable.
 * - Only authenticated administrators can create, update, or delete Appointments or Groups.
 *
 * Data Structure:
 * - /users/{userId}: Stores user authentication and profile information.
 * - /members/{memberId}: Stores detailed member profile data.
 * - /appointments/{appointmentId}: Stores appointment (event, training, game) information.
 * - /groups/{groupId}: Stores group (class, team) information.
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - Admin role is not yet implemented - all admin functionality defaults to `false`.
 *
 * Denormalization for Authorization:
 *  None. The current authorization scheme is based on matching the authenticated user's ID to document IDs and doesn't need denormalization.
 *
 * Structural Segregation:
 * Drafts vs. Published Content: Not applicable in this data model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user account data.
     * @path /users/{userId}
     * @allow (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own document in /users/Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @allow (get, update, delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can get, update, and delete their own document in /users/Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @deny (create) User 'Hk6YUjoi02asj90d' cannot create a document in /users/Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @deny (get, update, delete) User 'Hk6YUjoi02asj90d' cannot get, update, or delete document in /users/Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @principle Enforces user-ownership for reads and writes; users can only access their own profile data.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disabled for privacy

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to member profile data.
     * @path /members/{memberId}
     * @allow (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own document in /members/Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @allow (get, update, delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can get, update, and delete their own document in /members/Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @deny (create) User 'Hk6YUjoi02asj90d' cannot create a document in /members/Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @deny (get, update, delete) User 'Hk6YUjoi02asj90d' cannot get, update, or delete document in /members/Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @principle Enforces user-ownership for reads and writes; users can only access their own profile data.
     */
    match /members/{memberId} {
       // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(memberId) {
        return request.auth.uid == memberId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(memberId) {
        return isOwner(memberId) && resource != null;
      }

      allow get: if isOwner(memberId);
      allow list: if false; // Disable listing for privacy.

      allow create: if isSignedIn() && request.auth.uid == memberId;
      allow update: if isExistingOwner(memberId);
      allow delete: if isExistingOwner(memberId);
    }

    /**
     * @description Controls access to appointment data.  Readable by all, writable only by admins.
     * @path /appointments/{appointmentId}
     * @allow (get, list) Any user can read appointment data.
     * @deny (create, update, delete) Only admins can create, update, and delete appointment data.
     * @principle Public read access with restricted write access using admin role.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin check
    }

    /**
     * @description Controls access to group data (classes and teams). Readable by all, writable only by admins.
     * @path /groups/{groupId}
     * @allow (get, list) Any user can read group data.
     * @deny (create, update, delete) Only admins can create, update, and delete group data.
     * @principle Public read access with restricted write access using admin role.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin check
    }
  }
}