rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() { return request.auth != null; }
    function isAdmin() { return request.auth.token.admin == true; }
    function getMemberDoc(uid) { return get(/databases/$(database)/documents/members/$(uid)); }
    function getUserTeams() {
      // Nutze get() direkt mit .data Zugriff, was null zurückgibt, falls nicht existent
      let memberData = getMemberDoc(request.auth.uid).data;
      // Stelle sicher, dass memberData und das 'teams'-Feld existieren
      return memberData != null && 'teams' in memberData ? memberData.teams : [];
    }
    // Prüft, ob der Benutzer Mitglied des Teams ist, zu dem das gelesene Dokument gehört
    function isMemberOfDocTeamResource() {
      let userTeams = getUserTeams(); // Hole User Teams (kann leere Liste sein)
      // Stelle sicher, dass resource.data existiert, teamId hat und der User Teams hat
      return isSignedIn() &&
             resource != null && resource.data != null &&
             resource.data.keys().hasAny(['teamId']) &&
             userTeams.size() > 0 &&
             userTeams.hasAny([resource.data.teamId]); // Prüfe Mitgliedschaft mit hasAny
    }


    // --- /users/{userId} ---
    match /users/{userId} {
      function isOwner(userId) { return request.auth.uid == userId; }
      function isCreatingOwnDocument(userId) { return request.auth.uid == userId && request.resource.data.id == userId && (request.resource.data.role == 'user' || !('role' in request.resource.data)); }
      function isUpdatingOwnDocument(userId) { return isOwner(userId) && !('role' in request.resource.data); }
      function isAdminUpdatingDocument() { return isAdmin(); }
      function isOwnerDeleting(userId) { return isOwner(userId); }

      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isCreatingOwnDocument(userId);
      allow update: if isSignedIn() && (isUpdatingOwnDocument(userId) || isAdminUpdatingDocument());
      allow delete: if isSignedIn() && (isOwnerDeleting(userId) || isAdmin());
    }

    // --- /members/{memberId} ---
    match /members/{memberId} {
        function isOwner(memberId) { return request.auth.uid == memberId; }
        function isExistingOwner() {
          // Prüft, ob resource existiert und userId hat
          return isSignedIn() && resource != null && resource.data != null && resource.data.userId == request.auth.uid;
        }
        function isCreatingOwnProfile(memberId) { return request.auth.uid == memberId && request.resource.data.userId == request.auth.uid; }

        allow get: if isSignedIn() && (isOwner(memberId) || isAdmin());
        allow list: if isSignedIn() && isAdmin();
        allow create: if isSignedIn() && isCreatingOwnProfile(memberId);
        allow update, delete: if isSignedIn() && (isExistingOwner() || isAdmin());
    }

    // --- /groups/{groupId} ---
    match /groups/{groupId} {
        allow get, list: if true;
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /groups/{groupId}/members/{memberId} ---
    match /groups/{groupId}/members/{memberId} {
        allow get, list: if true;
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /appointmentTypes/{typeId} ---
    match /appointmentTypes/{typeId} {
        allow read: if true;
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /locations/{locationId} ---
    match /locations/{locationId} {
        allow read: if true;
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /appointments/{appointmentId} ---
    match /appointments/{appointmentId} {
        function isMemberOfVisibleTeamForAppointment() {
          let memberTeams = getUserTeams();
          return memberTeams != null &&
                 resource.data != null &&
                 resource.data.keys().hasAny(['visibility']) &&
                 resource.data.visibility.type == 'specificTeams' &&
                 resource.data.visibility.keys().hasAny(['teamIds']) &&
                 resource.data.visibility.teamIds.hasAny(memberTeams);
        }

        allow read: if isSignedIn() && (
                      isAdmin() ||
                      (resource.data.keys().hasAny(['visibility']) && resource.data.visibility.type == 'all') ||
                      isMemberOfVisibleTeamForAppointment()
                    );
        allow write: if isSignedIn() && isAdmin();
    }
    
    // --- /appointmentResponses/{responseId} ---
    match /appointmentResponses/{responseId} {
        function isResponseOwner() { return request.resource.data.keys().hasAny(['userId']) && request.auth.uid == request.resource.data.userId; }
        function isExistingResponseOwner() { return resource != null && resource.data.keys().hasAny(['userId']) && request.auth.uid == resource.data.userId; }

        allow get: if isSignedIn() && (isAdmin() || isExistingResponseOwner());
        allow list: if isSignedIn() && (
                      isAdmin() ||
                      (request.query.keys().hasAny(['where']) && (
                        (request.query.where.field == 'userId' && request.query.where.value == request.auth.uid) ||
                        (request.query.where.field == 'appointmentId')
                      ))
                    );
        allow create: if isSignedIn() && isResponseOwner();
        allow update, delete: if isSignedIn() && isExistingResponseOwner();
    }

    // --- /appointmentExceptions/{exceptionId} ---
    match /appointmentExceptions/{exceptionId} {
        function getOriginalAppointmentFromResource() { return resource.data.keys().hasAny(['originalAppointmentId']) ? get(/databases/$(database)/documents/appointments/$(resource.data.originalAppointmentId)) : null; }
        function getOriginalAppointmentFromRequest() { return request.resource.data.keys().hasAny(['originalAppointmentId']) ? get(/databases/$(database)/documents/appointments/$(request.resource.data.originalAppointmentId)) : null; }
        function isMemberOfOriginalAppointmentTeamFromResource() {
           let originalAppointment = getOriginalAppointmentFromResource();
           if (originalAppointment == null || originalAppointment.data == null) { return false; }
           let originalAppointmentData = originalAppointment.data;
           let memberTeams = getUserTeams();
           return memberTeams != null &&
                  'visibility' in originalAppointmentData &&
                  originalAppointmentData.visibility.type == 'specificTeams' &&
                  'teamIds' in originalAppointmentData.visibility &&
                  originalAppointmentData.visibility.teamIds.hasAny(memberTeams);
        }

        allow get: if isSignedIn() && ( isAdmin() || (getOriginalAppointmentFromResource() != null && getOriginalAppointmentFromResource().data.visibility.type == 'all') || isMemberOfOriginalAppointmentTeamFromResource() );
        allow list: if isSignedIn() && isAdmin();
        allow create: if isSignedIn() && isAdmin() && exists(/databases/$(database)/documents/appointments/$(request.resource.data.originalAppointmentId));
        allow update, delete: if isSignedIn() && isAdmin();
    }

    // --- /polls/{pollId} ---
    match /polls/{pollId} {
        function isMemberOfVisibleTeamForPollResource() {
          let memberTeams = getUserTeams();
          return memberTeams != null &&
                 resource.data != null &&
                 resource.data.keys().hasAny(['visibility']) &&
                 resource.data.visibility.type == 'specificTeams' &&
                 resource.data.visibility.keys().hasAny(['teamIds']) &&
                 resource.data.visibility.teamIds.hasAny(memberTeams);
        }

        allow get: if isSignedIn() && (
                     isAdmin() ||
                     (resource.data.keys().hasAny(['visibility']) && resource.data.visibility.type == 'all') ||
                     isMemberOfVisibleTeamForPollResource()
                   );
        allow list: if isSignedIn();
        allow create, delete: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && (
                      isAdmin() ||
                      ( (resource.data != null &&
                         (resource.data.visibility.type == 'all' || isMemberOfVisibleTeamForPollResource())) &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['votes']) )
                    );
    }

    // --- /news/{newsId} ---
    match /news/{newsId} {
        allow read: if true;
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /treasury/{transactionId} ---
    match /treasury/{transactionId} {
        allow read: if isSignedIn() && (isAdmin() || isMemberOfDocTeamResource());
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /penalties/{penaltyId} ---
    match /penalties/{penaltyId} {
       allow read: if isSignedIn() && (isAdmin() || isMemberOfDocTeamResource());
       allow write: if isSignedIn() && isAdmin();
    }
  }
}