/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * User documents are secured using an ownership model, while appointments and groups are readable by all but writable only by admins.
 *
 * Data Structure:
 * - /users/{userId}: User authentication and profile data.
 * - /members/{memberId}: Detailed profile information for team members.
 * - /appointments/{appointmentId}: Calendar events, training sessions, and games.
 * - /groups/{groupId}: Classes and teams.
 *
 * Key Security Decisions:
 * - Users can only list their own data (where applicable) or, in some cases, only view it directly.
 * - Admin role is not explicitly defined but is implied for write access to appointments and groups.
 * - The rules are written to be as restrictive as possible while still allowing the application to function.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own document.
     * @allow (get) Authenticated user can read their own document.
     * @allow (update) Authenticated user can update their own document.
     * @allow (delete) Authenticated user can delete their own document.
     * @deny (create) User cannot create a document with a mismatched UID.
     * @deny (list) Listing all user documents is prohibited.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to member profile documents.
     * @path /members/{memberId}
     * @allow (create) Authenticated user can create their own profile if userId matches.
     * @allow (get) Authenticated user can read their own profile if userId matches.
     * @allow (update) Authenticated user can update their own profile if userId matches.
     * @allow (delete) Authenticated user can delete their own profile if userId matches.
     * @deny (create) User cannot create a profile with a mismatched userId.
     * @deny (list) Listing all members is prohibited.
     * @principle Enforces document ownership for writes.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

         function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isExistingOwner(resource.data.userId) && request.auth.uid == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId) && request.auth.uid == resource.data.userId;
    }

    /**
     * @description Controls access to appointment documents.
     * @path /appointments/{appointmentId}
     * @allow (get) All users can read appointments.
     * @allow (list) All users can list appointments.
     * @deny (create) Only admins can create appointments.
     * @deny (update) Only admins can update appointments.
     * @deny (delete) Only admins can delete appointments.
     * @principle Public read, admin-only write access.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation.
    }

    /**
     * @description Controls access to group documents.
     * @path /groups/{groupId}
     * @allow (get) All users can read groups.
     * @allow (list) All users can list groups.
     * @deny (create) Only admins can create groups.
     * @deny (update) Only admins can update groups.
     * @deny (delete) Only admins can delete groups.
     * @principle Public read, admin-only write access.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation.
    }
  }
}