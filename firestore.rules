/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a role-based model for appointments and groups, with public read access where appropriate.
 *
 * Data Structure:
 * - /users/{userId}:  Stores core user data, accessible only by the user themselves or admins.
 * - /members/{memberId}: Stores detailed member profiles, accessible only by the owning user or admins.
 * - /appointments/{appointmentId}: Stores appointment data, readable by all, writable only by admins.
 * - /groups/{groupId}: Stores group data (classes and teams), readable by all, writable only by admins.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Admins have full access to all data.  This assumes an 'admin' role is set on the user document.
 * - Public read access is granted to the appointments and groups collections to allow for app-wide visibility of this data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user accounts. Grants access only to the owning user or admins.
     * @path /users/{userId}
     * @allow (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own user document.
     * @allow (get) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can retrieve their own user document.
     * @allow (update) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can update their own user document.
     * @allow (delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can delete their own user document.
     * @deny (list) Listing all users is not permitted.
     * @deny (create) User 'EvilUser' cannot create a document for User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @principle Enforces document ownership and restricts unauthorized access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Protects member profiles. Grants access only to the owning user or admins.
     * @path /members/{memberId}
     * @allow (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own member profile.
     * @allow (get) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can retrieve their own member profile.
     * @allow (update) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can update their own member profile.
     * @allow (delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can delete their own member profile.
     * @deny (list) Listing all members is not permitted to the client.
     * @deny (create) User 'EvilUser' cannot create a document for User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @principle Enforces document ownership and restricts unauthorized access.
     */
    match /members/{memberId} {
      allow get: if isMemberOwner(memberId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isMemberOwner(memberId) || isAdmin();
      allow delete: if isMemberOwner(memberId) || isAdmin();
    }

    /**
     * @description Allows public read access to appointments, but restricts writes to admins only.
     * @path /appointments/{appointmentId}
     * @allow (get) Any user can retrieve an appointment.
     * @allow (list) Any user can list appointments.
     * @allow (create) Only admins can create appointments.
     * @allow (update) Only admins can update appointments.
     * @allow (delete) Only admins can delete appointments.
     * @deny (create) A regular user cannot create an appointment.
     * @principle Allows open access for reads and restricts modification access to admins.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to groups, but restricts writes to admins only.
     * @path /groups/{groupId}
     * @allow (get) Any user can retrieve a group.
     * @allow (list) Any user can list groups.
     * @allow (create) Only admins can create groups.
     * @allow (update) Only admins can update groups.
     * @allow (delete) Only admins can delete groups.
     * @deny (create) A regular user cannot create a group.
     * @principle Allows open access for reads and restricts modification access to admins.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isMemberOwner(memberId) {
      return isSignedIn() && get(/databases/$(database)/documents/members/$(memberId)).data.userId == request.auth.uid;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}