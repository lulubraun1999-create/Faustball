/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model for administrative write permissions and an ownership-based model for user-specific data. Public read access is granted where appropriate for generally accessible data.
 *
 * Data Structure:
 * - Users: /users/{userId} - Stores core user data.
 * - Members: /members/{memberId} - Stores editable user profile data.
 * - Groups: /groups/{groupId} - Stores group information (classes and teams).
 * - Appointments: /appointments/{appointmentId} - Stores appointment data.
 * - Polls: /polls/{pollId} - Stores poll data.
 * - News: /news/{newsId} - Stores news article data.
 * - Treasury: /treasury/{transactionId} - Stores treasury transaction data.
 * - Penalties: /penalties/{penaltyId} - Stores penalty catalog data.
 *
 * Key Security Decisions:
 * - Admin Role: Write access to appointments, groups, polls, news, treasury, and penalties collections is restricted to authenticated users with the "admin" role.
 * - User Ownership: Users can only read and write their own user and member documents.
 * - Public Read: Appointments, groups, and news articles are publicly readable.  Polls are readable by "designated users".
 * - No User Listing: Listing all users is not permitted.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create their own document if request.auth.uid == userId.
     * @allow (get, update, delete) User 'user_abc' can only access their own document if request.auth.uid == userId.
     * @deny (create) User 'user_xyz' cannot create a document for user 'user_abc'.
     * @principle Enforces document ownership and prevents unauthorized data modification.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to member profile documents.
     * @path /members/{memberId}
     * @allow (get, update, delete) User 'user_abc' can only access their own member document if request.auth.uid == resource.data.userId.
     * @deny (create) Unauthorized creation is not possible, document ID is generated by the client.
     * @deny (update) User 'user_xyz' cannot modify member 'user_abc' data.
     * @principle Enforces document ownership and prevents unauthorized data modification.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if false;
      allow create: if false;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

       /**
         * @description Controls access to group member documents within a group.
         * @path /groups/{groupId}/members/{memberId}
         * @allow (get, list) Group members can read the member list.
         * @deny (create, update, delete) Only admins can modify the member list.
         * @principle Restricts write access to group members to admins.
         */
        match /groups/{groupId}/members/{memberId} {
          function isSignedIn() {
            return request.auth != null;
          }
          function isAdmin() {
            return isSignedIn() && request.auth.token.role == 'admin';
          }
           allow get: if true;
           allow list: if true;
           allow create: if isAdmin();
           allow update: if isAdmin();
           allow delete: if isAdmin();
        }

    /**
     * @description Controls access to appointment documents.
     * @path /appointments/{appointmentId}
     * @allow (get, list) All users can read appointment data.
     * @deny (create, update, delete) Only admins can modify appointment data.
     * @principle Grants public read access and restricts write access to admins.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to group documents.
     * @path /groups/{groupId}
     * @allow (get, list) All users can read group data.
     * @deny (create, update, delete) Only admins can modify group data.
     * @principle Grants public read access and restricts write access to admins.
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to poll documents.
     * @path /polls/{pollId}
     * @allow (get, list) All users can read poll data.
     * @deny (create, update, delete) Only admins can modify poll data.
     */
    match /polls/{pollId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to news article documents.
     * @path /news/{newsId}
     * @allow (get, list) All users can read news article data.
     * @deny (create, update, delete) Only admins can modify news article data.
     * @principle Grants public read access and restricts write access to admins.
     */
    match /news/{newsId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to treasury transaction documents.
     * @path /treasury/{transactionId}
     * @deny (get, list) Treasury data should not be generally accessible
     * @deny (create, update, delete) Only admins can modify treasury transaction data.
     */
    match /treasury/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to penalty documents.
     * @path /penalties/{penaltyId}
     * @deny (get, list) Penalty rules data should not be generally accessible
     * @deny (create, update, delete) Only admins can modify penalty data.
     */
    match /penalties/{penaltyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}