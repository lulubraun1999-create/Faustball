
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() { return request.auth != null; }
    function isAdmin() { return request.auth.token.admin == true; }
    
    function isOwner(userId) { return request.auth.uid == userId; }
    function getMemberDoc(uid) { return get(/databases/$(database)/documents/members/$(uid)); }
    
    function getUserTeams() {
      let memberData = getMemberDoc(request.auth.uid).data;
      // Stellt sicher, dass das Feld 'teams' existiert und eine Liste ist
      return memberData != null && 'teams' in memberData && memberData.teams is list ? memberData.teams : [];
    }
    
    function isMemberOfDocTeamResource() {
      let userTeams = getUserTeams(); 
      return isSignedIn() &&
             resource != null && resource.data != null &&
             resource.data.keys().hasAny(['teamId']) &&
             userTeams.size() > 0 &&
             userTeams.hasAny([resource.data.teamId]);
    }

    // --- /users/{userId} ---
    match /users/{userId} {
      function isCreatingOwnDocument() { 
          return request.auth.uid == userId && 
                 request.resource.data.id == userId && 
                 (!('role' in request.resource.data) || request.resource.data.role == 'user');
      }
      function isUpdatingOwnDocument() { 
          // Regular users cannot change their own role.
          return isOwner(userId) && !('role' in request.resource.data); 
      }
      
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isSignedIn() && isAdmin();
      allow create: if isCreatingOwnDocument();
      allow update: if isSignedIn() && (isUpdatingOwnDocument() || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    // --- /members/{memberId} ---
    match /members/{memberId} {
        function isCreatingOwnProfile() { 
            return isOwner(memberId) && request.resource.data.userId == request.auth.uid; 
        }
        function isUpdatingOwnProfile() {
            // Check that the user is updating their own document and not changing critical fields
            return isOwner(memberId) && 
                   request.resource.data.userId == resource.data.userId &&
                   request.resource.data.email == resource.data.email &&
                   !('role' in request.resource.data);
        }
        
        allow get: if isSignedIn();
        allow list: if isSignedIn() && isAdmin();
        allow create: if isCreatingOwnProfile();
        allow update: if isSignedIn() && (isUpdatingOwnProfile() || isAdmin());
        allow delete: if isSignedIn() && (isOwner(memberId) || isAdmin());
    }

    // --- /groups/** ---
    match /groups/{groupId} {
        allow read: if true;
        allow write: if isSignedIn() && isAdmin();
        
        match /members/{memberId} {
            allow read: if true;
            allow write: if isSignedIn() && isAdmin();
        }
    }
    
    // --- /appointmentTypes/{typeId} ---
    match /appointmentTypes/{typeId} {
        allow read: if true;
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /locations/{locationId} ---
    match /locations/{locationId} {
        allow read: if true;
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /appointments/{appointmentId} ---
    match /appointments/{appointmentId} {
        function isMemberOfVisibleTeam() {
          let userTeams = getUserTeams();
          return userTeams != null &&
                 resource.data != null &&
                 'visibility' in resource.data &&
                 resource.data.visibility.type == 'specificTeams' &&
                 'teamIds' in resource.data.visibility &&
                 resource.data.visibility.teamIds.hasAny(userTeams);
        }

        allow read: if isSignedIn() && (
                      isAdmin() ||
                      resource.data.visibility.type == 'all' ||
                      isMemberOfVisibleTeam()
                    );
        allow write: if isSignedIn() && isAdmin();
    }
    
    // --- /appointmentResponses/{responseId} ---
    match /appointmentResponses/{responseId} {
        function isResponseOwner() { 
            return request.resource.data.userId == request.auth.uid; 
        }
        function isExistingResponseOwner() { 
            return resource.data.userId == request.auth.uid; 
        }

        allow get: if isSignedIn() && (isAdmin() || isExistingResponseOwner());
        allow list: if isSignedIn() && isAdmin();
        allow create: if isSignedIn() && isResponseOwner();
        allow update, delete: if isSignedIn() && isExistingResponseOwner();
    }

    // --- /appointmentExceptions/{exceptionId} ---
    match /appointmentExceptions/{exceptionId} {
        allow read, write: if isSignedIn() && isAdmin();
    }

    // --- /polls/{pollId} ---
    match /polls/{pollId} {
        function isMemberOfVisibleTeamForPoll() {
            let userTeams = getUserTeams();
            return userTeams != null &&
                'visibility' in resource.data && resource.data.visibility.type == 'specificTeams' &&
                'teamIds' in resource.data.visibility &&
                userTeams.hasAny(resource.data.visibility.teamIds);
        }

        function isVoteChangeOnly() {
            return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['votes']);
        }
        
        allow get: if isSignedIn() && (
                    isAdmin() ||
                    (resource.data.visibility.type == 'all') ||
                    isMemberOfVisibleTeamForPoll()
                    );
        
        // Let 'get' rule handle list queries implicitly
        allow list: if false; 

        allow create, delete: if isSignedIn() && isAdmin();
        
        allow update: if isSignedIn() &&
                        (isAdmin() || 
                         (isVoteChangeOnly() && (resource.data.visibility.type == 'all' || isMemberOfVisibleTeamForPoll()))
                        );
    }

    // --- /news/{newsId} ---
    match /news/{newsId} {
        allow read: if true;
        allow write: if isSignedIn() && isAdmin();
    }

    // --- Treasury & Penalties ---
    match /treasury/{transactionId} {
        allow read: if isSignedIn() && (isAdmin() || isMemberOfDocTeamResource());
        allow write: if isSignedIn() && isAdmin();
    }

    match /penalties/{penaltyId} {
       allow read: if isSignedIn() && (isAdmin() || isMemberOfDocTeamResource());
       allow write: if isSignedIn() && isAdmin();
    }
  }
}
