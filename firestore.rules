rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user account data, allowing only the user or an admin to read/write their own data.
     * @path /users/{userId}
     * @allow (create) - User with matching UID can create their own record.
     * @allow (get, update, delete) - User with matching UID can read/update/delete their own record.
     * @deny (create, get, update, delete) - Any user trying to access another user's record.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isAdmin() {
        // TODO: Implement proper admin role check (e.g., via custom claims)
        return false;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Secures member profile data, allowing only the user or an admin to read/write their own profile.
     * @path /members/{memberId}
     * @allow (create) - User can create their own member profile.
     * @allow (get, update, delete) - User with matching UID can read/update/delete their own profile.
     * @deny (create, get, update, delete) - Any user trying to access another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /members/{memberId} {
      function isOwner(memberId) {
          return request.auth != null && request.auth.uid == get(/databases/$(database)/documents/members/$(memberId)).data.userId;
      }

      function isAdmin() {
        // TODO: Implement proper admin role check (e.g., via custom claims)
        return false;
      }

        function isExistingOwner(memberId) {
        return isOwner(memberId) && resource != null;
      }

      allow get: if isOwner(memberId) || isAdmin();
      allow list: if false; // Listing members is not permitted.
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if isExistingOwner(memberId) || isAdmin();
      allow delete: if isExistingOwner(memberId) || isAdmin();
    }
    
    /**
     * @description Allows anyone to read appointments, but only admins can create, update, or delete them.
     * @path /appointments/{appointmentId}
     * @allow (get, list) - Any user can read appointments.
     * @deny (create, update, delete) - Only admins can create, update, or delete appointments.
     * @principle Restricts write access to admins while allowing public read access.
     */
    match /appointments/{appointmentId} {
      function isAdmin() {
        // TODO: Implement proper admin role check (e.g., via custom claims)
        return false;
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read groups, but only admins can create, update, or delete them.
     * @path /groups/{groupId}
     * @allow (get, list) - Any user can read groups.
     * @deny (create, update, delete) - Only admins can create, update, or delete groups.
     * @principle Restricts write access to admins while allowing public read access.
     */
    match /groups/{groupId} {
      function isAdmin() {
        // TODO: Implement proper admin role check (e.g., via custom claims)
        return false;
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();

      /**
       * @description Secures group member data, allowing only admins to read/write.
       * @path /groups/{groupId}/members/{memberId}
       */
      match /members/{memberId} {
        function isAdmin() {
          // TODO: Implement proper admin role check (e.g., via custom claims)
          return false;
        }
        allow get, list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }
    }

    /**
     * @description Allows anyone to read polls, but only admins can create, update, or delete them.
     * @path /polls/{pollId}
     * @allow (get, list) - Any user can read polls.
     * @deny (create, update, delete) - Only admins can create, update, or delete polls.
     */
    match /polls/{pollId} {
      function isAdmin() {
        // TODO: Implement proper admin role check (e.g., via custom claims)
        return false;
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read news articles, but only admins can create, update, or delete them.
     * @path /news/{newsId}
     * @allow (get, list) - Any user can read news articles.
     * @deny (create, update, delete) - Only admins can create, update, or delete news articles.
     */
    match /news/{newsId} {
      function isAdmin() {
        // TODO: Implement proper admin role check (e.g., via custom claims)
        return false;
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Only admins can create, update, or delete treasury transactions.
     * @path /treasury/{transactionId}
     * @deny (get, list, create, update, delete) - Only admins can manage treasury transactions.
     */
    match /treasury/{transactionId} {
      function isAdmin() {
        // TODO: Implement proper admin role check (e.g., via custom claims)
        return false;
      }
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Only admins can create, update, or delete penalty rules.
     * @path /penalties/{penaltyId}
     * @deny (get, list, create, update, delete) - Only admins can manage penalty rules.
     */
    match /penalties/{penaltyId} {
      function isAdmin() {
        // TODO: Implement proper admin role check (e.g., via custom claims)
        return false;
      }
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read locations.
     * @path /locations
     * @allow (get, list) - Any user can read locations.
     * @deny (create, update, delete) - No one can create, update, or delete locations.
     */
    match /locations/{locationId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}