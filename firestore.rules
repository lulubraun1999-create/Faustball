/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model.
 * Users can only read and write data they own or that is explicitly shared with them.
 * Administrative roles have elevated privileges to manage all data.
 *
 * Data Structure:
 * - /users/{userId}: User authentication data.
 * - /members/{memberId}: Extended profile information for members.
 * - /groups/{groupId}/members/{memberId}: Denormalized group member data.
 * - /appointments/{appointmentId}: Calendar events.
 * - /groups/{groupId}: Classes and Teams.
 * - /polls/{pollId}: Polls and surveys.
 * - /news/{newsId}: News articles and announcements.
 * - /treasury/{transactionId}: Financial transactions.
 * - /penalties/{penaltyId}: Penalty rules.
 *
 * Key Security Decisions:
 * - All write operations are role-restricted. Data integrity is prioritized during prototyping.
 * - Read access is broadly granted where explicitly allowed, but listing of user-private data is restricted.
 * - No schema validation is performed beyond authorization-critical fields.
 * - The rules do not currently implement any complex querying or filtering.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user authentication data.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own user document.
     * @allow (get, update, delete) Signed-in user can only access their own user document or be an admin.
     * @deny (create) An unauthenticated user can not create a user.
     * @deny (get, update, delete) Signed-in user can not access a different user document.
     * @principle Enforces document ownership for writes, restricts listing to admins.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own user document on signup.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Manages member profile data.
     * @path /members/{memberId}
     * @allow (create) Signed-in user can create their own member profile.
     * @allow (get, update, delete) Signed-in user can only access their own member profile or be an admin.
     * @deny (create) An unauthenticated user can not create a member profile.
     * @deny (get, update, delete) Signed-in user can not access a different user document.
     * @principle Enforces document ownership for writes, restricts listing to admins.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memberId) {
        return request.auth.uid == get(/databases/$(database)/documents/members/$(memberId)).data.userId;
      }

       function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      function isExistingOwner(memberId) {
        return isOwner(memberId) && resource != null;
      }

      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow get: if isSignedIn() && (isOwner(memberId) || isAdmin());
      allow list: if false;
      allow update: if isExistingOwner(memberId) || isAdmin();
      allow delete: if isExistingOwner(memberId) || isAdmin();
    }

     /**
      * @description Manages denormalized group member data.
      * @path /groups/{groupId}/members/{memberId}
      * @allow (get, list) Any signed-in user can read group member data.
      * @allow (create, update, delete) Only admins can modify group member data.
      * @deny (create, update, delete) Non-admins cannot modify group member data.
      * @principle Restricts writes to admins, allows public reads.
      */
    match /groups/{groupId}/members/{memberId} {
        function isSignedIn() {
          return request.auth != null;
        }

         function isAdmin() {
          return isSignedIn() && request.auth.token.role == 'admin';
        }

        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Manages appointment data.
     * @path /appointments/{appointmentId}
     * @allow (get, list) Any user can read appointment data.
     * @allow (create, update, delete) Only admins can modify appointment data.
     * @deny (create, update, delete) Non-admins cannot modify appointment data.
     * @principle Restricts writes to admins, allows public reads.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
          return request.auth != null;
        }

       function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages group data (classes and teams).
     * @path /groups/{groupId}
     * @allow (get, list) Any user can read group data.
     * @allow (create, update, delete) Only admins can modify group data.
     * @deny (create, update, delete) Non-admins cannot modify group data.
     * @principle Restricts writes to admins, allows public reads.
     */
    match /groups/{groupId} {
      function isSignedIn() {
          return request.auth != null;
        }

       function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages poll data.
     * @path /polls/{pollId}
     * @allow (get, list) Any user can read poll data.
     * @allow (create, update, delete) Only admins can modify poll data.
     * @deny (create, update, delete) Non-admins cannot modify poll data.
     * @principle Restricts writes to admins, allows public reads.
     */
    match /polls/{pollId} {
      function isSignedIn() {
          return request.auth != null;
        }

       function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages news article data.
     * @path /news/{newsId}
     * @allow (get, list) Any user can read news article data.
     * @allow (create, update, delete) Only admins can modify news article data.
     * @deny (create, update, delete) Non-admins cannot modify news article data.
     * @principle Restricts writes to admins, allows public reads.
     */
    match /news/{newsId} {
      function isSignedIn() {
          return request.auth != null;
        }

       function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages treasury transaction data.
     * @path /treasury/{transactionId}
     * @allow (create, update, delete) Only admins can modify treasury data.
     * @deny (get, list) Non-admins can not get and list treasury data.
     * @principle Restricts writes to admins.
     */
    match /treasury/{transactionId} {
      function isSignedIn() {
          return request.auth != null;
        }

       function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow get: if false;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages penalty data.
     * @path /penalties/{penaltyId}
     * @allow (create, update, delete) Only admins can modify penalty data.
     * @deny (get, list) Non-admins can not get and list penalty data.
     * @principle Restricts writes to admins.
     */
    match /penalties/{penaltyId} {
      function isSignedIn() {
          return request.auth != null;
        }

       function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow get: if false;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
     /**
      * @description Restricts listing of the /members collection to authenticated users with 'admin' role.
      * @path /members
      * @deny (list) Denies listing the /members collection for non-admin users.
      * @principle Enforces role-based access control.
      */
    match /members {
         function isSignedIn() {
              return request.auth != null;
            }

           function isAdmin() {
            return isSignedIn() && request.auth.token.role == 'admin';
          }
          allow get: if false;
          allow list: if isAdmin();
          allow create: if false;
          allow update: if false;
          allow delete: if false;
    }
  }
}