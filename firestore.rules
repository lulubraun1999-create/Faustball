/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model.
 * Admins have full read/write access to all collections.
 * Regular users can only read public data and manage their own user and member documents.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data, accessible only by the user and admins.
 * - /members/{memberId}: Stores editable user profile data, accessible only by the user and admins.
 * - /appointments/{appointmentId}: Stores event data, readable by all, writable only by admins.
 * - /groups/{groupId}: Stores group data, readable by all, writable only by admins.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by the rules structure.
 * - Data shape validation is relaxed in prototyping mode to allow for rapid iteration.
 * - Role-based access uses a simple `isAdmin()` function.
 *
 * Denormalization for Authorization:
 *  None needed. The only role, that of admin, is checked via a helper function and is not stored as data in the documents themselves.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user documents. Only the user and admins can read and write.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their own document.
     * @allow (get, update, delete) User with matching ID can read and modify their document.
     * @deny (create) User cannot create a document with an ID different from their own.
     * @deny (get, update, delete) User cannot read or modify another user's document.
     * @principle Enforces document ownership for user data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return false; // TODO: Implement admin role check (e.g., from custom claims)
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if (isOwner(userId) || isAdmin()) && (request.resource.data.id == resource.data.id); // Enforce userId immutability
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Grants access to member documents. Only the associated user and admins can read and write.
     * @path /members/{memberId}
     * @allow (create, get, update, delete) User with matching ID can create, read, and modify their own member document.
     * @deny (create, get, update, delete) User cannot read or modify another user's member document.
     * @principle Enforces document ownership for member data.
     */
    match /members/{memberId} {
      function isMemberOwner(memberId) {
          return get(/databases/$(database)/documents/members/$(memberId)).data.userId == request.auth.uid
      }

      function isAdmin() {
        return false; // TODO: Implement admin role check (e.g., from custom claims)
      }

      allow get: if isMemberOwner(memberId) || isAdmin();
      allow list: if isAdmin(); // Only admins can list members
      allow create: if isMemberOwner(memberId);
      allow update: if isMemberOwner(memberId) || isAdmin();
      allow delete: if isMemberOwner(memberId) || isAdmin();
    }

    /**
     * @description Grants access to appointment documents. All users can read, only admins can write.
     * @path /appointments/{appointmentId}
     * @allow (get, list) All users can read appointments.
     * @allow (create, update, delete) Only admins can create, update, and delete appointments.
     * @principle Enforces admin-only write access for event data.
     */
    match /appointments/{appointmentId} {
      function isAdmin() {
        return false; // TODO: Implement admin role check (e.g., from custom claims)
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants access to group documents. All users can read, only admins can write.
     * @path /groups/{groupId}
     * @allow (get, list) All users can read groups.
     * @allow (create, update, delete) Only admins can create, update, and delete groups.
     * @principle Enforces admin-only write access for group data.
     */
    match /groups/{groupId} {
      function isAdmin() {
        return false; // TODO: Implement admin role check (e.g., from custom claims)
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}