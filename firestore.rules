/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and admin-controlled access.
 * User-specific data is protected using the Ownership pattern, while broader data like
 * appointments, groups, news, and treasury transactions are managed by admins.
 *
 * Data Structure:
 * - /users/{userId}: User authentication and profile data, accessible only by the user themselves or admins.
 * - /members/{memberId}: Editable user profile data, accessible only by the user themselves or admins.
 * - /groups/{groupId}: Group information (classes/teams), publicly readable but admin-writeable.
 * - /groups/{groupId}/members/{memberId}: Lightweight group membership data, publicly readable, and writable only by admins.
 * - /appointments/{appointmentId}: Appointment data, publicly readable but admin-writeable.
 * - /polls/{pollId}: Poll data, publicly readable, admin-writeable.
 * - /news/{newsId}: News article data, publicly readable but admin-writeable.
 * - /treasury/{transactionId}: Financial transaction data, only writable by admins.
 * - /penalties/{penaltyId}: Penalty catalog data, only writable by admins.
 *
 * Key Security Decisions:
 * - Listing of users and members is disallowed to protect privacy.
 * - Public read access is granted to appointments, groups, and news to allow for open information sharing.
 * - Admin role is not explicitly defined in the data model but is implicitly used in rules.
 *
 * Denormalization for Authorization:
 * No denormalization is explicitly required as ownership is based on user ID matching.
 *
 * Structural Segregation:
 * No structural segregation is used. Private and public data are managed through permissioning on collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects core user authentication data, allowing access only to the user themselves or admins.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create their own record if request.auth.uid == userId.
     * @allow (get, update, delete) User 'user_abc' can read/update/delete their record if request.auth.uid == userId.
     * @deny (create, update, delete) User 'user_xyz' cannot create/update/delete 'user_abc' record.
     * @deny (list) Prevents listing of all users for privacy reasons.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Protects editable user profile data, allowing access only to the user themselves or admins.
     * @path /members/{memberId}
     * @allow (create) User 'user_abc' can create their own member record if request.auth.uid matches the userId in the document.
     * @allow (get, update, delete) User 'user_abc' can read/update/delete their member record if request.auth.uid matches the userId in the document.
     * @deny (create, update, delete) User 'user_xyz' cannot create/update/delete 'user_abc' member record.
     * @deny (list) Prevents listing of all members for privacy reasons.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /members/{memberId} {
       function isOwner(memberId) {
        return request.auth != null && request.auth.uid == memberId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isOwner(memberId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == memberId;
      allow update: if isOwner(memberId);
      allow delete: if isOwner(memberId);
    }

    /**
     * @description Protects group membership data, allowing read access to all and write access to admins only.
     * @path /groups/{groupId}/members/{memberId}
     * @allow (get, list) All users can read group membership.
     * @deny (create, update, delete) Only admins can modify group membership (TODO: Implement Admin check).
     * @principle Public read access with admin-only writes.
     */
    match /groups/{groupId}/members/{memberId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Stores all appointments, allowing read access to all and write access to admins only.
     * @path /appointments/{appointmentId}
     * @allow (get, list) All users can read appointment data.
     * @deny (create, update, delete) Only admins can modify appointment data (TODO: Implement Admin check).
     * @principle Public read access with admin-only writes.
     */
    match /appointments/{appointmentId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Stores all groups (classes and teams), allowing read access to all and write access to admins only.
     * @path /groups/{groupId}
     * @allow (get, list) All users can read group data.
     * @deny (create, update, delete) Only admins can modify group data (TODO: Implement Admin check).
     * @principle Public read access with admin-only writes.
     */
    match /groups/{groupId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if true;
        allow create, update, delete: if false;  // TODO: Add admin role check
    }

    /**
     * @description Stores all polls, allowing read access to all and write access to admins only.
     * @path /polls/{pollId}
     * @allow (get, list) All users can read poll data.
     * @deny (create, update, delete) Only admins can modify poll data (TODO: Implement Admin check).
     * @principle Public read access with admin-only writes.
     */
    match /polls/{pollId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if true;
        allow create, update, delete: if false;  // TODO: Add admin role check
    }

    /**
     * @description Stores all news articles, allowing read access to all and write access to admins only.
     * @path /news/{newsId}
     * @allow (get, list) All users can read news article data.
     * @deny (create, update, delete) Only admins can modify news article data (TODO: Implement Admin check).
     * @principle Public read access with admin-only writes.
     */
    match /news/{newsId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if true;
        allow create, update, delete: if false;  // TODO: Add admin role check
    }

    /**
     * @description Stores all financial transactions, allowing write access to admins only.
     * @path /treasury/{transactionId}
     * @deny (get, list, create, update, delete) Only admins can access treasury data (TODO: Implement Admin check).
     * @principle Admin-only access.
     */
    match /treasury/{transactionId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list, create, update, delete: if false;  // TODO: Add admin role check
    }

    /**
     * @description Stores the penalty catalog rules, allowing write access to admins only.
     * @path /penalties/{penaltyId}
     * @deny (get, list, create, update, delete) Only admins can access penalty data (TODO: Implement Admin check).
     * @principle Admin-only access.
     */
    match /penalties/{penaltyId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list, create, update, delete: if false;  // TODO: Add admin role check
    }
  }
}