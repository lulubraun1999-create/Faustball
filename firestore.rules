/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and admin-controlled access.
 * User-specific data is protected using the Ownership pattern, while broader data like
 * appointments, groups, news, and treasury data is managed by admins.
 *
 * Data Structure:
 * - /users/{userId}: User authentication and profile data, accessible only by the user themselves or admins.
 * - /members/{memberId}: Editable member profile data, accessible only by the user themselves or admins.
 * - /groups/{groupId}: Represents classes and teams. Publicly readable, writable only by admins.
 * - /appointments/{appointmentId}: Calendar events. Publicly readable, writable only by admins.
 * - /news/{newsId}: News articles. Publicly readable, writable only by admins.
 * - /treasury/{transactionId}: Financial transactions, writable only by admins.
 * - /penalties/{penaltyId}: Penalty rules, writable only by admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Admin access is implicitly trusted; the rules do not validate admin status. In a production environment,
 *   a custom claim should be used to explicitly define admin users.
 * - Ambiguous access is denied by default, requiring explicit allow rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own user document.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get) User with ID 'user123' can get their own user document.
     *   - request.auth.uid: 'user123'
     * @allow (update) User with ID 'user123' can update their own user document.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' cannot create a user document for 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.id: 'user123'
     * @deny (update) User with ID 'user456' cannot update the user document for 'user123'.
     *   - request.auth.uid: 'user456'
     * @deny (delete) User with ID 'user123' cannot delete their user document (only admins can).
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes, restricts read access to the owner.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if false;
    }

    /**
     * @description Rules for member profile documents.
     * @path /members/{memberId}
     * @allow (create) User with ID 'user123' can create their own member profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (get) User with ID 'user123' can get their own member profile.
     *   - request.auth.uid: 'user123'
     * @allow (update) User with ID 'user123' can update their own member profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' cannot create a member profile for 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.userId: 'user123'
     * @deny (update) User with ID 'user456' cannot update the member profile for 'user123'.
     *   - request.auth.uid: 'user456'
     * @deny (delete) User with ID 'user123' cannot delete their member profile (only admins can).
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes, restricts read access to the owner.
     */
    match /members/{memberId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

      /**
       * @description Rules for members within a specific group.
       * @path /groups/{groupId}/members/{memberId}
       * @allow (get) Any signed-in user can get group member data.
       *   - request.auth.uid: 'user123'
       * @deny (create) Only admins can create group member data.
       *   - request.auth.uid: 'user123'
       * @deny (update) Only admins can update group member data.
       *   - request.auth.uid: 'user123'
       * @deny (delete) Only admins can delete group member data.
       *   - request.auth.uid: 'user123'
       * @principle Restricts write access to admins, allows read access to all signed-in users.
       */
    match /groups/{groupId}/members/{memberId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for appointment documents.
     * @path /appointments/{appointmentId}
     * @allow (get) Any user can read appointment data.
     *   - request.auth.uid: 'user123'
     * @allow (list) Any user can list appointment data.
     *   - request.auth.uid: 'user123'
     * @deny (create) Only admins can create appointments.
     *   - request.auth.uid: 'user123'
     * @deny (update) Only admins can update appointments.
     *   - request.auth.uid: 'user123'
     * @deny (delete) Only admins can delete appointments.
     *   - request.auth.uid: 'user123'
     * @principle Restricts write access to admins, allows public read access.
     */
    match /appointments/{appointmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for group documents (classes and teams).
     * @path /groups/{groupId}
     * @allow (get) Any user can read group data.
     *   - request.auth.uid: 'user123'
     * @allow (list) Any user can list group data.
     *   - request.auth.uid: 'user123'
     * @deny (create) Only admins can create groups.
     *   - request.auth.uid: 'user123'
     * @deny (update) Only admins can update groups.
     *   - request.auth.uid: 'user123'
     * @deny (delete) Only admins can delete groups.
     *   - request.auth.uid: 'user123'
     * @principle Restricts write access to admins, allows public read access.
     */
    match /groups/{groupId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for poll documents.
     * @path /polls/{pollId}
     * @allow (get) Any user can read poll data.
     *   - request.auth.uid: 'user123'
     * @deny (create) Only admins can create polls.
     *   - request.auth.uid: 'user123'
     * @deny (update) Only admins can update polls.
     *   - request.auth.uid: 'user123'
     * @deny (delete) Only admins can delete polls.
     *   - request.auth.uid: 'user123'
     * @principle Restricts write access to admins, allows read access to designated users.
     */
    match /polls/{pollId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for news article documents.
     * @path /news/{newsId}
     * @allow (get) Any user can read news article data.
     *   - request.auth.uid: 'user123'
     * @allow (list) Any user can list news article data.
     *   - request.auth.uid: 'user123'
     * @deny (create) Only admins can create news articles.
     *   - request.auth.uid: 'user123'
     * @deny (update) Only admins can update news articles.
     *   - request.auth.uid: 'user123'
     * @deny (delete) Only admins can delete news articles.
     *   - request.auth.uid: 'user123'
     * @principle Restricts write access to admins, allows public read access.
     */
    match /news/{newsId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for treasury transaction documents.
     * @path /treasury/{transactionId}
     * @deny (get) Only admins can read treasury transaction data.
     *   - request.auth.uid: 'user123'
     * @deny (list) Only admins can list treasury transaction data.
     *   - request.auth.uid: 'user123'
     * @deny (create) Only admins can create treasury transactions.
     *   - request.auth.uid: 'user123'
     * @deny (update) Only admins can update treasury transactions.
     *   - request.auth.uid: 'user123'
     * @deny (delete) Only admins can delete treasury transactions.
     *   - request.auth.uid: 'user123'
     * @principle Restricts access to admins only.
     */
    match /treasury/{transactionId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for penalty documents.
     * @path /penalties/{penaltyId}
     * @deny (get) Only admins can read penalty data.
     *   - request.auth.uid: 'user123'
     * @deny (list) Only admins can list penalty data.
     *   - request.auth.uid: 'user123'
     * @deny (create) Only admins can create penalties.
     *   - request.auth.uid: 'user123'
     * @deny (update) Only admins can update penalties.
     *   - request.auth.uid: 'user123'
     * @deny (delete) Only admins can delete penalties.
     *   - request.auth.uid: 'user123'
     * @principle Restricts access to admins only.
     */
    match /penalties/{penaltyId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
      /**
       * @description Rules for appointmentTypes collection.
       * @path /appointmentTypes
       * @allow (get) Any user can read appointmentTypes data.
       *   - request.auth.uid: 'user123'
       * @allow (list) Any user can list appointmentTypes data.
       *   - request.auth.uid: 'user123'
       * @deny (create) No one can create appointmentTypes data.
       *   - request.auth.uid: 'user123'
       * @deny (update) No one can update appointmentTypes data.
       *   - request.auth.uid: 'user123'
       * @deny (delete) No one can delete appointmentTypes data.
       *   - request.auth.uid: 'user123'
       * @principle Restricts write access, allows public read access.
       */
      match /appointmentTypes/{document} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }
  }
}