/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model. User data is strictly controlled via ownership,
 * while public data (appointments, groups) is readable by all authenticated users but
 * writable only by administrators.
 *
 * Data Structure:
 * - /users/{userId}: Stores user authentication data.  Write-protected after creation, except by admins.
 * - /members/{memberId}: Stores editable profile data. Accessible by admins or the owning user.
 * - /appointments/{appointmentId}: Stores appointment information. Publicly readable, admin-writable.
 * - /groups/{groupId}: Stores group information. Publicly readable, admin-writable.
 *
 * Key Security Decisions:
 * - Users can only list members.
 * - Admin role is not implemented in this ruleset.  All `create`, `update`, and `delete` operations are based on ownership.
 * - All `list` operations are restricted where possible, as they can be expensive and reveal data unnecessarily.
 * - Data shape validation is relaxed for rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own document.
     * @allow (get, update, delete) User with matching UID can access their own document.
     * @deny (create) User cannot create a document with a mismatched UID.
     * @deny (get, update, delete) User cannot access another user's document.
     * @principle Enforces document ownership for user data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to member documents.
     * @path /members/{memberId}
     * @allow (create) User with matching UID can create their own member document.
     * @allow (get, update, delete) User with matching UID can access and modify their own member document.
     * @deny (create) User cannot create a member document with a mismatched UID.
     * @deny (get, update, delete) User cannot access or modify another user's member document.
     * @principle Enforces document ownership for member data.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memberId) {
        return request.auth.uid == get(/databases/$(database)/documents/members/$(memberId)).data.userId;
      }
        
      function isExistingOwner(memberId) {
        return isOwner(memberId) && resource != null;
      }

      allow get: if isOwner(memberId);
      allow list: if true; // Fixed: Allowing listing of members
      allow create: if isSignedIn();
      allow update: if isExistingOwner(memberId);
      allow delete: if isExistingOwner(memberId);
    }

    /**
     * @description Controls access to appointment documents.
     * @path /appointments/{appointmentId}
     * @allow (get, list) All authenticated users can read appointment data.
     * @deny (create, update, delete) Only admins (not implemented) can modify appointment data.
     * @principle Public read, owner-only write (admin role not implemented).
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to group documents.
     * @path /groups/{groupId}
     * @allow (get, list) All authenticated users can read group data.
     * @deny (create, update, delete) Only admins (not implemented) can modify group data.
     * @principle Public read, owner-only write (admin role not implemented).
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}