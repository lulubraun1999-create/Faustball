rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() { return request.auth != null; }
    function isAdmin() { return isSignedIn() && request.auth.token.admin == true; }
    function isOwner(userId) { return isSignedIn() && request.auth.uid == userId; }

    function getUserTeams() {
      if (exists(/databases/$(database)/documents/members/$(request.auth.uid))) {
        let memberData = get(/databases/$(database)/documents/members/$(request.auth.uid)).data;
        return memberData.teams; 
      }
      return []; 
    }

    // --- User and Member Data ---
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    match /members/{memberId} {
      allow get: if isOwner(memberId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isOwner(memberId);
      allow update, delete: if isOwner(memberId) || isAdmin();
    }
    
    // --- Publicly readable data for any authenticated user ---
    match /groups/{groupId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /groups/{groupId}/members/{memberId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /appointmentTypes/{typeId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }

    match /locations/{locationId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    match /news/{newsId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }

    match /polls/{pollId} {
      allow read: if isSignedIn();
      allow update: if isSignedIn(); 
      allow create, delete: if isAdmin();
    }

    match /penalties/{penaltyId} {
       allow read: if isSignedIn();
       allow write: if isAdmin();
    }
    
    match /appointmentExceptions/{exceptionId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }

    // --- Conditional Reads & Writes ---

    match /appointments/{appointmentId} {
        function isVisible() {
          let userTeams = getUserTeams();
          return resource.data.visibility.type == 'all' || 
                 (resource.data.visibility.type == 'specificTeams' && resource.data.visibility.teamIds.hasAny(userTeams));
        }
        allow read: if isSignedIn() && (isAdmin() || isVisible());
        allow write: if isAdmin();
    }
    
    match /appointmentResponses/{responseId} {
        allow read, update, delete: if isSignedIn() && (isAdmin() || resource.data.userId == request.auth.uid);
        allow create: if isSignedIn() && (isAdmin() || request.resource.data.userId == request.auth.uid);
        allow list: if isAdmin();
    }

    match /treasury/{transactionId} {
        function isMemberOfTeam() {
          let userTeams = getUserTeams();
          return userTeams.hasAny([resource.data.teamId]);
        }
        allow read: if isSignedIn() && (isAdmin() || isMemberOfTeam());
        allow write: if isAdmin();
    }
  }
}
