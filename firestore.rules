/**
 * @file Overview
 * This ruleset implements a role-based access control model. The user with the role "admin" has full read and write access to all data.
 *
 * @data_structure
 * - /users/{userId}: User authentication data.
 * - /members/{memberId}: User profile data.
 * - /groups/{groupId}: Group information (classes and teams).
 * - /groups/{groupId}/members/{memberId}: Group member information.
 * - /appointments/{appointmentId}: Appointment or event data.
 * - /polls/{pollId}: Poll and survey data.
 * - /news/{newsId}: News articles and announcements.
 * - /treasury/{transactionId}: Financial transaction data.
 * - /penalties/{penaltyId}: Penalty rules data.
 *
 * @key_security_decisions
 * - The 'admin' role has unrestricted access to all data.
 * - Non-admin users have no specific restrictions due to the request made by the user.
 * - No data shape validation is performed in this prototype phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants full access to users with the "admin" role.
     * @path /users/{userId}
     * @allow (create, update, delete, get, list) - Authenticated user with admin role.
     * @deny (create, update, delete, get, list) - None. All requests are allowed for admin.
     * @principle Allows full access for admin users.
     */
    match /users/{userId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Grants full access to users with the "admin" role.
     * @path /members/{memberId}
     * @allow (create, update, delete, get, list) - Authenticated user with admin role.
     * @deny (create, update, delete, get, list) - None. All requests are allowed for admin.
     * @principle Allows full access for admin users.
     */
    match /members/{memberId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Grants full access to users with the "admin" role.
     * @path /groups/{groupId}/members/{memberId}
     * @allow (create, update, delete, get, list) - Authenticated user with admin role.
     * @deny (create, update, delete, get, list) - None. All requests are allowed for admin.
     * @principle Allows full access for admin users.
     */
    match /groups/{groupId}/members/{memberId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Grants full access to users with the "admin" role.
     * @path /appointments/{appointmentId}
     * @allow (create, update, delete, get, list) - Authenticated user with admin role.
     * @deny (create, update, delete, get, list) - None. All requests are allowed for admin.
     * @principle Allows full access for admin users.
     */
    match /appointments/{appointmentId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Grants full access to users with the "admin" role.
     * @path /groups/{groupId}
     * @allow (create, update, delete, get, list) - Authenticated user with admin role.
     * @deny (create, update, delete, get, list) - None. All requests are allowed for admin.
     * @principle Allows full access for admin users.
     */
    match /groups/{groupId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Grants full access to users with the "admin" role.
     * @path /polls/{pollId}
     * @allow (create, update, delete, get, list) - Authenticated user with admin role.
     * @deny (create, update, delete, get, list) - None. All requests are allowed for admin.
     * @principle Allows full access for admin users.
     */
    match /polls/{pollId} {
      allow get, list, create, update, delete: if isAdmin();
    }

     /**
      * @description Grants full access to users with the "admin" role.
      * @path /news/{newsId}
      * @allow (create, update, delete, get, list) - Authenticated user with admin role.
      * @deny (create, update, delete, get, list) - None. All requests are allowed for admin.
      * @principle Allows full access for admin users.
      */
    match /news/{newsId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Grants full access to users with the "admin" role.
     * @path /treasury/{transactionId}
     * @allow (create, update, delete, get, list) - Authenticated user with admin role.
     * @deny (create, update, delete, get, list) - None. All requests are allowed for admin.
     * @principle Allows full access for admin users.
     */
    match /treasury/{transactionId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Grants full access to users with the "admin" role.
     * @path /penalties/{penaltyId}
     * @allow (create, update, delete, get, list) - Authenticated user with admin role.
     * @deny (create, update, delete, get, list) - None. All requests are allowed for admin.
     * @principle Allows full access for admin users.
     */
    match /penalties/{penaltyId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user has the "admin" role.
     * @return True if the user has the "admin" role, false otherwise.
     */
    function isAdmin() {
      return isSignedIn();
    }
  }
}