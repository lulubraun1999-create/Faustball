rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    function isAdmin() {
      // Prüft, ob der Benutzer den Admin-Claim im Token hat
      return request.auth.token.admin == true;
    }
    function getMemberDoc(uid) {
      // Hilfsfunktion, um das Member-Dokument eines Benutzers zu holen
      return get(/databases/$(database)/documents/members/$(uid));
    }
    function getUserTeams() {
      // Holt die Teams des aktuell angemeldeten Benutzers
      let memberDoc = getMemberDoc(request.auth.uid);
      // Stelle sicher, dass das Dokument existiert und 'teams' ein Feld ist
      return memberDoc.data != null && 'teams' in memberDoc.data ? memberDoc.data.teams : [];
    }
    // Prüft, ob der Benutzer Mitglied des Teams ist, zu dem das Dokument gehört (für Regeln auf Team-Ebene)
    function isMemberOfDocTeam() {
      // Stelle sicher, dass das Dokument 'teamId' hat und getUserTeams() nicht null ist
      return isSignedIn() && resource.data.keys().hasAny(['teamId']) && resource.data.teamId in getUserTeams();
    }


    // --- /users/{userId} ---
    match /users/{userId} {
      function isOwner(userId) { return request.auth.uid == userId; }
      function isCreatingOwnDocument(userId) { return request.auth.uid == userId && request.resource.data.id == userId && (request.resource.data.role == 'user' || !('role' in request.resource.data)); }
      function isUpdatingOwnDocument(userId) { return isOwner(userId) && !('role' in request.resource.data); }
      function isAdminUpdatingDocument() { return isAdmin(); }
      function isOwnerDeleting(userId) { return isOwner(userId); }

      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isSignedIn() && isAdmin(); // Nur Admins
      allow create: if isSignedIn() && isCreatingOwnDocument(userId);
      allow update: if isSignedIn() && (isUpdatingOwnDocument(userId) || isAdminUpdatingDocument());
      allow delete: if isSignedIn() && (isOwnerDeleting(userId) || isAdmin());
    }

    // --- /members/{memberId} ---
    match /members/{memberId} {
        function isOwner(memberId) { return request.auth.uid == memberId; }
        function isExistingOwner() { return isSignedIn() && resource.data.userId == request.auth.uid; }
        function isCreatingOwnProfile(memberId) { return request.auth.uid == memberId && request.resource.data.userId == request.auth.uid; }

        allow get: if isSignedIn() && (isOwner(memberId) || isAdmin());
        allow list: if isSignedIn() && isAdmin(); // Nur Admins
        allow create: if isSignedIn() && isCreatingOwnProfile(memberId);
        allow update, delete: if isSignedIn() && (isExistingOwner() || isAdmin());
    }

    // --- /groups/{groupId} ---
    match /groups/{groupId} {
        allow get, list: if true;
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /groups/{groupId}/members/{memberId} ---
    match /groups/{groupId}/members/{memberId} {
        allow get, list: if true;
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /appointmentTypes/{typeId} ---
    match /appointmentTypes/{typeId} {
        allow read: if true;
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /locations/{locationId} ---
    match /locations/{locationId} {
        allow read: if true;
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /appointments/{appointmentId} ---
    match /appointments/{appointmentId} {
        function isMemberOfVisibleTeamForAppointment() {
          let memberDoc = getMemberDoc(request.auth.uid);
          return memberDoc.data != null &&
                 resource.data.keys().hasAny(['visibility']) && // Prüfe Existenz von visibility
                 resource.data.visibility.keys().hasAny(['teamIds']) &&
                 resource.data.visibility.teamIds.hasAny(memberDoc.data.teams);
        }

        allow read: if isSignedIn() && (
                      isAdmin() ||
                      resource.data.visibility.type == 'all' ||
                      isMemberOfVisibleTeamForAppointment()
                    );
        allow write: if isSignedIn() && isAdmin();
    }
    
    // *** KORRIGIERTE REGELN FÜR TERMIN-AUSNAHMEN ***
    /**
     * @description Regelt den Zugriff auf Termin-Ausnahmen.
     * @path /appointmentExceptions/{exceptionId}
     */
    match /appointmentExceptions/{exceptionId} {

        // --- Hilfsfunktionen für diese Regeln ---
        function getOriginalAppointmentFromResource() {
          return resource.data.keys().hasAny(['originalAppointmentId']) ?
                 get(/databases/$(database)/documents/appointments/$(resource.data.originalAppointmentId)) : null;
        }
        function getOriginalAppointmentFromRequest() {
           return request.resource.data.keys().hasAny(['originalAppointmentId']) ?
                  get(/databases/$(database)/documents/appointments/$(request.resource.data.originalAppointmentId)) : null;
        }
        function isMemberOfOriginalAppointmentTeamFromResource() {
           let originalAppointment = getOriginalAppointmentFromResource();
           if (originalAppointment == null || originalAppointment.data == null) { return false; }
           let originalAppointmentData = originalAppointment.data;
           let memberDoc = getMemberDoc(request.auth.uid);
           return memberDoc.data != null &&
                  'visibility' in originalAppointmentData &&
                  'type' in originalAppointmentData.visibility &&
                  originalAppointmentData.visibility.type == 'specificTeams' &&
                  'teamIds' in originalAppointmentData.visibility &&
                  originalAppointmentData.visibility.teamIds.hasAny(memberDoc.data.teams);
        }
        // --- Ende Hilfsfunktionen ---


        // GET (Einzelnes Dokument lesen): Admins ODER Benutzer, die den Original-Termin sehen dürften
        allow get: if isSignedIn() && (
                      isAdmin() ||
                      (getOriginalAppointmentFromResource() != null && // Prüfe Existenz
                       getOriginalAppointmentFromResource().data.visibility.type == 'all') ||
                      isMemberOfOriginalAppointmentTeamFromResource()
                    );
                    
        // LIST (Collection auflisten): NUR Admins dürfen die gesamte Collection auflisten
        allow list: if isSignedIn() && isAdmin(); 

        // SCHREIBEN (Erstellen, Ändern, Löschen): Nur Admins
        allow create: if isSignedIn() && isAdmin() && exists(/databases/$(database)/documents/appointments/$(request.resource.data.originalAppointmentId));
        allow update, delete: if isSignedIn() && isAdmin();
    }
    // *** ENDE KORRIGIERTER REGELN ***

    // --- /polls/{pollId} ---
    match /polls/{pollId} {
        function isMemberOfVisibleTeamForPoll() { /* ... wie zuvor ... */ }
        allow get, list: if isSignedIn() && (resource.data.visibility.type == 'all' || isMemberOfVisibleTeamForPoll());
        allow create, delete: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && ( isAdmin() || (isMemberOfVisibleTeamForPoll() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['votes'])) );
    }

    // --- /news/{newsId} ---
    match /news/{newsId} {
        allow read: if true;
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /treasury/{transactionId} ---
    match /treasury/{transactionId} {
        allow read: if isSignedIn() && (isAdmin() || isMemberOfDocTeam());
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /penalties/{penaltyId} ---
    match /penalties/{penaltyId} {
       allow read: if isSignedIn() && (isAdmin() || isMemberOfDocTeam());
       allow write: if isSignedIn() && isAdmin();
    }
  }
}