/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * User data and member profiles are primarily accessible only to the authenticated user or administrators.
 * Appointment and group data is publicly readable but writable only by administrators.
 *
 * Data Structure:
 * - /users/{userId}: Contains core user data, accessible only by the user themselves or admins.
 * - /members/{memberId}: Contains editable member profile data, accessible only by the user themselves or admins.
 * - /appointments/{appointmentId}: Contains appointment data, publicly readable, but writable only by admins.
 * - /groups/{groupId}: Contains group data, publicly readable, but writable only by admins.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied for security and privacy.
 * - Admin role is not implemented in this prototype.
 * - Read-only collections (appointments, groups) are exposed using `allow get, list: if true;`.
 *
 * Denormalization for Authorization:
 *  -  No denormalization is needed because the rules rely on the auth.uid or the existence of a document in the path.
 *
 * Structural Segregation:
 *  -  The app uses separate collections for user profiles (`members`) and core user data (`users`) to allow different access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user account data.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own user document.
     * @allow (get, update, delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can access their own user document after creation.
     * @deny (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd3' cannot create a user document with ID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @deny (get, update, delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd3' cannot access user document 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @principle Enforces user-ownership: Only the authenticated user can read/write their own data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      // User listing is denied for privacy reasons.
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to member profile data.
     * @path /databases/{database}/documents/members/{memberId}
     * @allow (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own member profile.
     * @allow (get, update, delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can access their own member profile after creation.
     * @deny (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd3' cannot create a member profile with ID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @deny (get, update, delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd3' cannot access member profile 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @principle Enforces user-ownership: Only the authenticated user can read/write their own profile.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memberId) {
        return request.auth.uid == get(/databases/$(database)/documents/members/$(memberId)).data.userId;
      }

       function isCreatingOwnProfile(){
          return request.auth.uid == request.resource.data.userId;
      }

      function isExistingOwner(memberId) {
        return isOwner(memberId) && exists(resource);
      }

      allow get: if isOwner(memberId);
      // User listing is denied for privacy reasons.
      allow list: if false;
      allow create: if isSignedIn() && isCreatingOwnProfile();
      allow update: if isExistingOwner(memberId);
      allow delete: if isExistingOwner(memberId);
    }

    /**
     * @description Controls access to appointment data.
     * @path /databases/{database}/documents/appointments/{appointmentId}
     * @allow (get, list) Any user can read appointment data.
     * @deny (create, update, delete) Only admins can create, update, or delete appointment data.
     * @principle Public read, restricted write: Appointments are publicly visible but admin-managed.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Controls access to group data.
     * @path /databases/{database}/documents/groups/{groupId}
     * @allow (get, list) Any user can read group data.
     * @deny (create, update, delete) Only admins can create, update, or delete group data.
     * @principle Public read, restricted write: Groups are publicly visible but admin-managed.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }
  }
}