/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with public read access to appointments.
 * User and Member data is secured with owner-only access.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data. Accessible only by the user and admins.
 * - /members/{memberId}: Stores profile data for team members. Accessible only by the user and admins.
 * - /appointments/{appointmentId}: Stores event, training, and game data. Publicly readable, writable only by admins.
 *
 * Key Security Decisions:
 * - Appointments are publicly readable.
 * - Users can only access their own user and member documents.
 * - Only admins can create/update/delete appointments.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user data, allowing only the user and admins to read/write.
     * @path /users/{userId}
     * @allow (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own document.
     * @allow (get, update, delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can access their own document.
     * @deny (create) User 'attackerId' cannot create a document with userId 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @deny (get, update, delete) User 'attackerId' cannot access user document 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures member data, allowing only the user and admins to read/write.
     * @path /members/{memberId}
     * @allow (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own member document.
     * @allow (get, update, delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can access their own member document.
     * @deny (create) User 'attackerId' cannot create a document with memberId 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @deny (get, update, delete) User 'attackerId' cannot access member document 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @principle Enforces document ownership for member profiles.
     */
    match /members/{memberId} {
      allow get: if isOwner(memberId);
      allow list: if false;
      allow create: if isOwner(memberId);
      allow update: if isExistingOwner(memberId);
      allow delete: if isExistingOwner(memberId);
    }

    /**
     * @description Allows public read access to appointments and restricts write access to admins only.
     * @path /appointments/{appointmentId}
     * @allow (get, list) Any user can read appointments.
     * @allow (create, update, delete) Only admins can modify appointments.
     * @deny (create, update, delete) Non-admin user 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' cannot modify appointments.
     * @principle Provides public read access with admin-only writes for appointments.
     */
    match /appointments/{appointmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}