/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for `/users/{userId}` and allows public read access to `/member_profiles/{memberProfileId}` while restricting write access.
 *
 * Data Structure:
 * - User data is stored under `/users/{userId}`, accessible only by the authenticated user.
 * - Member profiles are stored under `/member_profiles/{memberProfileId}`, publicly readable but restricted for writes.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Member profiles are publicly readable, but create, update, and delete operations are not permitted in this prototype.
 *
 * Denormalization for Authorization: N/A (Ownership is determined via path)
 * Structural Segregation: User data and member profiles are stored in separate top-level collections to simplify authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents. Only the authenticated user can read or write their own document.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own user document.
     * @allow (get, update, delete) User with UID 'user123' can read, update, and delete their own user document.
     * @deny (create) User with UID 'user456' cannot create a user document with ID 'user123'.
     * @deny (get, update, delete) User with UID 'user456' cannot read, update, or delete user document 'users/user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      // Read permissions
      allow get: if isOwner(userId);
      allow list: if false;

      // Write permissions
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to member profile documents. Allows public read access but restricts write access.
     * @path /member_profiles/{memberProfileId}
     * @allow (get, list) Any user can read any member profile.
     * @deny (create, update, delete) No user can create, update, or delete member profiles in this prototype.
     * @principle Allows public read access while restricting writes.
     */
    match /member_profiles/{memberProfileId} {
      // Read permissions
      allow get: if true;
      allow list: if true;

      // Write permissions
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}