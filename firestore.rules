rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user accounts, ensuring users can only access their own account data.
     * @path /users/{userId}
     * @allow (create) - User with matching `uid` can create their account.
     * @allow (get, update, delete) - User with matching `uid` can access and modify their account.
     * @deny (create, get, update, delete) - Any user attempting to access another user's account.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all users.

      // Self-creation: User can create their own document if the UID matches the document ID.
      allow create: if isSignedIn() && isOwner(userId);

      // Owner-only access for updates and deletes.
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user profiles, ensuring users can only access their own profile data.
     * @path /users/{userId}/profile/{profileId}
     * @allow (create) - User with matching `uid` can create their profile.
     * @allow (get, update, delete) - User with matching `uid` can access and modify their profile.
     * @deny (create, get, update, delete) - Any user attempting to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/profile/{profileId} {
        function isSignedIn() {
          return request.auth != null;
        }
        function isOwner(userId) {
          return request.auth.uid == userId;
        }
        function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
        }

        allow get: if isOwner(userId);
        allow list: if false;

        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages team information, restricting access to team members.
     * @path /teams/{teamId}
     * @allow (get, list) - All users can view team information.
     * @allow (create, update, delete) - Only team members can create, update, or delete team information.
     * @principle Enforces team-based access control using the `memberIds` array.
     */
    match /teams/{teamId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isTeamMember(teamId) {
        return isSignedIn() && request.auth.uid in resource.data.memberIds;
      }
      function isExistingTeamMember(teamId) {
        return isTeamMember(teamId) && resource.data != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.auth.uid in request.resource.data.memberIds;
      allow update: if isExistingTeamMember(teamId);
      allow delete: if isExistingTeamMember(teamId);
    }

    /**
     * @description Manages calendar events for teams, restricting access to team members.
     * @path /teams/{teamId}/calendar_events/{calendarEventId}
     * @allow (get, list) - Only team members can view calendar events.
     * @allow (create, update, delete) - Only team members can create, update, or delete calendar events.
     * @principle Enforces team-based access control using the `memberIds` array in the parent `Team` document.
     */
    match /teams/{teamId}/calendar_events/{calendarEventId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTeamMember(teamId) {
        return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds;
      }

      function isExistingTeamMember(teamId) {
        return isTeamMember(teamId) && resource.data != null;
      }

      allow get, list: if isTeamMember(teamId);
      allow create: if isTeamMember(teamId);
      allow update: if isExistingTeamMember(teamId);
      allow delete: if isExistingTeamMember(teamId);
    }

    /**
     * @description Manages news articles, allowing public read access but restricting write access to the author.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list) - All users can view news articles.
     * @allow (create) - Only authenticated users can create news articles, with `authorId` matching their `uid`.
     * @allow (update, delete) - Only the author of the article can update or delete it.
     * @principle Enforces public read access with owner-only write access.
     */
    match /news_articles/{newsArticleId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(authorId) {
        return isSignedIn() && request.auth.uid == authorId;
      }
      function isExistingOwner(authorId) {
        return isOwner(authorId) && resource.data != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(authorId);
      allow delete: if isExistingOwner(authorId);
    }
  }
}