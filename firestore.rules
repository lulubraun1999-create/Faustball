/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model.
 * Users can only read appointmentTypes. Only administrators can create, update, or delete appointments, groups, polls, news articles, treasury transactions and penalties.
 * Users can only read and write their own user and member data.
 *
 * Data Structure:
 * - /users/{userId}: User authentication data, accessible only by the user themselves or admins.
 * - /members/{memberId}: User profile data, accessible only by the user themselves or admins.
 * - /groups/{groupId}: Group information (classes/teams), writable by admins, readable by all.
 * - /appointments/{appointmentId}: Appointments, writable by admins, readable by all.
 * - /polls/{pollId}: Polls, writable by admins, readable by all.
 * - /news/{newsId}: News articles, writable by admins, readable by all.
 * - /treasury/{transactionId}: Financial transactions, writable only by admins.
 * - /penalties/{penaltyId}: Penalty rules, writable only by admins.
 * - /groups/{groupId}/members/{memberId}: Denormalized group members, writable by admins, readable by all.
 *
 * Key Security Decisions:
 * - Admin Role: The rules rely on an 'admin' role on the user document. No listing of user documents is allowed to prevent unauthorized data access.
 * - Public Read-Only Collections: The `appointments`, `groups`, `polls`, and `news` collections are readable by all users but writable only by admins.
 * - Group Members: The `groups/{groupId}/members/{memberId}` collection provides fast lookups of team rosters and is readable by all.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Manages access to user account data.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own user document.
     * @allow (get, update, delete) Signed-in user can access their own user document or admin can access.
     * @deny (list) Prevents listing all user documents.
     * @principle Enforces user-ownership for data privacy.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get, update, delete: if isExistingOwner(userId) || isAdmin();
      allow list: if false;
    }

    /**
     * @description Manages access to member profile data.
     * @path /members/{memberId}
     * @allow (create) Signed-in user can create their own member profile.
     * @allow (get, update, delete) Signed-in user can access their own member profile or admin can access.
     * @deny (list) Prevents listing all member profiles.
     * @principle Enforces user-ownership for data privacy.
     */
    match /members/{memberId} {
      allow create: if isSignedIn();
      allow get, update, delete: if isSignedIn() && get(/databases/$(database)/documents/members/$(memberId)).data.userId == request.auth.uid || isAdmin();
      allow list: if false;
    }

   /**
     * @description Manages the lightweight group member records.
     * @path /groups/{groupId}/members/{memberId}
     * @allow (get, list) All users can view group members.
     * @allow (create, update, delete) Only admins can modify group members.
     * @principle Enforces admin-only writes, public reads for team rosters.
     */
    match /groups/{groupId}/members/{memberId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages access to appointment data.
     * @path /appointments/{appointmentId}
     * @allow (get, list) All users can view appointments.
     * @allow (create, update, delete) Only admins can modify appointments.
     * @principle Enforces admin-only writes, public reads for the event calendar.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages access to group data.
     * @path /groups/{groupId}
     * @allow (get, list) All users can view group information.
     * @allow (create, update, delete) Only admins can modify group information.
     * @principle Enforces admin-only writes, public reads for group/team data.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages access to poll data.
     * @path /polls/{pollId}
     * @allow (get, list) All users can view polls.
     * @allow (create, update, delete) Only admins can modify polls.
     * @principle Enforces admin-only writes, public reads for polls.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages access to news article data.
     * @path /news/{newsId}
     * @allow (get, list) All users can view news articles.
     * @allow (create, update, delete) Only admins can modify news articles.
     * @principle Enforces admin-only writes, public reads for news content.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages access to treasury transaction data.
     * @path /treasury/{transactionId}
     * @allow (create, update, delete) Only admins can modify treasury transactions.
     * @deny (get, list) Treasury transactions are not accessible directly.
     * @principle Enforces admin-only writes, no public reads for financial data.
     */
    match /treasury/{transactionId} {
      allow create, update, delete: if isAdmin();
      allow get, list: if false;
    }

    /**
     * @description Manages access to penalty data.
     * @path /penalties/{penaltyId}
     * @allow (create, update, delete) Only admins can modify penalty data.
     * @deny (get, list) Penalties are not accessible directly.
     * @principle Enforces admin-only writes, no public reads for penalty rules.
     */
    match /penalties/{penaltyId} {
      allow create, update, delete: if isAdmin();
      allow get, list: if false;
    }

    /**
     * @description Allows all users to read appointment types.
     * @path /appointmentTypes
     * @allow (get, list) All users can read appointment types.
     * @deny (create, update, delete) No one can create, update, or delete appointment types.
     * @principle Enforces read-only access for appointment types.
     */
    match /appointmentTypes {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}