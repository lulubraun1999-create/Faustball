/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and admin-only
 * access for managing appointments and groups. It prioritizes security by
 * restricting access to sensitive data and preventing unauthorized modifications.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data, accessible only by the user themselves or admins.
 * - /members/{memberId}: Stores editable user profile details, accessible only by the user themselves or admins.
 * - /appointments/{appointmentId}: Stores appointment data, writable only by admins, readable by all users.
 * - /groups/{groupId}: Stores group data (classes and teams), writable only by admins, readable by all users.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent unauthorized data harvesting.
 * - Clear separation between user-owned data and admin-managed data.
 * - All write operations are protected by authentication and authorization checks.
 * - Data shapes are not enforced to allow for rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @allow (get) - User with UID 'user123' can read their profile at /users/user123.
     * @allow (update) - User with UID 'user123' can update their profile at /users/user123.
     * @allow (delete) - User with UID 'user123' can delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isExistingOwner(userId) && request.auth.uid == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to member profiles.
     * @path /members/{memberId}
     * @allow (create) - User with UID 'user123' can create their member profile.
     * @allow (get) - User with UID 'user123' can read their member profile.
     * @allow (update) - User with UID 'user123' can update their member profile.
     * @allow (delete) - User with UID 'user123' can delete their member profile.
     * @deny (create) - User with UID 'user456' cannot create a member profile for user123.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memberId) {
          return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/members/$(memberId)).data.userId;
      }

      function isExistingOwner(memberId) {
        return isOwner(memberId) && resource != null;
      }

      allow get: if isOwner(memberId);
      allow list: if false; // Listing members is not permitted.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(memberId);
      allow delete: if isExistingOwner(memberId);
    }

    /**
     * @description Controls access to appointments.
     * @path /appointments/{appointmentId}
     * @allow (get) - Any authenticated user can read appointments.
     * @allow (list) - Any authenticated user can list appointments.
     * @deny (create) - Non-admin user cannot create appointments.
     * @deny (update) - Non-admin user cannot update appointments.
     * @principle Allows public read access but restricts writes to admins.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return request.auth.token.admin == true;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to groups.
     * @path /groups/{groupId}
     * @allow (get) - Any authenticated user can read groups.
     * @allow (list) - Any authenticated user can list groups.
     * @deny (create) - Non-admin user cannot create groups.
     * @deny (update) - Non-admin user cannot update groups.
     * @principle Allows public read access but restricts writes to admins.
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return request.auth.token.admin == true;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}