/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based and ownership-based access control model.
 * Users can only read/write their own data, while admins have broader access.
 * Read access is generally more open than write access.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data, accessible only by the user or admins.
 * - /members/{memberId}: Stores editable user profiles, accessible only by the user or admins.
 * - /appointments/{appointmentId}: Stores appointment data, writable by admins, readable by all.
 * - /groups/{groupId}: Stores group data, writable by admins, readable by all.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied. This prevents enumeration of user accounts.
 * - Admin role is not yet implemented, but placeholder rules are in place for future expansion.
 * - Read-only collections (appointments, groups) are publicly readable.
 *
 * Denormalization for Authorization:
 *  N/A - No denormalization is used in this ruleset.  All rules are based on the request.auth.uid
 *  or the resource.data.userId field.  If performance becomes a concern, consider adding
 *  a role field to the user document to avoid having to query the auth token on every request.
 *
 * Structural Segregation:
 *  N/A - No structural segregation is used in this ruleset.  Drafts vs. published content
 *  is not a feature of this application.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - If the user is creating their own profile (userId matches auth.uid).
     * @allow (get, update, delete) - If the user is requesting their own profile (userId matches auth.uid).
     * @deny (create) - If the user is trying to create a profile for another user.
     * @deny (get, update, delete) - If the user is trying to access another user's profile.
     * @principle Enforces user-ownership for profile data and denies user listing.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      // Prevent user listing
      allow list: if false;

      // Only the user can read their own profile
      allow get: if isOwner(userId);

      // Only the user can create their own profile, and the userId must match the auth.uid
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Only the user can update their own profile, and the userId must not be changed
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Only the user can delete their own profile
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to member profiles.
     * @path /members/{memberId}
     * @allow (create, get, update, delete) - If the user is creating/accessing their own profile (userId matches auth.uid).
     * @deny (create, get, update, delete) - If the user is trying to access another user's profile.
     * @principle Enforces user-ownership for member data.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memberId) {
        return isSignedIn() && request.auth.uid == memberId;
      }

      function isExistingOwner(memberId) {
        return isOwner(memberId) && exists(resource);
      }

      allow get: if isOwner(memberId);
      allow list: if false; // Listing all members is not permitted.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(memberId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isExistingOwner(memberId);
    }

    /**
     * @description Controls access to appointments.
     * @path /appointments/{appointmentId}
     * @allow (get, list) - All users can read appointments.
     * @deny (create, update, delete) - Only admins can modify appointments.
     * @principle Allows public read access with restricted writes.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin role check
    }

    /**
     * @description Controls access to groups.
     * @path /groups/{groupId}
     * @allow (get, list) - All users can read groups.
     * @deny (create, update, delete) - Only admins can modify groups.
     * @principle Allows public read access with restricted writes.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin role check
    }
  }
}