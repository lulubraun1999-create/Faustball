/**
 * @fileoverview Firestore Security Rules for the FaustApp application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing open read access for public content (e.g., appointments, groups, news) with strict owner-only or admin-only write access.
 * User data (profiles) are protected using an ownership model.
 *
 * Data Structure:
 * - /users/{userId}: User authentication and profile data, accessible only by the user or admins.
 * - /members/{memberId}: Detailed, editable member profile data, accessible only by the user or admins.
 * - /appointments/{appointmentId}: Publicly readable appointments data, writable only by admins.
 * - /groups/{groupId}: Publicly readable groups (classes and teams) data, writable only by admins.
 * - /polls/{pollId}: Publicly readable polls data, writable only by admins.
 * - /news/{newsId}: Publicly readable news articles, writable only by admins.
 * - /treasury/{transactionId}: Treasury transaction data, writable only by admins.
 * - /penalties/{penaltyId}: Penalty rules, writable only by admins.
 *
 * Key Security Decisions:
 * - No user listing is allowed.
 * - Public read access is granted to appointments, groups, polls, and news.
 * - Admin role is not explicitly implemented in this version. All admin-only access is based on Firebase Auth.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user accounts. Only the user themselves or an admin can read or write their data.
     * @path /users/{userId}
     * @allow (create) User with ID 'test_user' can create their own account if request.auth.uid == 'test_user'.
     * @allow (get) User with ID 'test_user' can read their own account if request.auth.uid == 'test_user'.
     * @allow (update) User with ID 'test_user' can update their own account if request.auth.uid == 'test_user'.
     * @allow (delete) User with ID 'test_user' can delete their own account if request.auth.uid == 'test_user'.
     * @deny (create) User with ID 'test_user' cannot create an account with ID 'another_user'.
     * @deny (get) User with ID 'test_user' cannot read account with ID 'another_user'.
     * @deny (update) User with ID 'test_user' cannot update account with ID 'another_user'.
     * @deny (delete) User with ID 'test_user' cannot delete account with ID 'another_user'.
     * @principle Enforces user-ownership for accessing user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId); //Enforce immutability of userId
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure member profiles. Only the user themselves or an admin can read or write their profile.
     * @path /members/{memberId}
     * @allow (create) User with ID 'test_user' can create their own profile if request.auth.uid == 'test_user'.
     * @allow (get) User with ID 'test_user' can read their own profile if request.auth.uid == 'test_user'.
     * @allow (update) User with ID 'test_user' can update their own profile if request.auth.uid == 'test_user'.
     * @allow (delete) User with ID 'test_user' can delete their own profile if request.auth.uid == 'test_user'.
     * @deny (create) User with ID 'test_user' cannot create a profile with ID 'another_user'.
     * @deny (get) User with ID 'test_user' cannot read profile with ID 'another_user'.
     * @deny (update) User with ID 'test_user' cannot update profile with ID 'another_user'.
     * @deny (delete) User with ID 'test_user' cannot delete profile with ID 'another_user'.
     * @principle Enforces user-ownership for accessing member profiles.
     */
    match /members/{memberId} {
      function isOwnerByUserId(memberId) {
        return request.auth != null && request.auth.uid == memberId;
      }
      allow get: if isOwnerByUserId(memberId); // List operation was failing - setting this to 'true'
      allow list: if false; // Intentionally disabling listing for prototyping
      allow create: if isOwnerByUserId(memberId); // TODO: Add admin/owner validation once the schema is updated with an ownership field.
      allow update: if isOwnerByUserId(memberId); // TODO: Add admin/owner validation once the schema is updated with an ownership field.
      allow delete: if isOwnerByUserId(memberId); // TODO: Add admin/owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read access to all appointments, but restricts write access to admins only.
     * @path /appointments/{appointmentId}
     * @allow (get) Any user can read an appointment.
     * @allow (list) Any user can list appointments.
     * @deny (create) Non-admin user cannot create an appointment.
     * @deny (update) Non-admin user cannot update an appointment.
     * @deny (delete) Non-admin user cannot delete an appointment.
     * @principle Public read, admin-only write for appointments.
     */
    match /appointments/{appointmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Allows read access to all groups, but restricts write access to admins only.
     * @path /groups/{groupId}
     * @allow (get) Any user can read a group.
     * @allow (list) Any user can list groups.
     * @deny (create) Non-admin user cannot create a group.
     * @deny (update) Non-admin user cannot update a group.
     * @deny (delete) Non-admin user cannot delete a group.
     * @principle Public read, admin-only write for groups.
     */
    match /groups/{groupId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Allows read access to all polls, but restricts write access to admins only.
     * @path /polls/{pollId}
     * @allow (get) Any user can read a poll.
     * @allow (list) Any user can list polls.
     * @deny (create) Non-admin user cannot create a poll.
     * @deny (update) Non-admin user cannot update a poll.
     * @deny (delete) Non-admin user cannot delete a poll.
     * @principle Public read, admin-only write for polls.
     */
    match /polls/{pollId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Allows read access to all news articles, but restricts write access to admins only.
     * @path /news/{newsId}
     * @allow (get) Any user can read a news article.
     * @allow (list) Any user can list news articles.
     * @deny (create) Non-admin user cannot create a news article.
     * @deny (update) Non-admin user cannot update a news article.
     * @deny (delete) Non-admin user cannot delete a news article.
     * @principle Public read, admin-only write for news articles.
     */
    match /news/{newsId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Restricts write access to treasury transactions to admins only.
     * @path /treasury/{transactionId}
     * @deny (get) Non-admin user cannot get a treasury transaction.
     * @deny (list) Non-admin user cannot list treasury transactions.
     * @deny (create) Non-admin user cannot create a treasury transaction.
     * @deny (update) Non-admin user cannot update a treasury transaction.
     * @deny (delete) Non-admin user cannot delete a treasury transaction.
     * @principle Admin-only write for treasury transactions.
     */
    match /treasury/{transactionId} {
      allow get: if false; // TODO: Add admin role check
      allow list: if false; // TODO: Add admin role check
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Restricts write access to penalty rules to admins only.
     * @path /penalties/{penaltyId}
     * @deny (get) Non-admin user cannot get a penalty rule.
     * @deny (list) Non-admin user cannot list penalty rules.
     * @deny (create) Non-admin user cannot create a penalty rule.
     * @deny (update) Non-admin user cannot update a penalty rule.
     * @deny (delete) Non-admin user cannot delete a penalty rule.
     * @principle Admin-only write for penalty rules.
     */
    match /penalties/{penaltyId} {
      allow get: if false; // TODO: Add admin role check
      allow list: if false; // TODO: Add admin role check
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }
  }
}