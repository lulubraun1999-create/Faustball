/**
 * @fileOverview Security rules for the FaustApp Firestore database.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and separate ownership for member profiles. It ensures that only the
 * authenticated user can read and modify their own profile data, while
 * member profiles are independently managed.
 *
 * Data Structure:
 * - /users/{userId}: Stores user authentication and registration data, accessible only by the user themselves.
 * - /members/{memberId}: Stores member profile data, accessible only by the member themselves.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized access to user data.
 * - Member listing is disallowed to prevent unauthorized access to member data.
 * - All write operations are protected by authorization checks to ensure data integrity and prevent unauthorized modifications.
 *
 * Denormalization for Authorization:
 * The security rules are designed to avoid costly `get()` calls by denormalizing
 * authorization data directly onto the documents being secured. For example,
 * the `/users/{userId}` path inherently links the document to the user's ID,
 * eliminating the need to fetch additional user information for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data. Only the authenticated user can read, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching userId can create their profile.
     * @allow (get) - Authenticated user can read their own profile.
     * @allow (update) - Authenticated user can update their own profile.
     * @allow (delete) - Authenticated user can delete their own profile.
     * @deny (create) - Authenticated user cannot create a profile with a mismatched userId.
     * @deny (get) - Authenticated user cannot read another user's profile.
     * @deny (update) - Authenticated user cannot update another user's profile.
     * @deny (delete) - Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for reads and writes. Validates relational integrity between the path and the document's userId.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to member profile data. Only the authenticated member can read, update, or delete their own profile.
     * @path /members/{memberId}
     * @allow (create) - Authenticated user with matching memberId can create their profile.
     * @allow (get) - Authenticated user can read their own profile.
     * @allow (update) - Authenticated user can update their own profile.
     * @allow (delete) - Authenticated user can delete their own profile.
     * @deny (create) - Authenticated user cannot create a profile with a mismatched memberId.
     * @deny (get) - Authenticated user cannot read another member's profile.
     * @deny (update) - Authenticated user cannot update another member's profile.
     * @deny (delete) - Authenticated user cannot delete another member's profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /members/{memberId} {
      function isOwner(memberId) {
        return request.auth.uid == get(/databases/$(database)/documents/members/$(memberId)).data.userId;
      }

      function isExistingOwner(memberId) {
          return isOwner(memberId) && resource != null;
      }

      allow get: if isOwner(memberId);
      allow list: if false;
      allow create: if request.auth.uid != null; // Allow creation if signed in
      allow update: if isExistingOwner(memberId);
      allow delete: if isExistingOwner(memberId);
    }
  }
}