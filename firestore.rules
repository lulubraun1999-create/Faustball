/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and admin-controlled access.
 * User-specific data (profiles) can only be accessed by the authenticated user or admins.
 * App data (appointments, groups, news, polls) is generally readable by all authenticated users but only writable by admins.
 *
 * Data Structure:
 * - /users/{userId}:  User authentication data.
 * - /members/{memberId}: Detailed user profile data.
 * - /groups/{groupId}/members/{memberId}: Denormalized group member lists.
 * - /appointments/{appointmentId}: Calendar events.
 * - /groups/{groupId}: Classes and teams.
 * - /polls/{pollId}: Polls for team members.
 * - /news/{newsId}: News articles and announcements.
 * - /treasury/{transactionId}: Financial transactions for teams.
 * - /penalties/{penaltyId}: Penalty rules for teams.
 *
 * Key Security Decisions:
 * - Public Listing Disallowed:  No collections allow public listing (`allow list: if true;`) of documents containing private user data. This is to prevent accidental data leaks.
 * - Admin-Only Writes:  Most collections are writable only by admins, ensuring data integrity for core application data.
 * - Explicit Denials: All `match` blocks include explicit `allow create, update, delete: if false;` rules to prevent accidental open writes.
 * - No Schema Validation: This ruleset focuses on authorization and does not perform detailed schema validation for prototyping flexibility.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user authentication data.
     * @path /users/{userId}
     * @allow (create) - If the user ID in the path matches the authenticated user's ID.
     * @allow (get, update, delete) - If the user ID in the path matches the authenticated user's ID or the user is an admin.
     * @deny (create) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (get, update, delete) - If the user ID in the path does not match the authenticated user's ID and the user is not an admin.
     * @principle Enforces document ownership and admin override.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get, update, delete: if isOwner(userId);
      allow create: if isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Controls access to editable user profile data.
     * @path /members/{memberId}
     * @allow (create) - If the user ID matches the authenticated user's ID.
     * @allow (get, update, delete) - If the user ID matches the authenticated user's ID or the user is an admin.
     * @deny (create) - If the user ID does not match the authenticated user's ID.
     * @deny (get, update, delete) - If the user ID does not match the authenticated user's ID and the user is not an admin.
     * @principle Enforces document ownership and admin override.
     */
    match /members/{memberId} {
      function isOwner(memberId) {
        return request.auth != null && request.auth.uid == memberId;
      }
      allow get, update, delete: if isOwner(memberId);
      allow create: if request.auth.uid == memberId;
      allow list: if false;
    }

     /**
      * @description Controls access to denormalized group member lists.
      * @path /groups/{groupId}/members/{memberId}
      * @allow (get, list) - If the user is authenticated.
      * @deny (create, update, delete) - Always. Only admins can modify group membership.
      * @principle: Only admins can manage group members via backend functions.
      */
    match /groups/{groupId}/members/{memberId} {
        allow get, list: if isSignedIn();
        allow create, update, delete: if false;
    }

    /**
     * @description Controls access to appointments (calendar events).
     * @path /appointments/{appointmentId}
     * @allow (get, list) - If the user is authenticated.
     * @deny (create, update, delete) - Always. Only admins can modify appointments.
     * @principle: Appointments are generally visible, but only managed by admins.
     */
    match /appointments/{appointmentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to groups (classes and teams).
     * @path /groups/{groupId}
     * @allow (get, list) - If the user is authenticated.
     * @deny (create, update, delete) - Always. Only admins can modify groups.
     * @principle: Groups are generally visible, but only managed by admins.
     */
    match /groups/{groupId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to polls.
     * @path /polls/{pollId}
     * @allow (get, list) - If the user is authenticated.
     * @deny (create, update, delete) - Always. Only admins can modify polls.
     */
    match /polls/{pollId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to news articles.
     * @path /news/{newsId}
     * @allow (get, list) - If the user is authenticated.
     * @deny (create, update, delete) - Always. Only admins can modify news.
     */
    match /news/{newsId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to treasury transactions.
     * @path /treasury/{transactionId}
     * @deny (get, list, create, update, delete) - Always. Only admins can manage treasury data via backend functions.
     */
    match /treasury/{transactionId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to penalty rules.
     * @path /penalties/{penaltyId}
     * @deny (get, list, create, update, delete) - Always. Only admins can manage penalty rules via backend functions.
     */
    match /penalties/{penaltyId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }


    function isSignedIn() {
        return request.auth != null;
    }
  }
}