/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and admin-controlled access.
 * Users can only read/write their own data in /users/{userId} and /members/{memberId}.
 * Most other data (appointments, groups, news, polls, treasury, penalties) is readable by all authenticated users but only writable by admins.
 *
 * Data Structure:
 * - /users/{userId}: User authentication and profile data.
 * - /members/{memberId}: Editable user profile data.
 * - /groups/{groupId}/members/{memberId}: Denormalized list of group members.
 * - /appointments/{appointmentId}: Calendar events.
 * - /groups/{groupId}: Classes and Teams.
 * - /polls/{pollId}: Polls for team members.
 * - /news/{newsId}: News articles.
 * - /treasury/{transactionId}: Financial transactions.
 * - /penalties/{penaltyId}: Penalty catalog.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All collections are explicitly secured with granular permissions.
 * - All write operations are restricted either to the owner or to admins.
 * - To simplify rules and improve performance, authorization data is denormalized onto documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own profile.
     * @allow (get, update, delete) User can only access their own profile.
     * @deny (create) User cannot create a profile for another user.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to detailed member profile data.
     * @path /members/{memberId}
     * @allow (create) User can create their own member profile if the userId matches their auth.uid.
     * @allow (get, update, delete) User can only access their own member profile.
     * @deny (create) User cannot create a member profile for another user.
     * @deny (get, update, delete) User cannot access another user's member profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memberId) {
        return request.auth.uid == get(/databases/$(database)/documents/members/$(memberId)).data.userId;
      }

      function isExistingOwner(memberId) {
        return isOwner(memberId) && exists(resource);
      }

      allow get: if isOwner(memberId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(memberId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isExistingOwner(memberId);
    }

       /**
        * @description Controls access to the denormalized list of group members.
        * @path /groups/{groupId}/members/{memberId}
        */
       match /groups/{groupId}/members/{memberId} {
        function isSignedIn() {
            return request.auth != null;
        }

        // TODO: Implement group membership check for access
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }

    /**
     * @description Controls access to appointments.
     * @path /appointments/{appointmentId}
     * @allow (get, list) All authenticated users can read appointments.
     * @deny (create, update, delete) Only admins can modify appointments.
     * @principle Public read with admin-only writes.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return false;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to groups (classes and teams).
     * @path /groups/{groupId}
     * @allow (get, list) All authenticated users can read groups.
     * @deny (create, update, delete) Only admins can modify groups.
     * @principle Public read with admin-only writes.
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return false;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to polls.
     * @path /polls/{pollId}
     * @allow (get, list) All authenticated users can read polls.
     * @deny (create, update, delete) Only admins can modify polls.
     * @principle Public read with admin-only writes.
     */
    match /polls/{pollId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return false;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to news articles.
     * @path /news/{newsId}
     * @allow (get, list) All authenticated users can read news articles.
     * @deny (create, update, delete) Only admins can modify news articles.
     * @principle Public read with admin-only writes.
     */
    match /news/{newsId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return false;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to treasury transactions.
     * @path /treasury/{transactionId}
     * @deny (get, list, create, update, delete) Only admins can access treasury transactions.
     * @principle Admin-only access.
     */
    match /treasury/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return false;
      }
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to penalty catalog rules.
     * @path /penalties/{penaltyId}
     * @deny (get, list, create, update, delete) Only admins can access penalty catalog rules.
     * @principle Admin-only access.
     */
    match /penalties/{penaltyId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return false;
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}