rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *   - Request: { "auth": { "uid": "user123" }, "resource": { "data": { "id": "user123", "email": "test@example.com", "firstName": "Test", "lastName": "User" } } }
     * @allow (get, update, delete) User with ID 'user123' can read/update/delete their own profile.
     *   - Request: { "auth": { "uid": "user123" } }
     * @allow (get, update, delete) Admin user can read/update/delete any user profile.
     *   - Request: { "auth": { "uid": "admin123", "token": { "role": "admin" } } }
     * @deny (create) User with ID 'user123' cannot create a profile for another user.
     *   - Request: { "auth": { "uid": "user123" }, "resource": { "data": { "id": "user456", "email": "test@example.com", "firstName": "Test", "lastName": "User" } } }
     * @deny (list) Prevents listing all users.
     *   - Request: (list operation)
     * @principle Enforces document ownership and admin overrides for user management.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isSelfCreation(userId) && isValidUserCreateRequest(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin()) && isUserUpdateValid(userId);
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * @description Controls access to member profile data.
     * @path /members/{memberId}
     * @allow (create) Authenticated user can create a member profile.
     *   - Request: { "auth": { "uid": "user123" }, "resource": { "data": { "userId": "user123", "phone": "123-456-7890", "location": "Some Location" } } }
     * @allow (get, update, delete) User with ID 'user123' can read/update/delete their own member profile.
     *   - Request: { "auth": { "uid": "user123" } }
     * @allow (get, update, delete) Admin user can read/update/delete any member profile.
     *   - Request: { "auth": { "uid": "admin123", "token": { "role": "admin" } } }
     * @deny (create) User with ID 'user123' cannot create a member profile for another user.
     *   - Request: { "auth": { "uid": "user123" }, "resource": { "data": { "userId": "user456", "phone": "123-456-7890", "location": "Some Location" } } }
     *  @deny (list) Prevents listing all member.
     *   - Request: (list operation)
     * @principle Enforces document ownership and admin overrides for member management.
     */
    match /members/{memberId} {
      allow get: if isSignedIn() && (isMemberOwner(get(/databases/$(database)/documents/members/$(memberId)).data.userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isMemberOwner(request.resource.data.userId);
      allow update: if isSignedIn() && (isMemberOwner(get(/databases/$(database)/documents/members/$(memberId)).data.userId) || isAdmin()) && isMemberUpdateValid();
      allow delete: if isSignedIn() && (isMemberOwner(get(/databases/$(database)/documents/members/$(memberId)).data.userId) || isAdmin());
    }

    /**
     * @description Controls access to appointment data.
     * @path /appointments/{appointmentId}
     * @allow (get, list) All users can read appointments.
     *   - Request: { "auth": { "uid": "user123" } }
     * @allow (create, update, delete) Only admin users can create, update, or delete appointments.
     *   - Request: { "auth": { "uid": "admin123", "token": { "role": "admin" } } }
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete appointments.
     *   - Request: { "auth": { "uid": "user123" } }
     * @principle Public read access with admin-only writes for appointment management.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to group data.
     * @path /groups/{groupId}
     * @allow (get, list) All users can read groups.
     *   - Request: { "auth": { "uid": "user123" } }
     * @allow (create, update, delete) Only admin users can create, update, or delete groups.
     *   - Request: { "auth": { "uid": "admin123", "token": { "role": "admin" } } }
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete groups.
     *   - Request: { "auth": { "uid": "user123" } }
     * @principle Public read access with admin-only writes for group management.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return request.auth.token.role == 'admin';
  }

    function isMemberOwner(userId) {
    return request.auth.uid == userId;
  }

  function isSelfCreation(userId) {
      return request.auth.uid == userId;
  }

    //For create operation, validating that the request.resource.data.id  and the userId match
    function isValidUserCreateRequest(userId) {
        return request.resource.data.id == userId;
    }

    //For Update operation, validating that the resource.data.id is immutable
    function isUserUpdateValid(userId) {
        return request.resource.data.id == get(/databases/$(database)/documents/users/$(userId)).data.id;
    }

    //For Member update operation, validating that the userId is immutable
    function isMemberUpdateValid() {
        return request.resource.data.userId == get(/databases/$(database)/documents/members/$(memberId)).data.userId;
    }

}