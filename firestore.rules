rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    function isAdmin() {
      // Prüft, ob der Benutzer den Admin-Claim im Token hat
      return request.auth.token.admin == true;
    }
    function getMemberDoc(uid) {
      // Hilfsfunktion, um das Member-Dokument eines Benutzers zu holen
      return get(/databases/$(database)/documents/members/$(uid));
    }
    function getUserTeams() {
      // Holt die Teams des aktuell angemeldeten Benutzers
      let memberDoc = getMemberDoc(request.auth.uid);
      // Stelle sicher, dass das Dokument existiert und 'teams' ein Feld ist
      return memberDoc.data != null && 'teams' in memberDoc.data ? memberDoc.data.teams : [];
    }
    // Prüft, ob der Benutzer Mitglied des Teams ist, zu dem das Dokument gehört (für Regeln auf Team-Ebene)
    function isMemberOfDocTeam() {
      return isSignedIn() && resource.data.keys().hasAny(['teamId']) && resource.data.teamId in getUserTeams();
    }


    // --- /users/{userId} ---
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isCreatingOwnDocument(userId) {
        // Erlaube Erstellung, wenn UID übereinstimmt und Rolle 'user' ist oder nicht existiert
        return request.auth.uid == userId &&
               request.resource.data.id == userId &&
               (request.resource.data.role == 'user' || !('role' in request.resource.data));
      }
       function isUpdatingOwnDocument(userId) {
         // Erlaube Update, wenn Besitzer, aber nicht der Rollen-Änderung
         return isOwner(userId) && !('role' in request.resource.data);
       }
       function isAdminUpdatingDocument() {
         // Erlaube Admins, alles zu ändern (inkl. Rolle)
         return isAdmin();
       }
       function isOwnerDeleting(userId) {
          return isOwner(userId);
       }

      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isSignedIn() && isAdmin(); // Nur Admins dürfen alle User auflisten
      allow create: if isSignedIn() && isCreatingOwnDocument(userId);
      allow update: if isSignedIn() && (isUpdatingOwnDocument(userId) || isAdminUpdatingDocument());
      allow delete: if isSignedIn() && (isOwnerDeleting(userId) || isAdmin());
    }

    // --- /members/{memberId} ---
    match /members/{memberId} {
        function isOwner(memberId) {
            return request.auth.uid == memberId;
        }
         function isExistingOwner() {
           // Prüft, ob die Auth-UID mit der 'userId' im ZU AKTUALISIERENDEN Dokument übereinstimmt
           return isSignedIn() && resource.data.userId == request.auth.uid;
         }
        function isCreatingOwnProfile(memberId) {
            // Stellt sicher, dass die Dokumenten-ID (memberId) mit der Auth-UID
            // UND der userId im Dokument übereinstimmt
            return request.auth.uid == memberId && request.resource.data.userId == request.auth.uid;
        }

        allow get: if isSignedIn() && (isOwner(memberId) || isAdmin());
        allow list: if isSignedIn() && isAdmin(); // Nur Admins dürfen alle Mitglieder auflisten
        allow create: if isSignedIn() && isCreatingOwnProfile(memberId);
        allow update, delete: if isSignedIn() && (isExistingOwner() || isAdmin());
    }

    // --- /groups/{groupId} ---
    match /groups/{groupId} {
        allow get, list: if true; // Jeder darf Gruppen/Teams lesen
        allow write: if isSignedIn() && isAdmin(); // Nur Admins dürfen erstellen, ändern, löschen
    }

    // --- /groups/{groupId}/members/{memberId} ---
    match /groups/{groupId}/members/{memberId} {
        allow get, list: if true; // Jeder darf Teamlisten lesen
        allow write: if isSignedIn() && isAdmin(); // Nur Admins dürfen Teamlisten bearbeiten
    }

    // --- /appointmentTypes/{typeId} ---
    match /appointmentTypes/{typeId} {
        allow read: if true; // Jeder darf Termin-Arten lesen (wichtig für Dropdown)
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /locations/{locationId} ---
    match /locations/{locationId} {
        allow read: if true; // Jeder darf Orte lesen (wichtig für Dropdown)
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /appointments/{appointmentId} ---
    match /appointments/{appointmentId} {
        // Prüft, ob der Benutzer in einem der Teams ist, für die der Termin sichtbar ist
        function isMemberOfVisibleTeamForAppointment() {
          let memberDoc = getMemberDoc(request.auth.uid);
          return memberDoc.data != null &&
                 resource.data.visibility.keys().hasAny(['teamIds']) &&
                 resource.data.visibility.teamIds.hasAny(memberDoc.data.teams);
        }

        // Lesen: Admins, oder wenn für alle sichtbar, oder wenn man im Team ist
        allow read: if isSignedIn() && (isAdmin() || resource.data.visibility.type == 'all' || isMemberOfVisibleTeamForAppointment());
        
        // Schreiben: Nur Admins
        allow write: if isSignedIn() && isAdmin();
    }
    
    // *** NEU: REGELN FÜR TERMIN-ANTWORTEN ***
    /**
     * @description Regelt den Zugriff auf Termin-Antworten (RSVPs).
     * @path /appointmentResponses/{responseId}
     */
    match /appointmentResponses/{responseId} {
        // Prüft, ob der User der Ersteller der (neuen) Antwort ist
        function isResponseOwner() {
          return request.auth.uid == request.resource.data.userId;
        }
        // Prüft, ob der User der Besitzer einer (existierenden) Antwort ist
        function isExistingResponseOwner() {
          return request.auth.uid == resource.data.userId;
        }

        // LESEN (einzeln): Admin ODER der Besitzer der Antwort
        allow get: if isSignedIn() && (isAdmin() || isExistingResponseOwner());
        
        // AUFLISTEN (Query): 
        // 1. Admins dürfen alles auflisten.
        // 2. Benutzer dürfen Antworten auflisten, wenn sie nach 'userId' ODER 'appointmentId' filtern
        //    (Wir erlauben beides, damit die App flexibel bleibt)
        allow list: if isSignedIn() && (
                      isAdmin() || 
                      (request.query.keys().hasAny(['where']) && (
                        (request.query.where.field == 'userId' && request.query.where.value == request.auth.uid) ||
                        (request.query.where.field == 'appointmentId') // Erlaube Abfragen nach Termin, Lesezugriff auf Termin wird auf App-Ebene geprüft
                      ))
                    );
        
        // ERSTELLEN: Nur der angemeldete Benutzer für sich selbst
        allow create: if isSignedIn() && isResponseOwner();
        
        // ÄNDERN/LÖSCHEN: Nur der Besitzer der Antwort
        allow update, delete: if isSignedIn() && isExistingResponseOwner();
    }
    // *** ENDE NEUER REGELN ***

    // --- /polls/{pollId} ---
    match /polls/{pollId} {
        function isMemberOfVisibleTeamForPoll() {
          let memberDoc = getMemberDoc(request.auth.uid);
          return memberDoc.data != null &&
                 'visibility' in resource.data && 'teamIds' in resource.data.visibility &&
                 resource.data.visibility.teamIds.hasAny(memberDoc.data.teams);
        }

        allow get, list: if isSignedIn() && (resource.data.visibility.type == 'all' || isMemberOfVisibleTeamForPoll());
        allow create, delete: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && (
                      isAdmin() ||
                      (isMemberOfVisibleTeamForPoll() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['votes']))
                    );
    }

    // --- /news/{newsId} ---
    match /news/{newsId} {
        allow read: if true;
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /treasury/{transactionId} ---
    match /treasury/{transactionId} {
        // Lesen: Admin ODER ein Mitglied des Teams, zu dem die Transaktion gehört
        allow read: if isSignedIn() && (isAdmin() || isMemberOfDocTeam());
        // Schreiben: Nur Admins
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /penalties/{penaltyId} ---
    match /penalties/{penaltyId} {
       // Lesen: Admin ODER ein Mitglied des Teams
       allow read: if isSignedIn() && (isAdmin() || isMemberOfDocTeam());
       // Schreiben: Nur Admins
       allow write: if isSignedIn() && isAdmin();
    }
  }
}