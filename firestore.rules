/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * User data and member profiles are primarily accessible only to the owning user and admins.
 * Appointments and Groups are publicly readable but only writable by admins.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data, secured with owner-only access.
 * - /members/{memberId}: Stores user profile information, secured with owner-only access.
 * - /appointments/{appointmentId}: Stores event data, publicly readable but only writable by admins.
 * - /groups/{groupId}: Stores class and team data, publicly readable but only writable by admins.
 *
 * Key Security Decisions:
 * - User listing is denied to prevent unauthorized enumeration of user accounts.
 * - Admin roles are not explicitly defined in this ruleset. To enable admin functionality, add admin role checks to the write rules.
 * - Data schema is not strictly enforced. The rules focus on authorization and relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user accounts.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own document.
     * @allow (get) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can read their own document.
     * @allow (update) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can update their own document.
     * @allow (delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can delete their own document.
     * @deny (list) Listing all users is not allowed.
     * @deny (create) User cannot create a document with an ID that does not match its UID
     * @principle Enforces user-ownership: Only the authenticated user can read or write their own data.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return request.auth.uid == resource.data.userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == userId;

      allow update: if isSignedIn() && isExistingOwner(userId);

      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to member profiles.
     * @path /databases/{database}/documents/members/{memberId}
     * @allow (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own member profile if the profile has their user id.
     * @allow (get) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can read their own member profile.
     * @allow (update) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can update their own member profile.
     * @allow (delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can delete their own member profile.
     * @deny (list) Listing all member profiles is not allowed.
     * @deny (create) User cannot create a document with an userId that does not match their UID
     * @principle Enforces user-ownership: Only the authenticated user can read or write their own profile data.
     */
    match /members/{memberId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       // Helper function to check if the user is the owner of the existing document
      function isExistingOwner() {
        return request.auth.uid == resource.data.userId;
      }


      allow get: if isSignedIn() && isExistingOwner();
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      allow update: if isSignedIn() && isExistingOwner();

      allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Controls access to appointments.
     * @path /databases/{database}/documents/appointments/{appointmentId}
     * @allow (get) All users can read appointments.
     * @allow (list) All users can list appointments.
     * @deny (create) Only admins can create appointments (TODO: Add admin role check).
     * @deny (update) Only admins can update appointments (TODO: Add admin role check).
     * @deny (delete) Only admins can delete appointments (TODO: Add admin role check).
     * @principle Public read, admin-only write: All users can view appointments, but only admins can modify them.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;

      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

     /**
      * @description Controls access to groups.
      * @path /databases/{database}/documents/groups/{groupId}
      * @allow (get) All users can read groups.
      * @allow (list) All users can list groups.
      * @deny (create) Only admins can create groups (TODO: Add admin role check).
      * @deny (update) Only admins can update groups (TODO: Add admin role check).
      * @deny (delete) Only admins can delete groups (TODO: Add admin role check).
      * @principle Public read, admin-only write: All users can view groups, but only admins can modify them.
      */
    match /groups/{groupId} {
      allow get, list: if true;

      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }
  }
}