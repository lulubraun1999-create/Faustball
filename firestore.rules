/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * Users can only read and write their own data, while admins have broader access.
 * Read access is generally open for public data, while write access is restricted.
 *
 * Data Structure:
 * - /users/{userId}: User authentication and profile data (read-only after creation, except for admin-controlled fields).
 * - /members/{memberId}: Editable user profile data (owned by the user).
 * - /appointments/{appointmentId}: Public event and training data (admin-writable).
 * - /groups/{groupId}: Class and team information (admin-writable).
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - Public read access is granted to the /appointments and /groups collections.
 * - Admin role is not currently enforced, but the structure is in place for future implementation.
 *
 * Denormalization for Authorization:
 *  - The member document does not contain the userId, but can be accessed by it via the memberId using `isOwner(memberId)`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user accounts. Only the user themselves or an admin can read/write.
     * @path /users/{userId}
     * @allow (create) - If the user's auth UID matches the requested userId.
     * @allow (get) - If the requesting user is the owner of the account or is an admin.
     * @allow (update) - If the requesting user is the owner of the account or is an admin.
     * @allow (delete) - If the requesting user is the owner of the account or is an admin.
     * @deny (list) - User listing is not permitted for privacy reasons.
     * @principle Enforces user-ownership and prevents unauthorized access to user accounts.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects user member profiles. Only the user themselves or an admin can read/write.
     * @path /members/{memberId}
     * @allow (create) - If the user's auth UID matches the requested userId.
     * @allow (get) - If the requesting user is the owner of the account or is an admin.
     * @allow (update) - If the requesting user is the owner of the account or is an admin.
     * @allow (delete) - If the requesting user is the owner of the account or is an admin.
     * @deny (list) - User listing is not permitted for privacy reasons.
     * @principle Enforces user-ownership and prevents unauthorized access to user accounts.
     */
    match /members/{memberId} {
      function isOwner(memberId) {
        return request.auth.uid == get(/databases/$(database)/documents/members/$(memberId)).data.userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get: if isSignedIn() && isOwner(memberId);
      allow list: if false;
      allow update: if isSignedIn() && isOwner(memberId);
      allow delete: if isSignedIn() && isOwner(memberId);
    }

    /**
     * @description Allows public read access to appointments, but restricts write access to admins only.
     * @path /appointments/{appointmentId}
     * @allow (get) - Anyone can read appointment data.
     * @allow (list) - Anyone can list appointment data.
     * @deny (create) - Only admins can create appointments.
     * @deny (update) - Only admins can update appointments.
     * @deny (delete) - Only admins can delete appointments.
     * @principle Allows public consumption of appointment data, while maintaining admin control over modifications.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to groups, but restricts write access to admins only.
     * @path /groups/{groupId}
     * @allow (get) - Anyone can read group data.
     * @allow (list) - Anyone can list group data.
     * @deny (create) - Only admins can create groups.
     * @deny (update) - Only admins can update groups.
     * @deny (delete) - Only admins can delete groups.
     * @principle Allows public consumption of group data, while maintaining admin control over modifications.
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}