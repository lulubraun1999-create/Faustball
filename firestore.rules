/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model.
 * Users can only read and write to their own user and member documents.
 * Admins have full read and write access to all data.
 * All write operations are strictly controlled and require authentication.
 *
 * Data Structure:
 * - /users/{userId}: Stores user authentication data, accessible only by the user and admins.
 * - /members/{memberId}: Stores user profile data, accessible only by the user and admins.
 * - /groups/{groupId}/members/{memberId}: Stores denormalized group member data.
 * - /appointments/{appointmentId}: Stores appointment data, publicly readable, writable only by admins.
 * - /groups/{groupId}: Stores group data, publicly readable, writable only by admins.
 * - /polls/{pollId}: Stores poll data, publicly readable, writable only by admins.
 * - /news/{newsId}: Stores news article data, publicly readable, writable only by admins.
 * - /treasury/{transactionId}: Stores treasury transaction data, writable only by admins.
 * - /penalties/{penaltyId}: Stores penalty catalog rules, writable only by admins.
 *
 * Key Security Decisions:
 * - Users can only create their own user document on registration and can't overwrite other user documents.
 * - Member profile updates are restricted to the owning user or admins.
 * - Listing of users and members is disallowed to protect privacy.
 * - Public read access is granted to appointments, groups, polls, and news articles.
 * - Strict admin-only access is enforced for treasury and penalty data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user authentication data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their document.
     * @allow (get, update, delete) User with matching UID can get, update, and delete their document.
     * @deny (create, get, update, delete) Any other user or unauthenticated request.
     * @principle Enforces document ownership for user data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own document with a matching user ID.
      allow create: if isSignedIn() && isOwner(userId);

      // Allow the user to read, update, and delete their own document.
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);

      // Protect against listing all users.
      allow list: if false;
    }

    /**
     * @description Secures editable user profile data.
     * @path /members/{memberId}
     * @allow (create) User with matching UID can create their member document.
     * @allow (get, update, delete) User with matching UID can get, update, and delete their member document.
     * @deny (create, get, update, delete) Any other user or unauthenticated request.
     * @principle Enforces document ownership for member profile data.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memberId) {
        return request.auth.uid == get(/databases/$(database)/documents/members/$(memberId)).data.userId;
      }

        function isExistingOwner(memberId) {
        return isOwner(memberId) && resource != null;
      }

      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow get: if isSignedIn() && isOwner(memberId);
      allow update: if isSignedIn() && isExistingOwner(memberId);
      allow delete: if isSignedIn() && isExistingOwner(memberId);

      // Protect against listing all members.
      allow list: if false;
    }

     /**
      * @description Secures denormalized group member data.
      * @path /groups/{groupId}/members/{memberId}
      * @allow (get, list) Any authenticated user can read group member data.
      * @deny (create, update, delete) Only admins can create, update, or delete group members.
      * @principle Allows public read access to group member data, restricts write access to admins.
      */
     match /groups/{groupId}/members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Secures appointment data.
     * @path /appointments/{appointmentId}
     * @allow (get, list) Any user can read appointment data.
     * @deny (create, update, delete) Only admins can create, update, or delete appointments.
     * @principle Allows public read access, restricts write access to admins.
     */
    match /appointments/{appointmentId} {
        function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures group data (classes and teams).
     * @path /groups/{groupId}
     * @allow (get, list) Any user can read group data.
     * @deny (create, update, delete) Only admins can create, update, or delete groups.
     * @principle Allows public read access, restricts write access to admins.
     */
    match /groups/{groupId} {
        function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures poll data.
     * @path /polls/{pollId}
     * @allow (get, list) Any user can read poll data.
     * @deny (create, update, delete) Only admins can create, update, or delete polls.
     * @principle Allows public read access, restricts write access to admins.
     */
    match /polls/{pollId} {
        function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures news article data.
     * @path /news/{newsId}
     * @allow (get, list) Any user can read news article data.
     * @deny (create, update, delete) Only admins can create, update, or delete news articles.
     * @principle Allows public read access, restricts write access to admins.
     */
    match /news/{newsId} {
        function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures treasury transaction data.
     * @path /treasury/{transactionId}
     * @deny (get, list, create, update, delete) Only admins can access treasury transactions.
     * @principle Restricts access to admins only.
     */
    match /treasury/{transactionId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Secures penalty catalog rules.
     * @path /penalties/{penaltyId}
     * @deny (get, list, create, update, delete) Only admins can access penalty catalog rules.
     * @principle Restricts access to admins only.
     */
    match /penalties/{penaltyId} {
      allow get, list, create, update, delete: if false;
    }
    
     /**
     * @description Secures appointment types.
     * @path /appointmentTypes
     * @deny (get, list, create, update, delete) Denies all access to the appointmentTypes collection.
     */
    match /appointmentTypes {
        allow get, list, create, update, delete: if false;
    }
  }
}