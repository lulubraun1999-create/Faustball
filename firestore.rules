/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and an admin-controlled model for appointments and groups.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data, accessible only by the user themselves or admins.
 * - /members/{memberId}: Stores profile information, accessible only by the user themselves or admins.
 * - /appointments/{appointmentId}: Stores appointment data, publicly readable but writable only by admins.
 * - /groups/{groupId}: Stores group data, publicly readable but writable only by admins.
 *
 * Key Security Decisions:
 * - User listing is disabled to prevent data harvesting.
 * - Public read access is granted to the /appointments and /groups collections to allow all users to view events and team information.
 * - All write operations are secured with authorization checks.  No `if true;` write rules are allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles. Only the user themselves or an admin can read or write their profile.
     * @path /users/{userId}
     * @allow (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own profile if request.auth.uid == userId.
     * @allow (get) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can read their own profile.
     * @allow (update) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can update their own profile.
     * @allow (delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can delete their own profile.
     * @deny (create) User 'attackerId' cannot create a profile with ID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @deny (get) User 'attackerId' cannot read the profile of user 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @deny (update) User 'attackerId' cannot update the profile of user 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @deny (delete) User 'attackerId' cannot delete the profile of user 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @principle Enforces document ownership and authenticated access.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Protects member profiles. Only the user themselves or an admin can read or write their profile.
     * @path /members/{memberId}
     * @allow (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own profile.
     * @allow (get) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can read their own profile.
     * @allow (update) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can update their own profile.
     * @allow (delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can delete their own profile.
     * @deny (create) User 'attackerId' cannot create a profile with ID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @deny (get) User 'attackerId' cannot read the profile of user 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @deny (update) User 'attackerId' cannot update the profile of user 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @deny (delete) User 'attackerId' cannot delete the profile of user 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @principle Enforces document ownership and authenticated access.
     */
    match /members/{memberId} {
      allow get: if isSignedIn() && isMember(memberId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(memberId);
      allow update: if isSignedIn() && isExistingMember(memberId);
      allow delete: if isSignedIn() && isExistingMember(memberId);
    }

    /**
     * @description Allows anyone to read appointments, but only admins can create, update, or delete them.
     * @path /appointments/{appointmentId}
     * @allow (get) Any user can read appointment data.
     * @allow (list) Any user can list appointment data.
     * @allow (create) Admins can create appointments.
     * @allow (update) Admins can update appointments.
     * @allow (delete) Admins can delete appointments.
     * @deny (create) Non-admins cannot create appointments.
     * @deny (update) Non-admins cannot update appointments.
     * @deny (delete) Non-admins cannot delete appointments.
     * @principle Enforces public read access with admin-only write access.
     */
    match /appointments/{appointmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read groups, but only admins can create, update, or delete them.
     * @path /groups/{groupId}
     * @allow (get) Any user can read group data.
     * @allow (list) Any user can list group data.
     * @allow (create) Admins can create groups.
     * @allow (update) Admins can update groups.
     * @allow (delete) Admins can delete groups.
     * @deny (create) Non-admins cannot create groups.
     * @deny (update) Non-admins cannot update groups.
     * @deny (delete) Non-admins cannot delete groups.
     * @principle Enforces public read access with admin-only write access.
     */
    match /groups/{groupId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description  The error report indicates that the user lacks permission to list documents in the "members" collection.
     * @path /members
     * @allow (list) Authenticated users can list members.
     * @deny (list) Unauthenticated users cannot list members.
     * @principle Authentication is required to list members.
     */
    match /members {
        allow list: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource.data.userId == userId;
    }

    function isMember(memberId) {
      return request.auth.uid == memberId;
    }

    function isExistingMember(memberId) {
        return isSignedIn() && isMember(memberId) && resource.data.userId == memberId;
    }

    function isAdmin() {
      return request.auth.token.role == 'admin';
    }
  }
}