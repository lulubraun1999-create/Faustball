/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model.
 * Admins have full read/write access to all collections.
 * Regular users can only read public data and manage their own user and member documents.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data, accessible only by the user and admins.
 * - /members/{memberId}: Stores user profile data, accessible only by the user and admins.
 * - /appointments/{appointmentId}: Stores appointment data, publicly readable but writable only by admins.
 * - /groups/{groupId}: Stores group data, publicly readable but writable only by admins.
 *
 * Key Security Decisions:
 * - Listing of users is disallowed to prevent data enumeration.
 * - Data validation is relaxed in this prototype phase, focusing on authorization.
 * - All write operations are restricted based on user roles and ownership.
 *
 * Denormalization for Authorization:
 *  - The rules rely on the `request.auth.uid` to determine the current user.
 *  - No denormalization needed as roles will not be used.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) If the user is creating their own document (userId matches auth.uid).
     * @allow (get, update, delete) If the user is the owner of the document or an admin.
     * @deny (list) Listing users is not allowed.
     * @deny (create) If the user ID does not match the authenticated user's ID.
     * @deny (update, delete) If the user is not the owner and not an admin.
     * @principle Enforces user-ownership for writes and prevents user enumeration.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to member profile documents.
     * @path /members/{memberId}
     * @allow (create) If the user is creating their own member document (userId matches auth.uid).
     * @allow (get, update, delete) If the user is the owner of the document or an admin.
     * @deny (list) Listing members is not allowed.
     * @deny (create) If the user ID does not match the authenticated user's ID.
     * @deny (update, delete) If the user is not the owner and not an admin.
     * @principle Enforces user-ownership for writes and prevents user enumeration.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memberId) {
        return request.auth.uid == resource.data.userId;
      }

      function isExistingOwner(memberId) {
        return isOwner(memberId) && exists(/databases/$(database)/documents/members/$(memberId));
      }

      allow get: if isExistingOwner(memberId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(memberId);
      allow delete: if isExistingOwner(memberId);
    }

    /**
     * @description Controls access to appointment documents.
     * @path /appointments/{appointmentId}
     * @allow (get, list) Public read access.
     * @deny (create, update, delete) Only admins can write appointments.
     * @principle Allows public read access but restricts write access to administrators.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to group documents.
     * @path /groups/{groupId}
     * @allow (get, list) Public read access.
     * @deny (create, update, delete) Only admins can write groups.
     * @principle Allows public read access but restricts write access to administrators.
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}