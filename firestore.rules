/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy: This ruleset implements a role-based access control system with owner-only access for user profiles and admin-only access for appointments and groups.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data, accessible only by the user themselves or admins.
 * - /members/{memberId}: Stores editable profile data, accessible by the owning user or admins.
 * - /appointments/{appointmentId}: Stores appointment information, writable by admins and readable by all.
 * - /groups/{groupId}: Stores group information, writable by admins and readable by all.
 *
 * Key Security Decisions:
 * - User listing is disabled to prevent data leakage.
 * - Admin role is not currently implemented but is reserved for future expansion.
 * - Data shape validation is relaxed to enable rapid prototyping, focusing on authorization.
 * - Denormalization of data for authorization is recommended but not yet implemented.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile document at /users/user123 if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can read their profile document at /users/user123.
     * @allow (update) - User with UID 'user123' can update their profile document at /users/user123.
     * @allow (delete) - User with UID 'user123' can delete their profile document at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile document at /users/user123 (mismatched UID).
     * @deny (get) - User with UID 'user456' cannot read the profile document at /users/user123 unless admin role enabled.
     * @deny (update) - User with UID 'user456' cannot update the profile document at /users/user123.
     * @deny (delete) - User with UID 'user456' cannot delete the profile document at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is disabled

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages access to member profile data.
     * @path /members/{memberId}
     * @allow (create) - User with UID 'user123' can create a member profile if request.resource.data.userId == 'user123'.
     * @allow (get) - User with UID 'user123' can read a member profile if resource.data.userId == 'user123'.
     * @allow (update) - User with UID 'user123' can update a member profile if resource.data.userId == 'user123'.
     * @allow (delete) - User with UID 'user123' can delete a member profile if resource.data.userId == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a member profile with userId 'user123'.
     * @deny (get) - User with UID 'user456' cannot read a member profile with userId 'user123'.
     * @deny (update) - User with UID 'user456' cannot update a member profile with userId 'user123'.
     * @deny (delete) - User with UID 'user456' cannot delete a member profile with userId 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /members/{memberId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isMemberOwner() {
          return get(resource).data.userId == request.auth.uid;
        }

        function isCreatingMemberOwner() {
            return request.resource.data.userId == request.auth.uid;
        }

        function isExistingMemberOwner() {
          return isSignedIn() && isMemberOwner();
        }

        allow get: if isSignedIn() && isExistingMemberOwner();
        allow list: if false; // User listing is disabled. The error was reported for this line.

        allow create: if isSignedIn() && isCreatingMemberOwner();
        allow update: if isExistingMemberOwner();
        allow delete: if isExistingMemberOwner();
    }

    /**
     * @description Manages access to appointment data.
     * @path /appointments/{appointmentId}
     * @allow (get) - Any user can read appointment data.
     * @allow (list) - Any user can list appointment data.
     * @deny (create) - Only admins can create appointment data.
     * @deny (update) - Only admins can update appointment data.
     * @deny (delete) - Only admins can delete appointment data.
     * @principle Allows public read access, restricts writes to admins (not yet implemented).
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin role check
    }

    /**
     * @description Manages access to group data.
     * @path /groups/{groupId}
     * @allow (get) - Any user can read group data.
     * @allow (list) - Any user can list group data.
     * @deny (create) - Only admins can create group data.
     * @deny (update) - Only admins can update group data.
     * @deny (delete) - Only admins can delete group data.
     * @principle Allows public read access, restricts writes to admins (not yet implemented).
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin role check
    }
  }
}