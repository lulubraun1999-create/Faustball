/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model.
 *  - Users can only read their own documents in `/users/{userId}`.
 *  - Users can only read/write their own documents in `/members/{memberId}`.
 *  - `/appointments` and `/groups` are publicly readable but only writable by admins.
 *  - Listing of `/users` collection is disallowed for security reasons.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores core user data (email, name, role). The `userId` MUST match the Firebase Auth UID.
 * - `/members/{memberId}`: Stores extended user profile data linked to the `userId`.
 * - `/appointments/{appointmentId}`: Stores appointment data (events, training, games).
 * - `/groups/{groupId}`: Stores group data (classes and teams).
 *
 * Key Security Decisions:
 * - User listing is explicitly denied. This prevents attackers from enumerating all user accounts.
 * - Data validation is relaxed in this prototype phase to allow for rapid schema iteration. Only critical fields are validated.
 * - Read-only collections are used for public data to avoid complex permission checks.
 *
 * Denormalization for Authorization:
 *  - The current data model does not require denormalization. The rules directly use the `request.auth.uid` and document IDs to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user documents based on ownership.
     * @path /users/{userId}
     * @allow (get) User with UID Gj5PDcSRA6WhxNScqpc3R7ZvGmd2 can read /users/Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @allow (create) User with UID Gj5PDcSRA6WhxNScqpc3R7ZvGmd2 can create /users/Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @allow (update) User with UID Gj5PDcSRA6WhxNScqpc3R7ZvGmd2 can update /users/Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @allow (delete) User with UID Gj5PDcSRA6WhxNScqpc3R7ZvGmd2 can delete /users/Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @deny (get) User with UID Gj5PDcSRA6WhxNScqpc3R7ZvGmd2 cannot read /users/anotherUserId.
     * @deny (create) User with UID Gj5PDcSRA6WhxNScqpc3R7ZvGmd2 cannot create /users/anotherUserId.
     * @deny (update) User with UID Gj5PDcSRA6WhxNScqpc3R7ZvGmd2 cannot update /users/anotherUserId.
     * @deny (delete) User with UID Gj5PDcSRA6WhxNScqpc3R7ZvGmd2 cannot delete /users/anotherUserId.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent user enumeration
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to member documents based on ownership.
     * @path /members/{memberId}
     * @allow (get) User with UID Gj5PDcSRA6WhxNScqpc3R7ZvGmd2 can read /members/{memberId} if resource.data.userId == Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @allow (create) User with UID Gj5PDcSRA6WhxNScqpc3R7ZvGmd2 can create /members/{memberId} if request.resource.data.userId == Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @allow (update) User with UID Gj5PDcSRA6WhxNScqpc3R7ZvGmd2 can update /members/{memberId} if resource.data.userId == Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @allow (delete) User with UID Gj5PDcSRA6WhxNScqpc3R7ZvGmd2 can delete /members/{memberId} if resource.data.userId == Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @deny (get) User with UID Gj5PDcSRA6WhxNScqpc3R7ZvGmd2 cannot read /members/{memberId} if resource.data.userId != Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @deny (create) User with UID Gj5PDcSRA6WhxNScqpc3R7ZvGmd2 cannot create /members/{memberId} if request.resource.data.userId != Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @deny (update) User with UID Gj5PDcSRA6WhxNScqpc3R7ZvGmd2 cannot update /members/{memberId} if resource.data.userId != Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @deny (delete) User with UID Gj5PDcSRA6WhxNScqpc3R7ZvGmd2 cannot delete /members/{memberId} if resource.data.userId != Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @principle Enforces document ownership for reads and writes, based on the userId field.
     */
    match /members/{memberId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if false; // Listing members is not allowed
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Grants public read access to appointments and restricts write access to admins.
     * @path /appointments/{appointmentId}
     * @allow (get, list) Any user can read appointments.
     * @allow (create, update, delete) Only admins can create, update, or delete appointments.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete appointments.
     * @principle Allows public read access while restricting writes to authorized users (admins).
     */
    match /appointments/{appointmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants public read access to groups and restricts write access to admins.
     * @path /groups/{groupId}
     * @allow (get, list) Any user can read groups.
     * @allow (create, update, delete) Only admins can create, update, or delete groups.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete groups.
     * @principle Allows public read access while restricting writes to authorized users (admins).
     */
    match /groups/{groupId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isAdmin() {
    return isSignedIn() && request.auth.token.role == 'admin';
  }
}