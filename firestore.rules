/**
 * @fileoverview Firestore Security Rules for the FaustApp application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, blending user-based access control with role-based access.
 * Users have full control over their own profile data. Certain collections (appointments, groups, news)
 * are publicly readable but only writable by administrative users. Treasury and Penalty data
 * is locked down to admin users only.
 *
 * Data Structure:
 * - /users/{userId}: Stores core, mostly read-only user data.
 * - /members/{memberId}: Stores editable profile data for team members.
 * - /appointments/{appointmentId}: Stores appointment and events data.
 * - /groups/{groupId}: Stores group information, including class and team details.
 * - /polls/{pollId}: Stores information about polls and surveys.
 * - /news/{newsId}: Stores news articles and announcements.
 * - /treasury/{transactionId}: Stores financial transactions.
 * - /penalties/{penaltyId}: Stores team penalty rules.
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy reasons.
 * - Public read access is granted to certain collections (appointments, groups, news) to allow for broad data visibility.
 * - The default security posture for ambiguous cases is "deny all".
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the core user data. Users can only read/write their own data, and admins have full access.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own record with matching ID.
     * @allow (get, update, delete) - Authenticated user with a matching ID.
     * @deny (create) - Authenticated user attempts to create a record with a mismatched ID.
     * @deny (list) - Listing all users is prohibited.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures editable member profile data. Accessible by admins or the owning user.
     * @path /members/{memberId}
     * @allow (create) - Authenticated user creates their own record with matching ID.
     * @allow (get, update, delete) - Authenticated user with a matching ID.
     * @deny (create) - Authenticated user attempts to create a record with a mismatched ID.
     * @deny (list) - Listing all members is prohibited.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the request is authenticated and the memberId matches the authenticated user's ID
      function isOwner(memberId) {
        return request.auth.uid == memberId;
      }
      
      function isExistingOwner(memberId) {
        return isOwner(memberId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(memberId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(request.auth.uid); // Ensure the created memberId matches the user's uid
      allow update: if isSignedIn() && isExistingOwner(memberId);
      allow delete: if isSignedIn() && isExistingOwner(memberId);
    }

    /**
     * @description Stores all appointments. Writable only by admins, readable by all users.
     * @path /appointments/{appointmentId}
     * @allow (get, list) - All users can read appointments.
     * @deny (create, update, delete) - Only admins should create, update, or delete appointments.
     * @principle Public read access with admin-only writes.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Stores all groups (classes and teams). Writable only by admins, readable by all users.
     * @path /groups/{groupId}
     * @allow (get, list) - All users can read groups.
     * @deny (create, update, delete) - Only admins should create, update, or delete groups.
     * @principle Public read access with admin-only writes.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Stores all polls. Writable only by admins, readable by designated users.
     * @path /polls/{pollId}
     * @allow (get, list) - All users can read polls.
     * @deny (create, update, delete) - Only admins should create, update, or delete polls.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Stores all news articles. Writable only by admins, readable by all users.
     * @path /news/{newsId}
     * @allow (get, list) - All users can read news articles.
     * @deny (create, update, delete) - Only admins should create, update, or delete news articles.
     * @principle Public read access with admin-only writes.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Stores all financial transactions for all teams. Writable only by admins.
     * @path /treasury/{transactionId}
     * @deny (get, list, create, update, delete) - Only admins can access treasury transactions.
     */
    match /treasury/{transactionId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Stores the penalty catalog rules for all teams. Writable only by admins.
     * @path /penalties/{penaltyId}
     * @deny (get, list, create, update, delete) - Only admins can access penalty rules.
     */
    match /penalties/{penaltyId} {
      allow get, list, create, update, delete: if isAdmin();
    }
    
    function isAdmin() {
        return request.auth.token.email == 'admin@example.com'; // Replace with your admin check
    }
  }
}