/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model.
 * Users can only read their own profile data and admins have
 * full access to all data.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only by the user themselves or admins.
 * - /members/{memberId}: Member profile data. Accessible only by the user themselves or admins.
 * - /groups/{groupId}: Group information. Publicly readable, writable only by admins.
 * - /groups/{groupId}/members/{memberId}: Group member information. Publicly readable, writable only by admins.
 * - /appointments/{appointmentId}: Appointment information. Publicly readable, writable only by admins.
 * - /polls/{pollId}: Poll information. Publicly readable, writable only by admins.
 * - /news/{newsId}: News articles. Publicly readable, writable only by admins.
 * - /treasury/{transactionId}: Team treasury transactions. Writable only by admins.
 * - /penalties/{penaltyId}: Penalty rules for teams. Writable only by admins.
 *
 * Key Security Decisions:
 * - Listing of users is disallowed to prevent data scraping.
 * - Public read access is granted for groups, appointments, polls, and news articles.
 * - All write operations require authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can access their own profile if the userId matches their auth UID.
     * @deny (create) - If the user is trying to create a profile with a userId that doesn't match their auth UID.
     * @deny (get, update, delete) - If the user is trying to access a profile with a userId that doesn't match their auth UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to member profile data.
     * @path /members/{memberId}
     * @allow (create) - Authenticated user can create their own member profile.
     * @allow (get, update, delete) - Authenticated user can access their own member profile.
     * @deny (create) - If the user is trying to create a member profile with a userId that doesn't match their auth UID.
     * @deny (get, update, delete) - If the user is trying to access a member profile with a userId that doesn't match their auth UID.
     * @principle Enforces document ownership for writes.
     */
    match /members/{memberId} {
       function isOwner(memberId) {
        return request.auth.uid == memberId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(memberId);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(memberId);
      allow delete: if isSignedIn() && isOwner(memberId);
    }
        /**
     * @description Controls access to group member data within a specific group.
     * @path /groups/{groupId}/members/{memberId}
     * @allow (get, list) - All users can read group member data.
     * @deny (create, update, delete) - Only admins can write group member data.
     * @principle Restricts write access to admins.
     */
    match /groups/{groupId}/members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to appointment data.
     * @path /appointments/{appointmentId}
     * @allow (get, list) - All users can read appointment data.
     * @deny (create, update, delete) - Only admins can write appointment data.
     * @principle Public read, admin-only write.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to group data.
     * @path /groups/{groupId}
     * @allow (get, list) - All users can read group data.
     * @deny (create, update, delete) - Only admins can write group data.
     * @principle Public read, admin-only write.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to poll data.
     * @path /polls/{pollId}
     * @allow (get, list) - All users can read poll data.
     * @deny (create, update, delete) - Only admins can write poll data.
     * @principle Public read, admin-only write.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to news article data.
     * @path /news/{newsId}
     * @allow (get, list) - All users can read news article data.
     * @deny (create, update, delete) - Only admins can write news article data.
     * @principle Public read, admin-only write.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to treasury transaction data.
     * @path /treasury/{transactionId}
     * @deny (get, list, create, update, delete) - Only admins can write treasury transaction data.
     */
    match /treasury/{transactionId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Controls access to penalty data.
     * @path /penalties/{penaltyId}
     * @deny (get, list, create, update, delete) - Only admins can write penalty data.
     */
    match /penalties/{penaltyId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Controls access to appointment exceptions
     * @path /appointmentExceptions
     * @deny (list) - No access for non-admins.
     */
    match /appointmentExceptions {
      allow get, create, update, delete: if false;
      allow list: if false;
    }
  }
}