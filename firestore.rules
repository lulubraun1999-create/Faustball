rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     *   request.auth.uid == 'user123' and request.resource.data.id == 'user123'
     * @allow (get) User with UID 'user123' can get their profile.
     *   request.auth.uid == 'user123'
     * @allow (update) User with UID 'user123' can update their profile.
     *   request.auth.uid == 'user123'
     * @allow (delete) User with UID 'user123' can delete their profile.
     *   request.auth.uid == 'user123'
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     *   request.auth.uid == 'user456' and request.resource.data.id == 'user123'
     * @principle Enforces document ownership for writes and validates user-specific data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return exists(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if request.auth.uid == userId && request.resource.data.id == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Controls access to team information.
     * @path /teams/{teamId}
     * @allow (get) Any authenticated user can read team information.
     *   request.auth.uid != null
     * @allow (create) User with UID 'user123' who is in `memberIds` can create a team.
     *   request.auth.uid == 'user123' and 'user123' in request.resource.data.memberIds
     * @allow (update) User with UID 'user123' who is in `memberIds` can update team information.
     *   request.auth.uid == 'user123' and 'user123' in resource.data.memberIds
     * @allow (delete) User with UID 'user123' who is in `memberIds` can delete a team.
     *   request.auth.uid == 'user123' and 'user123' in resource.data.memberIds
     * @deny (create) User with UID 'user456' who is not in `memberIds` cannot create a team.
     *   request.auth.uid == 'user456' and 'user456' not in request.resource.data.memberIds
     * @principle Enforces shared access based on team membership.
     */
    match /teams/{teamId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTeamMember(teamId) {
        return isSignedIn() && resource.data.memberIds.hasAny([request.auth.uid]);
      }

      function isCreatingTeamMember() {
        return isSignedIn() && request.resource.data.memberIds is list && request.resource.data.memberIds.hasAny([request.auth.uid]);
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if request.auth.uid != null && request.resource.data.memberIds is list && request.resource.data.memberIds.hasAny([request.auth.uid]);
      allow update: if isTeamMember(teamId);
      allow delete: if isTeamMember(teamId);
    }

    /**
     * @description Controls access to calendar events for teams.
     * @path /teams/{teamId}/calendar_events/{calendarEventId}
     * @allow (get) Any authenticated user can read calendar event information if they are a member of the parent team.
     *   request.auth.uid != null
     * @allow (create) User with UID 'user123' who is a member of the parent team can create a calendar event.
     *   request.auth.uid == 'user123'
     * @allow (update) User with UID 'user123' who is a member of the parent team can update a calendar event.
     *   request.auth.uid == 'user123'
     * @allow (delete) User with UID 'user123' who is a member of the parent team can delete a calendar event.
     *   request.auth.uid == 'user123'
     * @deny (create) User with UID 'user456' who is not a member of the parent team cannot create a calendar event.
     *   request.auth.uid == 'user456'
     * @principle Enforces shared access based on team membership for subcollection data.
     */
    match /teams/{teamId}/calendar_events/{calendarEventId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTeamMember(teamId) {
        return isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds is list && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
      }

      allow get: if isTeamMember(teamId);
      allow list: if isTeamMember(teamId);
      allow create: if isTeamMember(teamId);
      allow update: if isTeamMember(teamId);
      allow delete: if isTeamMember(teamId);
    }

    /**
     * @description Controls access to news articles.
     * @path /news_articles/{newsArticleId}
     * @allow (get) Any user can read news articles.
     *   true
     * @allow (create) User with UID 'user123' can create a news article.
     *   request.auth.uid == 'user123' and request.resource.data.authorId == 'user123'
     * @allow (update) User with UID 'user123' can update their news article.
     *   request.auth.uid == 'user123' and resource.data.authorId == 'user123'
     * @allow (delete) User with UID 'user123' can delete their news article.
     *   request.auth.uid == 'user123' and resource.data.authorId == 'user123'
     * @deny (create) User with UID 'user456' cannot create a news article for 'user123'.
     *   request.auth.uid == 'user456' and request.resource.data.authorId == 'user123'
     * @principle Enforces public read access with owner-only writes.
     */
    match /news_articles/{newsArticleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return isSignedIn() && request.auth.uid == authorId;
      }

      function isExistingOwner(authorId) {
          return isSignedIn() && request.auth.uid == resource.data.authorId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }
  }
}