/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * User documents and member profiles are primarily accessible only to the owning user and admins.
 * Appointments and Groups are publicly readable but only writable by admins.
 *
 * Data Structure:
 * - /users/{userId}: Stores core, mostly read-only user account information.
 * - /members/{memberId}: Stores detailed, editable profile information for team members.
 * - /appointments/{appointmentId}: Stores event, training, and game appointments.
 * - /groups/{groupId}: Stores information about classes and teams.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent unauthorized information harvesting.
 * - Admin role is not currently implemented, defaulting to owner-only access where applicable.
 * - Data schema is not strictly enforced in this prototyping phase, except for ownership and relational integrity fields.
 *
 * Denormalization for Authorization:
 * The ruleset assumes that ownership is explicitly stored within the documents themselves (e.g., a 'userId' field in the 'members' collection) to avoid costly `get()` calls.
 *
 * Structural Segregation:
 * The application uses distinct collections for different types of data (user accounts, member profiles, appointments, groups) to allow for granular access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user account data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own document if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can get their own document.
     * @allow (update) User with UID 'user123' can update their own document.
     * @allow (delete) User with UID 'user123' can delete their own document.
     * @deny (create) User with UID 'user456' cannot create a document with ID 'user123'.
     * @deny (list) All users cannot list the /users collection.
     * @principle Enforces user-ownership for data access and modification.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isCreatingOwner(userId) {
        return isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource.data.id == userId;
      }

      // Prevent listing of users for privacy reasons.
      allow list: if false;
      allow get: if isOwner(userId);
      allow create: if isCreatingOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages member profile data.
     * @path /members/{memberId}
     * @allow (create) User can create their own member profile if request.auth.uid == request.resource.data.userId.
     * @allow (get) User can get a member profile if request.auth.uid == resource.data.userId.
     * @allow (update) User can update their own member profile if request.auth.uid == resource.data.userId.
     * @allow (delete) User can delete their own member profile if request.auth.uid == resource.data.userId.
     * @deny (create) User cannot create a member profile for another user.
     * @deny (get) User cannot get a member profile for another user.
     * @principle Enforces user-ownership for member profile data access and modification.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }

      function isCreatingOwner() {
        return isSignedIn() && request.resource.data.userId == request.auth.uid;
      }

      allow get: if isExistingOwner();
      allow list: if false;
      allow create: if isCreatingOwner();
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Manages appointment data, allowing public read access and admin-only write access.
     * @path /appointments/{appointmentId}
     * @allow (get) Any user can read appointment data.
     * @allow (list) Any user can list appointments.
     * @deny (create) Non-admin user cannot create appointments.
     * @deny (update) Non-admin user cannot update appointments.
     * @deny (delete) Non-admin user cannot delete appointments.
     * @principle Allows public read access while restricting write access to admins.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // TODO: Implement admin role check. For now, denying all writes.
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Manages group data, allowing public read access and admin-only write access.
     * @path /groups/{groupId}
     * @allow (get) Any user can read group data.
     * @allow (list) Any user can list groups.
     * @deny (create) Non-admin user cannot create groups.
     * @deny (update) Non-admin user cannot update groups.
     * @deny (delete) Non-admin user cannot delete groups.
     * @principle Allows public read access while restricting write access to admins.
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // TODO: Implement admin role check. For now, denying all writes.
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add admin role validation
    }
  }
}