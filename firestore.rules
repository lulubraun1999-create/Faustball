/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * Users can only read and write their own data, while admins have broader access.
 * Read access is generally more permissive than write access.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data (profile data).
 * - /members/{memberId}: Stores detailed profile information.
 * - /appointments/{appointmentId}: Stores event, training, and game appointments.
 * - /groups/{groupId}: Stores class and team data.
 *
 * Key Security Decisions:
 * - Users cannot be listed.
 * - Admins are not explicitly defined in the data model, so admin privileges are not currently enforced. To implement admin access, a role field must exist on each user.
 * - Read-only collections are used for data that should be publicly accessible but only modifiable by admins.
 *
 * Denormalization for Authorization:
 *  There is no denormalization needed currently.
 *
 * Structural Segregation:
 * No data is segregated currently.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages core user authentication data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own document.
     * @allow (get) Authenticated user can read their own document.
     * @allow (update) Authenticated user can update their own document.
     * @allow (delete) Authenticated user can delete their own document.
     * @deny (list) Users cannot be listed.
     * @deny (create) User cannot create a document with a mismatched UID.
     * @deny (get) User cannot read another user's document.
     * @deny (update) User cannot update another user's document.
     * @deny (delete) User cannot delete another user's document.
     * @principle Enforces document ownership for writes and prevents listing of users.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages editable user profile data.
     * @path /members/{memberId}
     * @allow (create) Authenticated user can create their own member document.
     * @allow (get) Authenticated user can read their own member document.
     * @allow (update) Authenticated user can update their own member document.
     * @allow (delete) Authenticated user can delete their own member document.
     * @allow (list) Authenticated user can list their own member documents.
     * @deny (create) User cannot create a member document with a mismatched UID.
     * @deny (get) User cannot read another user's member document.
     * @deny (update) User cannot update another user's member document.
     * @deny (delete) User cannot delete another user's member document.
     * @principle Enforces document ownership for writes and prevents listing of other user's members.
     */
    match /members/{memberId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(memberId) {
            return get(/databases/$(database)/documents/members/$(memberId)).data.userId == request.auth.uid;
        }

        function isExistingOwner(memberId) {
            return isOwner(memberId) && existsAfter(/databases/$(database)/documents/members/$(memberId));
        }

        allow get: if isOwner(memberId);
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isExistingOwner(memberId);
        allow delete: if isExistingOwner(memberId);
    }

    /**
     * @description Manages all appointments.
     * @path /appointments/{appointmentId}
     * @allow (get) All users can read appointments.
     * @allow (list) All users can list appointments.
     * @deny (create) Only admins can create appointments. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) Only admins can update appointments. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) Only admins can delete appointments. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only write (enforced with placeholder rules pending schema update).
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages all groups (classes and teams).
     * @path /groups/{groupId}
     * @allow (get) All users can read groups.
     * @allow (list) All users can list groups.
     * @deny (create) Only admins can create groups. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) Only admins can update groups. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) Only admins can delete groups. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only write (enforced with placeholder rules pending schema update).
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}