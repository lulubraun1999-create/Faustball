/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for both authentication data and editable profile information.
 * Users can only read and write their own data, and administrators have no special privileges defined in this version.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user authentication data (read-only after creation).
 * - /members/{memberId}: Stores editable user profile data.
 *
 * Key Security Decisions:
 * - No public listing of users or members.
 * - Strict ownership checks for all write operations.
 * - No validation of the data shape during writes.
 *
 * Denormalization for Authorization:
 * - User IDs are used as document IDs to simplify ownership checks and avoid extra reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user authentication data.
     * @path /users/{userId}
     * @allow (get) User with UID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can read their own user data.
     * @allow (create) User with UID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own user data.
     * @allow (update) User with UID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can update their own user data.
     * @deny (get) User with UID 'otherUserId' cannot read user data of 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @deny (create) User with UID 'otherUserId' cannot create user data for 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @deny (update) User with UID 'otherUserId' cannot update user data of 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @principle Enforces document ownership for all access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for editable member profile data.
     * @path /members/{memberId}
     * @allow (get) User with UID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can read their own member data.
     * @allow (create) User with UID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own member data.
     * @allow (update) User with UID 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can update their own member data.
     * @deny (get) User with UID 'otherUserId' cannot read member data of 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @deny (create) User with UID 'otherUserId' cannot create member data for 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @deny (update) User with UID 'otherUserId' cannot update member data of 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @principle Enforces document ownership for all access.
     */
    match /members/{memberId} {
      allow get: if isOwner(memberId);
      allow list: if false;
      allow create: if isOwner(memberId);
      allow update: if isExistingOwner(memberId);
      allow delete: if isExistingOwner(memberId);
    }

    //---------- Helper functions ----------
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}