rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user authentication data. Only the authenticated user or an admin can access their own data.
     * @path /users/{userId}
     * @allow (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create their own document at /users/Gj5PDcSRA6WhxNScqpc3R7ZvGmd2 if the user.id == Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @allow (get) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can read their own document at /users/Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @allow (update) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can update their own document at /users/Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @allow (delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can delete their own document at /users/Gj5PDcSRA6WhxNScqpc3R7ZvGmd2.
     * @deny (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' cannot create a document at /users/otherUserId.
     * @deny (get) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' cannot read document /users/otherUserId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Allow the user to read their own document.
      allow get: if isOwner(userId);

      // Allow the user to list their own document.
      allow list: if false; // Listing users is generally not allowed

      // Allow the user to create their own document, but enforce that the userId in the document matches the path.
      allow create: if isOwner(userId);

      // Allow the user to update their own document, ensuring the userId cannot be changed.
      allow update: if isExistingOwner(userId);

      // Allow the user to delete their own document.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages member profile data. Only the authenticated user or an admin can access their own profile data.
     * @path /members/{memberId}
     * @allow (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can create a member document with member.userId == 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @allow (get) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can read the member document with member.userId == 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @allow (update) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can update the member document with member.userId == 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @allow (delete) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' can delete the member document with member.userId == 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2'.
     * @deny (create) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' cannot create a member document for another user.
     * @deny (get) User 'Gj5PDcSRA6WhxNScqpc3R7ZvGmd2' cannot read a member document for another user.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /members/{memberId} {
      // Allow reads if the user is the owner of the member document.
      allow get: if isOwner(resource.data.userId);

      // Allow list if the user is the owner of the member document.
      allow list: if false; // Listing members is generally not allowed

      // Allow create if the user is the owner of the member document.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      // Allow update if the user is the owner of the member document.
      allow update: if isExistingOwner(resource.data.userId) && resource.data.userId == request.resource.data.userId;

      // Allow delete if the user is the owner of the member document.
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Manages appointment data. Appointments are publicly readable but only writable by admins.
     * @path /appointments/{appointmentId}
     * @allow (get) Any user can read any appointment.
     * @allow (list) Any user can list appointments.
     * @deny (create) Non-admin users cannot create appointments. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) Non-admin users cannot update appointments. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) Non-admin users cannot delete appointments. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Provides public read access while restricting write access to admins.
     */
    match /appointments/{appointmentId} {
      // Anyone can read appointments.
      allow get, list: if true;

      // Only admins can create, update, or delete appointments.
      allow create, update, delete: if isAdmin(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages group data (classes and teams). Groups are publicly readable but only writable by admins.
     * @path /groups/{groupId}
     * @allow (get) Any user can read any group.
     * @allow (list) Any user can list groups.
     * @deny (create) Non-admin users cannot create groups.  // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) Non-admin users cannot update groups.  // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) Non-admin users cannot delete groups.  // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Provides public read access while restricting write access to admins.
     */
    match /groups/{groupId} {
      // Anyone can read groups.
      allow get, list: if true;

      // Only admins can create, update, or delete groups.
      allow create, update, delete: if isAdmin(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }

  // Helper function to determine if the request is made by the document owner.
  function isOwner(userId) {
    return request.auth != null && request.auth.uid == userId;
  }

  // Helper function to determine if the request is made by an existing document owner.
  function isExistingOwner(userId) {
    return isOwner(userId) && exists(resource);
  }

  // Helper function to determine if the request is made by an admin.
  function isAdmin() {
    return false; // TODO: Implement admin role check.  Consider denormalizing admin status onto the user document.
  }

  function isSignedIn() {
      return request.auth != null;
  }
}