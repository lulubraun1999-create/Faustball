/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model for administrative data
 * and user-ownership for profile information. Data validation is relaxed to
 * allow for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: User authentication data, accessible only by the user or admin.
 * - /members/{memberId}: User profile data, accessible only by the user or admin.
 * - /appointments/{appointmentId}, /groups/{groupId}, /news/{newsId}: Public read, admin write.
 * - /polls/{pollId}: Readable by all users. Admin-only writes.
 * - /treasury/{transactionId}: Admin-only access.
 * - /penalties/{penaltyId}: Admin-only access.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Admin role is not explicitly defined in the schema, defaulting to secure-by-default.
 * - Relaxed data validation to allow for rapid iteration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own user document.
     * @allow (get) User with ID 'user123' can read their own user document.
     * @allow (update) User with ID 'user123' can update their own user document.
     * @allow (delete) User with ID 'user123' can delete their own user document.
     * @deny (create) User with ID 'user456' cannot create a user document with ID 'user123'.
     * @deny (get) User with ID 'user456' cannot read user document with ID 'user123'.
     * @deny (update) User with ID 'user456' cannot update user document with ID 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete user document with ID 'user123'.
     * @principle Enforces user-ownership: users can only access their own data, plus admin override.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to member profile data.
     * @path /members/{memberId}
     * @allow (create) User with ID 'user123' can create their own member profile document.
     * @allow (get) User with ID 'user123' can read their own member profile document.
     * @allow (update) User with ID 'user123' can update their own member profile document.
     * @allow (delete) User with ID 'user123' can delete their own member profile document.
     * @deny (create) User with ID 'user456' cannot create a member profile document with ID 'user123'.
     * @deny (get) User with ID 'user456' cannot read member profile document with ID 'user123'.
     * @deny (update) User with ID 'user456' cannot update member profile document with ID 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete member profile document with ID 'user123'.
     * @principle Enforces user-ownership: users can only access their own profile data, plus admin override.
     */
    match /members/{memberId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isExistingOwner(memberId);
    }

    /**
     * @description Controls access to appointments.
     * @path /appointments/{appointmentId}
     * @allow (get) Any user can read any appointment.
     * @deny (create) Non-admin users cannot create appointments.
     * @deny (update) Non-admin users cannot update appointments.
     * @deny (delete) Non-admin users cannot delete appointments.
     * @principle Public read, admin-only write.
     */
    match /appointments/{appointmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to groups.
     * @path /groups/{groupId}
     * @allow (get) Any user can read any group.
     * @deny (create) Non-admin users cannot create groups.
     * @deny (update) Non-admin users cannot update groups.
     * @deny (delete) Non-admin users cannot delete groups.
     * @principle Public read, admin-only write.
     */
    match /groups/{groupId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to polls.
     * @path /polls/{pollId}
     * @allow (get) Any user can read any poll.
     * @deny (create) Non-admin users cannot create polls.
     * @deny (update) Non-admin users cannot update polls.
     * @deny (delete) Non-admin users cannot delete polls.
     * @principle Public read, admin-only write.
     */
    match /polls/{pollId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to news articles.
     * @path /news/{newsId}
     * @allow (get) Any user can read any news article.
     * @deny (create) Non-admin users cannot create news articles.
     * @deny (update) Non-admin users cannot update news articles.
     * @deny (delete) Non-admin users cannot delete news articles.
     * @principle Public read, admin-only write.
     */
    match /news/{newsId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to treasury transactions.
     * @path /treasury/{transactionId}
     * @deny (get) Non-admin users cannot read treasury transactions.
     * @deny (create) Non-admin users cannot create treasury transactions.
     * @deny (update) Non-admin users cannot update treasury transactions.
     * @deny (delete) Non-admin users cannot delete treasury transactions.
     * @principle Admin-only access.
     */
    match /treasury/{transactionId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to penalty rules.
     * @path /penalties/{penaltyId}
     * @deny (get) Non-admin users cannot read penalty rules.
     * @deny (create) Non-admin users cannot create penalty rules.
     * @deny (update) Non-admin users cannot update penalty rules.
     * @deny (delete) Non-admin users cannot delete penalty rules.
     * @principle Admin-only access.
     */
    match /penalties/{penaltyId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(documentId) {
    return isSignedIn() && isOwner(documentId) && resource != null;
  }
}