/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and admin-controlled access.
 * User-specific data is protected using the Ownership pattern, while global data
 * is primarily controlled by administrators.  Schema validation is relaxed to
 * facilitate rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}:  User authentication and profile data, accessible only by the user or admins.
 * - /members/{memberId}:  Editable user profile information, accessible only by the user or admins.
 * - /groups/{groupId}: Represents teams or classes; publicly readable, admin-writeable.
 * - /groups/{groupId}/members/{memberId}: Denormalized member list for quick access.
 * - /appointments/{appointmentId}: Publicly readable, admin-writeable events.
 * - /polls/{pollId}: Publicly readable (or team-specific), admin-writeable polls.
 * - /news/{newsId}: Publicly readable, admin-writeable news articles.
 * - /treasury/{transactionId}:  Team financial transactions; admin-writeable only.
 * - /penalties/{penaltyId}: Team penalty rules; admin-writeable only.
 *
 * Key Security Decisions:
 * - No user listing is allowed to prevent email harvesting.
 * - Public read access is granted for non-sensitive data like appointments and news.
 * - Admin privileges are not explicitly defined in this initial version and should be
 *   added based on a role-based system in a production environment.
 *
 * Denormalization for Authorization:
 * - No denormalization is performed in this version due to admin-centric write security and public read access on most collections.
 *   Future iterations could benefit from denormalizing team membership into polls for more efficient read rules if polls are not globally visible.
 *
 * Structural Segregation:
 * - No explicit segregation is used.  Admin-controlled write access largely negates the need for private/public collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user accounts. Only the user or an admin can read/write.
     * @path /users/{userId}
     * @allow (create) User with matching UID creates their own document.
     * @allow (get, update, delete) User with matching UID reads/modifies their own document.
     * @deny (create) User tries to create a document with a mismatched UID.
     * @deny (get, update, delete) User tries to read/modify another user's document.
     * @principle Enforces document ownership for user data and prevents unauthorized access.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to member profiles.  Only the user or an admin can read/write.
     * @path /members/{memberId}
     * @allow (create) User with matching UID creates their own profile.
     * @allow (get, update, delete) User with matching UID reads/modifies their own profile.
     * @deny (create) User tries to create a profile with a mismatched UID.
     * @deny (get, update, delete) User tries to read/modify another user's profile.
     * @principle Enforces document ownership for profile data and prevents unauthorized access.
     */
    match /members/{memberId} {
        function isSignedIn() {
          return request.auth != null;
        }
        function isOwner(memberId) {
            return request.auth.uid == getAfter(/databases/$(database)/documents/members/$(memberId)).data.userId;
        }

        function isCreatingOwnProfile(memberId) {
            return request.auth.uid == request.resource.data.userId;
        }
        function isExistingOwner(memberId) {
          return isSignedIn() && isOwner(memberId) && exists(resource);
        }

        allow get: if isSignedIn() && isOwner(memberId);
        allow list: if false;
        allow create: if isSignedIn() && isCreatingOwnProfile(memberId);
        allow update: if isExistingOwner(memberId);
        allow delete: if isExistingOwner(memberId);
    }

       /**
        * @description Controls access to the list of group members. This is publicly readable to allow quick access to team rosters. Admins can write.
        * @path /groups/{groupId}/members/{memberId}
        * @allow (get, list) Anyone can read group members.
        * @deny (create, update, delete) Only admins can modify group members.
        * @principle Allows public access for team roster lookup, but restricts writes to admins only.
        */
      match /groups/{groupId}/members/{memberId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Controls access to appointments.  Publicly readable, admin-writeable.
     * @path /appointments/{appointmentId}
     * @allow (get, list) Anyone can read appointments.
     * @deny (create, update, delete) Only admins can modify appointments.
     * @principle Allows public visibility of appointments, but restricts modifications to admins.
     */
    match /appointments/{appointmentId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Controls access to groups (classes and teams). Publicly readable, admin-writeable.
     * @path /groups/{groupId}
     * @allow (get, list) Anyone can read groups.
     * @deny (create, update, delete) Only admins can modify groups.
     * @principle Allows public visibility of groups, but restricts modifications to admins.
     */
    match /groups/{groupId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Controls access to polls. Publicly readable, admin-writeable.  Visibility can be configured to specific teams.
     * @path /polls/{pollId}
     * @allow (get, list) Anyone can read polls.
     * @deny (create, update, delete) Only admins can modify polls.
     * @principle Allows public visibility of polls, but restricts modifications to admins.  Team-specific visibility not yet enforced.
     */
    match /polls/{pollId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Controls access to news articles. Publicly readable, admin-writeable.
     * @path /news/{newsId}
     * @allow (get, list) Anyone can read news articles.
     * @deny (create, update, delete) Only admins can modify news articles.
     * @principle Allows public visibility of news articles, but restricts modifications to admins.
     */
    match /news/{newsId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Controls access to treasury transactions.  Admin-writeable only.
     * @path /treasury/{transactionId}
     * @deny (get, list, create, update, delete) Only admins can access treasury transactions.
     * @principle Restricts all access to treasury data to admins only.
     */
    match /treasury/{transactionId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list, create, update, delete: if false;
    }

    /**
     * @description Controls access to penalty rules. Admin-writeable only.
     * @path /penalties/{penaltyId}
     * @deny (get, list, create, update, delete) Only admins can access penalty rules.
     * @principle Restricts all access to penalty rules to admins only.
     */
    match /penalties/{penaltyId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list, create, update, delete: if false;
    }
  }
}