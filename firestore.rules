/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and admin-controlled access.
 * User-specific data (profiles) are secured using an ownership model.
 * Broader application data (appointments, groups, news) is generally readable by all authenticated users,
 * but only modifiable by designated admins.
 *
 * Data Structure:
 * - /users/{userId}: User authentication data.
 * - /members/{memberId}: Detailed user profile data.
 * - /groups/{groupId}: Groups and teams data.
 * - /appointments/{appointmentId}: Calendar events.
 * - /polls/{pollId}: Polls and surveys.
 * - /news/{newsId}: News articles.
 *
 * Key Security Decisions:
 * - Listing users is disallowed.
 * - All writes (create, update, delete) require authentication.
 * - Data validation is relaxed to allow rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with matching ID can create their own profile.
     * @allow (get, update, delete) - User with matching ID can read, update, and delete their own profile.
     * @deny (create) - User attempts to create a profile with an ID that doesn't match their auth.
     * @deny (update, delete) - User attempts to modify or delete another user's profile.
     * @principle Enforces document ownership; each user can only manage their own data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to editable member profile data.
     * @path /members/{memberId}
     * @allow (create) - User with matching ID can create their own profile.
     * @allow (get, update, delete) - User with matching ID can read, update, and delete their own profile.
     * @deny (create) - User attempts to create a profile with an ID that doesn't match their auth.
     * @deny (update, delete) - User attempts to modify or delete another user's profile.
     * @principle Enforces document ownership; each user can only manage their own data.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memberId) {
        return request.auth.uid == get(/databases/$(database)/documents/members/$(memberId)).data.userId;
      }

      function isExistingOwner(memberId) {
        return isOwner(memberId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(memberId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(memberId);
      allow delete: if isExistingOwner(memberId);
    }

    /**
     * @description Controls access to denormalized group member data.
     * @path /groups/{groupId}/members/{memberId}
     * @allow (read) - Anyone can read group members.
     * @allow (write) - No one can write directly to group members. Admin access to group member management should be handled via backend functions.
     * @principle Enforces read-only access to group member data.
     */
    match /groups/{groupId}/members/{memberId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to appointment data.
     * @path /appointments/{appointmentId}
     * @allow (read) - Anyone can read appointments.
     * @allow (write) - No one can write directly to appointments. Admin access should be handled via backend functions.
     * @principle Enforces read-only access to appointment data from the client.
     */
    match /appointments/{appointmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to group data.
     * @path /groups/{groupId}
     * @allow (read) - Anyone can read group data.
     * @allow (write) - No one can write directly to groups. Admin access should be handled via backend functions.
     * @principle Enforces read-only access to group data from the client.
     */
    match /groups/{groupId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to poll data.
     * @path /polls/{pollId}
     * @allow (read) - Anyone can read poll data.
     * @allow (write) - No one can write directly to polls. Admin access should be handled via backend functions.
     * @principle Enforces read-only access to poll data from the client.
     */
    match /polls/{pollId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to news article data.
     * @path /news/{newsId}
     * @allow (read) - Anyone can read news article data.
     * @allow (write) - No one can write directly to news articles. Admin access should be handled via backend functions.
     * @principle Enforces read-only access to news article data from the client.
     */
    match /news/{newsId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to treasury transaction data.
     * @path /treasury/{transactionId}
     * @allow (read) - No one can read treasury transaction data.
     * @allow (write) - No one can write directly to treasury transactions. Admin access should be handled via backend functions.
     * @principle Enforces no access to treasury transaction data from the client.
     */
    match /treasury/{transactionId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to penalty data.
     * @path /penalties/{penaltyId}
     * @allow (read) - No one can read penalty data.
     * @allow (write) - No one can write directly to penalties. Admin access should be handled via backend functions.
     * @principle Enforces no access to penalty data from the client.
     */
    match /penalties/{penaltyId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}