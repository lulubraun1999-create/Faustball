/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model.
 * Users can only read their own profile data and admins can read/write all data.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data.
 * - /members/{memberId}: Stores editable user profile data.
 * - /groups/{groupId}: Stores group information.
 * - /groups/{groupId}/members/{memberId}: Lightweight group membership records.
 * - /appointments/{appointmentId}: Stores appointment details.
 * - /polls/{pollId}: Stores poll information.
 * - /news/{newsId}: Stores news articles.
 * - /treasury/{transactionId}: Stores team treasury transactions.
 * - /penalties/{penaltyId}: Stores team penalty rules.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent unauthorized data access.
 * - Ambiguous relationships default to the most secure interpretation (owner-only).
 * - Write access to core data is restricted to admins.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId - The user ID to compare with the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the existing owner of the resource, verifying both ownership and resource existence.
     * Primarily used for update and delete operations.
     * @param {string} userId - The user ID to compare with the resource's owner ID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user has the 'admin' role.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
    }

    /**
     * @description Rule for /users/{userId} documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with matching ID can create their own document.
     * @allow (get, update, delete) User with matching ID or admin can access the document.
     * @deny (list) Listing all users is not allowed.
     * @deny (create) User cannot create a document with an ID that doesn't match their own.
     * @principle Enforces user ownership and restricts access to user-specific data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rule for /members/{memberId} documents.
     * @path /databases/{database}/documents/members/{memberId}
     * @allow (create) User with matching ID can create their own member profile.
     * @allow (get, update, delete) User with matching ID or admin can access the document.
     * @deny (list) Listing all members is not allowed.
     * @deny (create) User cannot create a document with an ID that doesn't match their own.
     * @principle Enforces user ownership and restricts access to user-specific data.
     */
    match /members/{memberId} {
      allow get: if isOwner(memberId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(memberId);
      allow update: if isExistingOwner(memberId) || isAdmin();
      allow delete: if isExistingOwner(memberId) || isAdmin();
    }

    /**
     * @description Rule for /groups/{groupId}/members/{memberId} documents.
     * @path /databases/{database}/documents/groups/{groupId}/members/{memberId}
     * @allow (get, list) All signed-in users can read group member data.
     * @allow (create, update, delete) Only admins can modify group membership.
     * @deny (create) Non-admins cannot create group members.
     * @principle Restricts modification of group membership to administrators.
     */
    match /groups/{groupId}/members/{memberId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /appointments/{appointmentId} documents.
     * @path /databases/{database}/documents/appointments/{appointmentId}
     * @allow (get, list) All users can read appointment data.
     * @allow (create, update, delete) Only admins can modify appointments.
     * @deny (create) Non-admins cannot create appointments.
     * @principle Restricts modification of appointments to administrators.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /groups/{groupId} documents.
     * @path /databases/{database}/documents/groups/{groupId}
     * @allow (get, list) All users can read group data.
     * @allow (create, update, delete) Only admins can modify group data.
     * @deny (create) Non-admins cannot create groups.
     * @principle Restricts modification of groups to administrators.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /polls/{pollId} documents.
     * @path /databases/{database}/documents/polls/{pollId}
     * @allow (get, list) All users can read poll data.
     * @allow (create, update, delete) Only admins can modify polls.
     * @deny (create) Non-admins cannot create polls.
     * @principle Restricts modification of polls to administrators.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /news/{newsId} documents.
     * @path /databases/{database}/documents/news/{newsId}
     * @allow (get, list) All users can read news article data.
     * @allow (create, update, delete) Only admins can modify news articles.
     * @deny (create) Non-admins cannot create news articles.
     * @principle Restricts modification of news articles to administrators.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

   /**
     * @description Rule for /treasury/{transactionId} documents.
     * @path /databases/{database}/documents/treasury/{transactionId}
     * @allow (get, list) Only admins can read treasury transaction data.
     * @allow (create, update, delete) Only admins can modify treasury transactions.
     * @deny (create) Non-admins cannot create treasury transactions.
     * @principle Restricts modification of treasury transactions to administrators.
     */
    match /treasury/{transactionId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /penalties/{penaltyId} documents.
     * @path /databases/{database}/documents/penalties/{penaltyId}
     * @allow (get, list) Only admins can read penalty data.
     * @allow (create, update, delete) Only admins can modify penalty data.
     * @deny (create) Non-admins cannot create penalties.
     * @principle Restricts modification of penalties to administrators.
     */
    match /penalties/{penaltyId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /appointmentExceptions documents.
     * @path /databases/{database}/documents/appointmentExceptions
     * @allow (get, list) Deny all access to appointmentExceptions collection.
     * @allow (create, update, delete) Deny all operations on appointmentExceptions collection.
     * @deny (create) Non-admins cannot create appointmentExceptions.
     * @principle Restricts access to appointmentExceptions collection to administrators.
     */
    match /appointmentExceptions {
        allow get, list: if false;
        allow create, update, delete: if false;
    }
  }
}