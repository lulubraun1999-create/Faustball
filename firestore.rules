rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for /users/{userId} documents.
     * @path /users/{userId}
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * @description Enforces user-ownership for /members/{memberId} documents.
     * @path /members/{memberId}
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memberId) {
        return request.auth.uid == memberId;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow get: if isSignedIn() && (isOwner(memberId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(memberId);
      allow update: if isSignedIn() && (isOwner(memberId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(memberId) || isAdmin());
    }

    /**
     * @description Allows public read access and admin-only write access to /appointments/{appointmentId} documents.
     * @path /appointments/{appointmentId}
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access and admin-only write access to /groups/{groupId} documents.
     * @path /groups/{groupId}
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admin-only write access to /polls/{pollId} documents and restricts read access based on poll visibility.
     * @path /polls/{pollId}
     */
    match /polls/{pollId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      function isVisibleToUser(poll) {
        return true;
      }

      allow get: if isSignedIn() && isVisibleToUser(resource.data);
      allow list: if isSignedIn(); // Assuming listing should be restricted to signed-in users.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}