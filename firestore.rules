/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and an admin-only write model for appointments and groups.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data, accessible only by the user and admins.
 * - /members/{memberId}: Stores editable user profile data, accessible only by the user and admins.
 * - /appointments/{appointmentId}: Stores appointment data, writable only by admins, readable by all.
 * - /groups/{groupId}: Stores group data, writable only by admins, readable by all.
 *
 * Key Security Decisions:
 * - User data is strictly controlled, preventing unauthorized access or modification.
 * - Public read access is granted for appointments and groups, assuming no sensitive information is stored in these collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create their profile if request.auth.uid == userId
     * @allow (get) User 'user_abc' can read their profile if request.auth.uid == userId
     * @allow (update) User 'user_abc' can update their profile if request.auth.uid == userId
     * @allow (delete) User 'user_abc' can delete their profile if request.auth.uid == userId
     * @deny (create) User 'user_xyz' cannot create a profile with ID 'user_abc'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to member profiles.
     * @path /members/{memberId}
     * @allow (create) User 'user_abc' can create their member profile.
     * @allow (get) User 'user_abc' can read their member profile if request.auth.uid == resource.data.userId
     * @allow (update) User 'user_abc' can update their member profile if request.auth.uid == resource.data.userId
     * @allow (delete) User 'user_abc' can delete their member profile if request.auth.uid == resource.data.userId
     * @deny (create) User 'user_xyz' cannot create a member profile for 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /members/{memberId} {
      function isMemberOwner(memberId) {
        return request.auth != null && request.auth.uid == resource.data.userId;
      }
      allow get: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if false;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    /**
     * @description Controls access to appointments.
     * @path /appointments/{appointmentId}
     * @allow (get) Any user can read appointments.
     * @allow (list) Any user can list appointments.
     * @deny (create) Only admins can create appointments (TODO: Implement admin role check).
     * @deny (update) Only admins can update appointments (TODO: Implement admin role check).
     * @deny (delete) Only admins can delete appointments (TODO: Implement admin role check).
     * @principle Allows public read access but restricts writes to admins.
     */
    match /appointments/{appointmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check.
      allow update: if false; // TODO: Add admin role check.
      allow delete: if false; // TODO: Add admin role check.
    }

    /**
     * @description Controls access to groups.
     * @path /groups/{groupId}
     * @allow (get) Any user can read groups.
     * @allow (list) Any user can list groups.
     * @deny (create) Only admins can create groups (TODO: Implement admin role check).
     * @deny (update) Only admins can update groups (TODO: Implement admin role check).
     * @deny (delete) Only admins can delete groups (TODO: Implement admin role check).
     * @principle Allows public read access but restricts writes to admins.
     */
    match /groups/{groupId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check.
      allow update: if false; // TODO: Add admin role check.
      allow delete: if false; // TODO: Add admin role check.
    }
  }
}