/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * User data is secured using an ownership model, where users can only access their own data.
 * Administrative access is granted through the 'admin' role.
 * Public read access is allowed for some collections (appointments, groups), but writes are restricted to admins.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data, accessible only by the user or admins.
 * - /members/{memberId}: Stores profile data, accessible only by the user or admins.
 * - /appointments/{appointmentId}: Stores appointment data, publicly readable but writable only by admins.
 * - /groups/{groupId}: Stores group data, publicly readable but writable only by admins.
 *
 * Key Security Decisions:
 * - Users can only list their own data, not all users.
 * - Read-only collections for public data (appointments, groups) are explicitly marked as such.
 * - The rules strictly enforce the separation of concerns between user authentication data and profile data.
 * - List operation for `/users` collection is denied because listing all users is not permitted.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user authentication data.
     * @path /users/{userId}
     * @allow (create) Signed-in user with matching userId in the document.
     * @allow (get, update, delete) Signed-in user with matching userId or an admin.
     * @deny (list) Listing all users is not permitted.
     * @principle Enforces document ownership for writes and restricts reads to the owner or admins.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own document, enforcing the userId in the
      // document to match their auth UID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to read, update, and delete their own document, or if the user has the admin role.
      allow get: if isOwner(userId) || isAdmin();
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();

      // Do not allow listing all users in the database.
      allow list: if false;
    }

    /**
     * @description Secures editable user profile data.
     * @path /members/{memberId}
     * @allow (create) Signed-in user with matching userId in the document.
     * @allow (get, update, delete) Signed-in user with matching userId or an admin.
     * @allow (list) Signed-in user with matching userId.
     * @deny (create, update, delete) If the signed-in user does not match the userId in the document and is not an admin.
     * @principle Enforces document ownership for writes and restricts reads to the owner or admins.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       // helper function to check if the user is the document owner based on the userId field
      function isDocumentOwner() {
        return request.auth.uid == request.resource.data.userId;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own document, enforcing the userId in the
      // document to match their auth UID.
      allow create: if isSignedIn() && isDocumentOwner();

      // Allow the user to read, update, and delete their own document, or if the user has the admin role.
      allow get: if isOwner(resource.data.userId) || isAdmin();
      allow update: if isExistingOwner(resource.data.userId) || isAdmin();
      allow delete: if isExistingOwner(resource.data.userId) || isAdmin();

      // Allow the owner to list their own documents.
      allow list: if isSignedIn() && isOwner(request.auth.uid);
    }

    /**
     * @description Secures appointment data. Publicly readable, writable only by admins.
     * @path /appointments/{appointmentId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only admins can write.
     * @deny (create, update, delete) If the user is not an admin.
     * @principle Public read access with owner-only writes.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      // Allow public read access.
      allow get, list: if true;

      // Allow only admins to create, update, and delete appointments.
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Secures group data. Publicly readable, writable only by admins.
     * @path /groups/{groupId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only admins can write.
     * @deny (create, update, delete) If the user is not an admin.
     * @principle Public read access with owner-only writes.
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      // Allow public read access.
      allow get, list: if true;

      // Allow only admins to create, update, and delete groups.
      allow create, update, delete: if isAdmin();
    }
  }
}