/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for both user authentication data and editable member profile data.
 * Only the authenticated user or an admin can access their own data.  Data validation is relaxed during this rapid prototyping phase.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores core user data. The `userId` in the path MUST match the `id` field in the document.
 * - `/members/{memberId}`: Stores editable member profile data. The `userId` field within the document links to the corresponding `/users/{userId}` document.
 *
 * Key Security Decisions:
 * - User listing is disallowed for both `/users` and `/members` collections to protect privacy.
 * - Ownership is enforced using the `userId` field in both the path and the documents.
 * - No role-based access control is currently implemented beyond simple ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-level access control for core user data.
     * @path /users/{userId}
     * @allow (create) - User with matching UID can create their own record.
     * @allow (get, update, delete) - User with matching UID can access their own record.
     * @deny (create, get, update, delete) - Any other user cannot access this record.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own record if the userId matches their auth.uid
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to read their own record if the userId matches their auth.uid
      allow get: if isSignedIn() && isOwner(userId);

      // Allow the user to update their own record if the userId matches their auth.uid and the document exists
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own record if the userId matches their auth.uid and the document exists
      allow delete: if isSignedIn() && isExistingOwner(userId);

      // Prevent anyone from listing all users
      allow list: if false;
    }

    /**
     * @description Enforces user-level access control for editable member profile data.
     * @path /members/{memberId}
     * @allow (create) - User with matching UID in userId field can create their own record.
     * @allow (get, update, delete) - User with matching UID in userId field can access their own record.
     * @deny (create, get, update, delete) - Any other user cannot access this record.
     * @principle Enforces document ownership for writes.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own record if the userId matches their auth.uid
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);

      // Allow the user to read their own record if the userId matches their auth.uid
      allow get: if isSignedIn() && isOwner(resource.data.userId);

      // Allow the user to update their own record if the userId matches their auth.uid and the document exists
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);

      // Allow the user to delete their own record if the userId matches their auth.uid and the document exists
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);

      // Prevent anyone from listing all members
      allow list: if false;
    }
  }
}