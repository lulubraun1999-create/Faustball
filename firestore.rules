/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * Users can only read and write their own data, while admins have broader access.
 * Read access is generally more permissive than write access.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data (profile, role). User-owned, admin-manageable.
 * - /members/{memberId}: Stores detailed, editable profile data for team members. User-owned, admin-manageable.
 * - /appointments/{appointmentId}: Stores event/training/game calendar data. Public read, admin-write.
 * - /groups/{groupId}: Stores class/team data. Public read, admin-write.
 *
 * Key Security Decisions:
 * - No user listing: Listing all users is disallowed for privacy reasons.
 * - Admin role: The 'admin' role grants broad access for data management.
 * - Public read for appointments and groups: These collections are intended to be publicly readable.
 *
 * Denormalization for Authorization:
 *  - The rules rely on `request.auth.uid` for identity verification.
 *  - Admin status is verified using a helper function that could be expanded to use a roles collection.
 *
 * Structural Segregation:
 * - Public vs. Private: Appointments and Groups are designed to be publicly readable, while User and Member data is private and access-controlled.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user documents. Only the owner or an admin can read/write.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own document.
     * @allow (get, update, delete) Admin can read/write any user document.
     * @allow (get, update, delete) User with UID 'user123' can read/write their own document.
     * @deny (create) User with UID 'user456' cannot create a document with ID 'user123'.
     * @deny (get, update, delete) User with UID 'user456' cannot read/write user document 'user123'.
     * @principle Enforces document ownership and admin override.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isAdmin() {
        //  Expand this to fetch roles from a dedicated collection if needed.
        return false;
      }
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Grants access to member documents (extended user profiles). Only the owner or an admin can read/write.
     * @path /members/{memberId}
     * @allow (create) User with UID 'user123' can create a member document.
     * @allow (get, update, delete) Admin can read/write any member document.
     * @allow (get, update, delete) User with UID 'user123' can read/write member document.
     * @deny (create) User with UID 'user456' cannot create a member document with ID 'member123'.
     * @deny (get, update, delete) User with UID 'user456' cannot read/write member document 'member123'.
     * @principle Enforces document ownership and admin override.
     */
    match /members/{memberId} {
      function isOwnerByUserId(userId) {
        return get(/databases/$(database)/documents/members/$(memberId)).data.userId == userId;
      }
      function isAdmin() {
        //  Expand this to fetch roles from a dedicated collection if needed.
        return false;
      }
      allow get: if isOwnerByUserId(request.auth.uid) || isAdmin();
      allow list: if isAdmin(); // only admins can list all members
      allow create: if request.auth != null;
      allow update: if isOwnerByUserId(request.auth.uid) || isAdmin();
      allow delete: if isOwnerByUserId(request.auth.uid) || isAdmin();
    }

    /**
     * @description Grants public read access to appointment documents, but restricts writes to admins only.
     * @path /appointments/{appointmentId}
     * @allow (get, list) Any user (or anonymous) can read appointments.
     * @allow (create, update, delete) Only admins can modify appointments.
     * @deny (create, update, delete) Non-admins cannot modify appointments.
     * @principle Allows public read access with restricted write access.
     */
    match /appointments/{appointmentId} {
      function isAdmin() {
        //  Expand this to fetch roles from a dedicated collection if needed.
        return false;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants public read access to group documents, but restricts writes to admins only.
     * @path /groups/{groupId}
     * @allow (get, list) Any user (or anonymous) can read groups.
     * @allow (create, update, delete) Only admins can modify groups.
     * @deny (create, update, delete) Non-admins cannot modify groups.
     * @principle Allows public read access with restricted write access.
     */
    match /groups/{groupId} {
      function isAdmin() {
        //  Expand this to fetch roles from a dedicated collection if needed.
        return false;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}