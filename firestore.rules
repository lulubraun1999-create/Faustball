/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * Users can only read and write their own data, while admins have broader access.
 * Read access is generally more permissive than write access, allowing for public data display.
 *
 * Data Structure:
 * - /users/{userId}: Stores core, mostly read-only user data.
 * - /members/{memberId}: Stores editable profile data, linked to a User.
 * - /appointments/{appointmentId}: Stores calendar events, readable by all, writable by admins only.
 * - /groups/{groupId}: Stores class and team data, readable by all, writable by admins only.
 *
 * Key Security Decisions:
 * - Users can only access their own /users/{userId} documents and /members/{memberId} documents.
 * - Listing of `/members` collection is denied to all users to prevent data scraping.
 * - Public read access is granted to /appointments and /groups.
 * - Schema validation is relaxed to allow for rapid prototyping, focusing on authorization.
 *
 * Denormalization for Authorization:
 * This ruleset assumes that the `userId` field in the `/members/{memberId}` document matches the `auth.uid` of the user who owns the profile.  This avoids the need for complex `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user account data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own record.
     * @allow (get) Authenticated user can read their own record. Admin can read any record.
     * @allow (update) Authenticated user can update their own record. Admin can update any record.
     * @allow (delete) Authenticated user can delete their own record. Admin can delete any record.
     * @deny (create) User tries to create a record with a different UID.
     * @principle Enforces document ownership and admin override.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Controls access to member profile data.
     * @path /members/{memberId}
     * @allow (create) Authenticated user can create a member profile.
     * @allow (get) Authenticated user can read a member profile if the userId matches their own.
     * @allow (update) Authenticated user can update their own member profile.
     * @allow (delete) Authenticated user can delete their own member profile.
     * @deny (list) No user can list all members.
     * @deny (create) User tries to create a member profile with a different userId.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwnerByUserId(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwnerByUserId(userId) {
            return isOwnerByUserId(userId) && resource != null;
        }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow get: if isOwnerByUserId(resource.data.userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwnerByUserId(resource.data.userId) || isAdmin();
      allow delete: if isExistingOwnerByUserId(resource.data.userId) || isAdmin();
    }

    /**
     * @description Controls access to appointment data.
     * @path /appointments/{appointmentId}
     * @allow (get) All users can read appointment data.
     * @allow (list) All users can list appointment data.
     * @allow (create) Only admins can create appointments.
     * @allow (update) Only admins can update appointments.
     * @allow (delete) Only admins can delete appointments.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to group data.
     * @path /groups/{groupId}
     * @allow (get) All users can read group data.
     * @allow (list) All users can list group data.
     * @allow (create) Only admins can create groups.
     * @allow (update) Only admins can update groups.
     * @allow (delete) Only admins can delete groups.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}