rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages core user data. Only the user themselves or an admin can read/write.
     * @path /users/{userId}
     * @allow (create) If the user's auth UID matches the userId.
     * @allow (get, update, delete) If the user's auth UID matches the userId or the user has the "admin" role.
     * @deny (create) If the user's auth UID does not match the userId.
     * @deny (get, update, delete) If the user's auth UID does not match the userId and the user does not have the "admin" role.
     * @principle Enforces user-ownership for writes, admin override.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
          // TODO: Add admin check once roles are implemented.
          return false;
      }
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * @description Manages member profile data. Only the user themselves or an admin can read/write.
     * @path /members/{memberId}
     * @allow (get, update, delete) If the user's auth UID matches the member's userId or the user has the "admin" role.
     * @deny (get, update, delete) If the user's auth UID does not match the member's userId and the user does not have the "admin" role.
     * @principle Enforces user-ownership for writes, admin override.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memberId) {
        return request.auth.uid == resource.data.userId;
      }

      function isAdmin() {
          // TODO: Add admin check once roles are implemented.
          return false;
      }
      allow get: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if false; // Fixed: Deny listing members to address the original error.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdmin());
    }

    /**
     * @description Manages appointment data. Readable by all, writable only by admins.
     * @path /appointments/{appointmentId}
     * @allow (get, list) If true (public read).
     * @allow (create, update, delete) If the user has the "admin" role.
     * @deny (create, update, delete) If the user does not have the "admin" role.
     * @principle Public read, admin-only writes.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          // TODO: Add admin check once roles are implemented.
          return false;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages group data (classes and teams). Readable by all, writable only by admins.
     * @path /groups/{groupId}
     * @allow (get, list) If true (public read).
     * @allow (create, update, delete) If the user has the "admin" role.
     * @deny (create, update, delete) If the user does not have the "admin" role.
     * @principle Public read, admin-only writes.
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          // TODO: Add admin check once roles are implemented.
          return false;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}