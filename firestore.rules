/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model.
 * - Users can only read their own documents in `/users/{userId}`.
 * - Members can only read their own documents in `/members/{memberId}`.
 * - Only admins can write to `/appointments/{appointmentId}` and `/groups/{groupId}`.
 * - Read access is public for `/appointments/{appointmentId}` and `/groups/{groupId}`.
 *
 * Data Structure:
 * - `/users/{userId}`: User authentication and profile data.
 * - `/members/{memberId}`: Editable profile information.
 * - `/appointments/{appointmentId}`: Calendar events.
 * - `/groups/{groupId}`: Classes and teams.
 *
 * Key Security Decisions:
 * - No user listing is allowed for the `/users` collection.
 * - Read-only access is granted to all users for `/appointments` and `/groups`.
 * - All write operations require authentication (`request.auth != null`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (update) Authenticated user can update their own profile if the userId matches their auth UID.
     * @allow (delete) Authenticated user can delete their own profile if the userId matches their auth UID.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (list) No listing of users is allowed.
     * @deny (create) Unauthenticated users cannot create profiles.
     * @deny (update) Unauthenticated users cannot update profiles.
     * @deny (delete) Unauthenticated users cannot delete profiles.
     * @principle Enforces user-ownership for data access.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to member profile data.
     * @path /members/{memberId}
     * @allow (get) Authenticated user can read their own member profile.
     * @allow (create) Authenticated user can create their own member profile with matching userId.
     * @allow (update) Authenticated user can update their own member profile if the userId matches their auth UID.
     * @allow (delete) Authenticated user can delete their own member profile if the userId matches their auth UID.
     * @deny (get) Authenticated user cannot read another user's member profile.
     * @deny (list) No listing of members is allowed.
     * @deny (create) Unauthenticated users cannot create member profiles.
     * @deny (update) Unauthenticated users cannot update member profiles.
     * @deny (delete) Unauthenticated users cannot delete member profiles.
     * @principle Enforces user-ownership for data access.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memberId) {
        return isSignedIn() && request.auth.uid == resource.data.userId;
      }

      function isCreatingWithOwnerId() {
        return isSignedIn() && request.auth.uid == request.resource.data.userId;
      }

      function isExistingOwner(memberId) {
        return isSignedIn() && request.auth.uid == resource.data.userId;
      }

      allow get: if isSignedIn() && isOwner(memberId);
      allow list: if false;

      allow create: if isSignedIn() && isCreatingWithOwnerId();
      allow update: if isSignedIn() && isExistingOwner(memberId) ;
      allow delete: if isSignedIn() && isExistingOwner(memberId);
    }

    /**
     * @description Controls access to appointment data.
     * @path /appointments/{appointmentId}
     * @allow (get) All users can read appointment data.
     * @allow (list) All users can list appointment data.
     * @deny (create) Only admins can create appointments. Requires custom claim validation.
     * @deny (update) Only admins can update appointments. Requires custom claim validation.
     * @deny (delete) Only admins can delete appointments. Requires custom claim validation.
     * @principle Public read access with restricted write access.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }


      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to group data.
     * @path /groups/{groupId}
     * @allow (get) All users can read group data.
     * @allow (list) All users can list group data.
     * @deny (create) Only admins can create groups. Requires custom claim validation.
     * @deny (update) Only admins can update groups. Requires custom claim validation.
     * @deny (delete) Only admins can delete groups. Requires custom claim validation.
     * @principle Public read access with restricted write access.
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }


      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}