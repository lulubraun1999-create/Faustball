/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * Users can only read and write their own data, while admins have broader access.
 * Read access is generally more permissive than write access, allowing for public data display.
 *
 * Data Structure:
 * - /users/{userId}: Stores core, mostly read-only user data.
 * - /members/{memberId}: Stores editable user profile data.
 * - /appointments/{appointmentId}: Stores appointment data (events, training, games).
 * - /groups/{groupId}: Stores group data (classes and teams).
 *
 * Key Security Decisions:
 * - Users can only read/write their own user and member documents.
 * - Admins have write access to appointments and groups.
 * - Listing of members collection is not allowed for non-admin users due to privacy concerns.
 * - Data validation is relaxed in this prototyping phase to allow for schema iteration.
 *
 * Denormalization for Authorization:
 *  - The rules rely on `request.auth.uid` for identity and path parameters (e.g., `userId`).
 *
 * Structural Segregation:
 *  - Private user data is stored under `/users/{userId}`.
 *  - Public appointment and group data are stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user account data.
     * @path /users/{userId}
     * @allow (create) - If the user's auth UID matches the userId.
     * @allow (get, update, delete) - If the user is the owner or an admin.
     * @deny (create) - If the user tries to create a document with a mismatched userId.
     * @deny (get, update, delete) - If the user is not the owner and not an admin.
     * @principle Enforces user-ownership and admin override for user data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return resource.data.userId == request.auth.uid && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to member profile data.
     * @path /members/{memberId}
     * @allow (create) - Always denied in this ruleset due to missing creatorId or userId on creation.
     * @allow (get, update, delete) - If the user is the owner of the member profile.
     * @deny (get, update, delete) - If the user is not the owner.
     * @principle Enforces user-ownership for member profile data.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(memberId) {
        return request.auth.uid == resource.data.userId;
      }
      function isExistingOwner(memberId) {
        return resource.data.userId == request.auth.uid && resource != null;
      }

      allow get: if isSignedIn() && isOwner(memberId);
      allow list: if false; // Listing members collection is not allowed for non-admin users due to privacy concerns

      allow create: if false; // Member is created from the user creation (Auth trigger function)
      allow update: if isExistingOwner(memberId);
      allow delete: if isExistingOwner(memberId);
    }

    /**
     * @description Controls access to appointment data.
     * @path /appointments/{appointmentId}
     * @allow (get, list) - Public read access for all appointments.
     * @allow (create, update, delete) - Only admins can create, update, or delete appointments.
     * @principle Allows public reading but restricts writing to admins.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true; // Public read

      allow create, update, delete: if false; // Only admins can write (currently no admin role)
    }

    /**
     * @description Controls access to group data.
     * @path /groups/{groupId}
     * @allow (get, list) - Public read access for all groups.
     * @allow (create, update, delete) - Only admins can create, update, or delete groups.
     * @principle Allows public reading but restricts writing to admins.
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true; // Public read

      allow create, update, delete: if false; // Only admins can write (currently no admin role)
    }
  }
}