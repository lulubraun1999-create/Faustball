/**
 * @fileoverview Firestore Security Rules for the FaustApp application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, combining user-based access control with role-based access control for administrative functions.
 * User-specific data (profiles) is secured using an ownership model, while broader application data (appointments, groups, news) is publicly readable but admin-writable.
 *
 * Data Structure:
 * - /users/{userId}: Stores core, mostly read-only user data.
 * - /members/{memberId}: Stores detailed, editable profile information.
 * - /appointments/{appointmentId}: Stores calendar events and appointments.
 * - /groups/{groupId}: Stores class and team groupings.
 * - /polls/{pollId}: Stores polls and surveys.
 * - /news/{newsId}: Stores news articles and announcements.
 * - /treasury/{transactionId}: Stores financial transactions.
 * - /penalties/{penaltyId}: Stores penalty rules.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user and member documents.
 * - Listing of members is disallowed to prevent data harvesting.
 * - Appointments, groups, news articles, and polls are publicly readable.
 * - Only users with the 'admin' role can create, update, or delete appointments, groups, news articles, treasury transactions, or penalties.
 * - The rules do not enforce strict schema validation to allow for rapid prototyping and iteration.
 *
 * Denormalization for Authorization:
 *  The current data model does not require denormalization.
 *  If team-specific roles were introduced, storing a `members` map directly on team documents would be beneficial (e.g., `groups/{groupId}`)
 *  to avoid complex `get()` calls.
 *
 * Structural Segregation:
 *  The application uses separate collections for different types of data (user profiles vs. public content). This improves security and performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages core user authentication data. Accessible only by admins or the authenticated user.
     * @path /users/{userId}
     * @allow (create) User 'testUser' can create their own document if their UID matches the {userId}.
     *   request.auth.uid == 'testUser'
     *   request.resource.data.id == 'testUser'
     * @allow (get, update, delete) User 'testUser' can get, update, or delete their own document.
     *   request.auth.uid == 'testUser'
     *   resource.data.id == 'testUser'
     * @deny (create) User 'otherUser' cannot create a document for 'testUser'.
     *   request.auth.uid == 'otherUser'
     *   request.resource.data.id == 'testUser'
     * @deny (update, delete) User 'otherUser' cannot update or delete 'testUser's' document.
     *   request.auth.uid == 'otherUser'
     *   resource.data.id == 'testUser'
     * @principle Enforces document ownership for writes and prevents unauthorized data modification.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages editable user profile data. Accessible by admins or the owning user.
     * @path /members/{memberId}
     * @allow (create) User 'testUser' can create their own member profile if their UID matches the memberId.
     *   request.auth.uid == 'testUser'
     *   request.resource.data.userId == 'testUser'
     * @allow (get, update, delete) User 'testUser' can get, update, or delete their own member profile.
     *   request.auth.uid == 'testUser'
     *   resource.data.userId == 'testUser'
     * @deny (create) User 'otherUser' cannot create a member profile for 'testUser'.
     *   request.auth.uid == 'otherUser'
     *   request.resource.data.userId == 'testUser'
     * @deny (update, delete) User 'otherUser' cannot update or delete 'testUser's' member profile.
     *   request.auth.uid == 'otherUser'
     *   resource.data.userId == 'testUser'
     * @principle Enforces document ownership for writes and prevents unauthorized profile modification.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memberId) {
        return request.auth.uid == resource.data.userId;
      }
    
      allow get: if isSignedIn() && exists(/databases/$(database)/documents/users/$(memberId)) && get(/databases/$(database)/documents/users/$(memberId)).data.id == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == memberId;
      allow update: if isSignedIn() && request.auth.uid == memberId;
      allow delete: if isSignedIn() && request.auth.uid == memberId;
    }

    /**
     * @description Manages calendar events and appointments. Writable only by admins, readable by all users.
     * @path /appointments/{appointmentId}
     * @allow (get, list) Any user can read any appointment.
     * @allow (create, update, delete) Only admins can create, update, or delete appointments.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete appointments.
     * @principle Provides public read access with restricted write access for authorized personnel.
     */
    match /appointments/{appointmentId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'admin';
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages class and team groupings. Writable only by admins, readable by all users.
     * @path /groups/{groupId}
     * @allow (get, list) Any user can read any group.
     * @allow (create, update, delete) Only admins can create, update, or delete groups.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete groups.
     * @principle Provides public read access with restricted write access for authorized personnel.
     */
    match /groups/{groupId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'admin';
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages polls and surveys. Writable only by admins, readable by all users.
     * @path /polls/{pollId}
     * @allow (get, list) Any user can read any poll.
     * @allow (create, update, delete) Only admins can create, update, or delete polls.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete polls.
     * @principle Provides public read access with restricted write access for authorized personnel.
     */
    match /polls/{pollId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'admin';
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages news articles and announcements. Writable only by admins, readable by all users.
     * @path /news/{newsId}
     * @allow (get, list) Any user can read any news article.
     * @allow (create, update, delete) Only admins can create, update, or delete news articles.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete news articles.
     * @principle Provides public read access with restricted write access for authorized personnel.
     */
    match /news/{newsId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'admin';
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages financial transactions. Writable only by admins.
     * @path /treasury/{transactionId}
     * @allow (create, update, delete) Only admins can create, update, or delete transactions.
     * @deny (get, list) Listing treasury records is prohibited.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete transactions.
     * @principle Restricts all access to treasury data to authorized personnel.
     */
    match /treasury/{transactionId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'admin';
      }

       function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages penalty rules. Writable only by admins.
     * @path /penalties/{penaltyId}
     * @allow (create, update, delete) Only admins can create, update, or delete penalty rules.
     * @deny (get, list) Listing penalty rules is prohibited.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete penalty rules.
     * @principle Restricts all access to penalty rule data to authorized personnel.
     */
    match /penalties/{penaltyId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'admin';
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}