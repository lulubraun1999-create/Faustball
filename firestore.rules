/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and admin-controlled access.
 * Users can manage their own profile data, while admins have broad access to manage
 * appointments, groups, polls, news, treasury, and penalties.
 *
 * Data Structure:
 * - /users/{userId}: User authentication and profile data.
 * - /members/{memberId}: Extended member profile data.
 * - /appointments/{appointmentId}: Calendar events and appointments.
 * - /groups/{groupId}: Classes and Teams.
 * - /polls/{pollId}: Polls and Surveys.
 * - /news/{newsId}: News Articles and Announcements.
 * - /treasury/{transactionId}: Team Treasury Transactions.
 * - /penalties/{penaltyId}: Penalty Catalog.
 *
 * Key Security Decisions:
 * - Users can only read/write their own /users/{userId} and /members/{memberId} documents.
 * - Admins have full CRUD access to /appointments, /groups, /polls, /news, /treasury, and /penalties.
 * - Listing all users is disallowed to prevent data scraping.
 * - All data writes require a verified user identity (no anonymous writes except user creation).
 * - Read access is generally public for top-level collections (appointments, groups, polls, news),
 *   but write access is strictly limited to admins.
 * - The system does not currently implement any role-based access control beyond a simple "admin" role.
 *
 * Denormalization for Authorization:
 * - The current ruleset assumes an external mechanism for assigning admin roles (e.g., a custom
 *   Firebase function that sets a claim on the user's JWT). The rules rely on the `isAdmin()`
 *   function to check for this claim.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user document. Admin can do anything.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create /users/user_abc.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete /users/user_abc. Admin can do anything.
     * @deny (create) - User with UID 'user_xyz' cannot create /users/user_abc.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, and delete /users/user_abc.
     * @principle Enforces user ownership and admin override for user accounts.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * @description Allows users to read and write their own member document. Admin can do anything.
     * @path /members/{memberId}
     * @allow (create) - User with UID 'user_abc' can create /members/member_123 if member.userId == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete /members/member_123 if member.userId == 'user_abc'. Admin can do anything.
     * @deny (create) - User with UID 'user_xyz' cannot create /members/member_123 if member.userId == 'user_abc'.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, and delete /members/member_123 if member.userId == 'user_abc'.
     * @principle Enforces user ownership and admin override for member profiles.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

        allow get: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdmin());
        allow list: if false;
        allow create: if isSignedIn() && (request.resource.data.userId == request.auth.uid || isAdmin());
        allow update: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdmin());
        allow delete: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdmin());
    }

    /**
     * @description Allows anyone to read appointments, but only admins can create, update, or delete them.
     * @path /appointments/{appointmentId}
     * @allow (get, list) - Any user can read appointments.
     * @allow (create, update, delete) - Only admins can create, update, or delete appointments.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete appointments.
     * @principle Allows public read access with restricted write access to admins.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows anyone to read groups, but only admins can create, update, or delete them.
     * @path /groups/{groupId}
     * @allow (get, list) - Any user can read groups.
     * @allow (create, update, delete) - Only admins can create, update, or delete groups.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete groups.
     * @principle Allows public read access with restricted write access to admins.
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

   /**
     * @description Allows anyone to read polls, but only admins can create, update, or delete them.
     * @path /polls/{pollId}
     * @allow (get, list) - Any user can read polls.
     * @allow (create, update, delete) - Only admins can create, update, or delete polls.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete polls.
     * @principle Allows public read access with restricted write access to admins.
     */
    match /polls/{pollId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows anyone to read news articles, but only admins can create, update, or delete them.
     * @path /news/{newsId}
     * @allow (get, list) - Any user can read news articles.
     * @allow (create, update, delete) - Only admins can create, update, or delete news articles.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete news articles.
     * @principle Allows public read access with restricted write access to admins.
     */
    match /news/{newsId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

   /**
     * @description Allows anyone to read treasury transactions, but only admins can create, update, or delete them.
     * @path /treasury/{transactionId}
     * @allow (get, list) - Any user can read treasury transactions.
     * @allow (create, update, delete) - Only admins can create, update, or delete treasury transactions.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete treasury transactions.
     * @principle Allows public read access with restricted write access to admins.
     */
    match /treasury/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

   /**
     * @description Allows anyone to read penalty catalog, but only admins can create, update, or delete them.
     * @path /penalties/{penaltyId}
     * @allow (get, list) - Any user can read penalty catalog.
     * @allow (create, update, delete) - Only admins can create, update, or delete penalty catalog.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete penalty catalog.
     * @principle Allows public read access with restricted write access to admins.
     */
    match /penalties/{penaltyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}