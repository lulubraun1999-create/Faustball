/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and
 * allows public read access with admin-only writes for appointments and groups.
 *
 * Data Structure:
 * - /users/{userId}:  Stores core user data. Accessible only by the user themselves or admins.
 * - /members/{memberId}: Stores detailed user profile information. Accessible only by the user themselves or admins.
 * - /appointments/{appointmentId}: Stores appointment data. Publicly readable, only admins can write.
 * - /groups/{groupId}: Stores group data. Publicly readable, only admins can write.
 *
 * Key Security Decisions:
 * - Listing of all users is explicitly denied to prevent information disclosure.
 * - All write operations require authentication.
 * - Data validation is minimal in the prototyping phase, focusing on authorization.
 *
 * Denormalization for Authorization:
 *  - The security rules avoid `get()` calls by relying on the `request.auth.uid` for user identification and,
 *    where necessary, admin role checks.  Admin status should ideally be denormalized onto the User document
 *    for optimal performance, but is not required in this version.
 * Structural Segregation:
 *  - The app uses separate collections for user profiles (/users/{userId}) and public data (appointments, groups)
 *    to ensure that private user data is never accidentally exposed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects core user data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own document.
     * @allow (get, update, delete) User with matching UID can access their own document.
     * @deny (list) Listing all users is not permitted.
     * @deny (create, get, update, delete) Non-authenticated users cannot access user data.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects editable user profile data.
     * @path /members/{memberId}
     * @allow (create) Authenticated user can create a member profile with a matching userId.
     * @allow (get, update, delete) Authenticated user can access and modify their own profile.
     * @deny (list) Listing all members is not permitted.
     * @deny (create, get, update, delete) Non-authenticated users cannot access member profiles.
     * @principle Enforces document ownership for writes.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows public read access to appointments, write access restricted to admins.
     * @path /appointments/{appointmentId}
     * @allow (get, list) Any user can read appointments.
     * @deny (create, update, delete) Non-admin users cannot modify appointments.
     * @principle Public read access with owner-only writes.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // TODO: Replace with actual admin role check. This is a placeholder.
      function isAdmin() {
        return false;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to groups, write access restricted to admins.
     * @path /groups/{groupId}
     * @allow (get, list) Any user can read groups.
     * @deny (create, update, delete) Non-admin users cannot modify groups.
     * @principle Public read access with owner-only writes.
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // TODO: Replace with actual admin role check. This is a placeholder.
      function isAdmin() {
        return false;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }
  }
}