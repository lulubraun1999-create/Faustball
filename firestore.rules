rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      // Custom claim 'admin' must be set to true.
      return isSignedIn() && request.auth.token.admin == true;
    }

    function isOwner(userId) {
      // User is the owner of the document.
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getMemberTeams(userId) {
      // Gets the teams array from the user's member profile.
      // Important: Use path escaping for security rule variables.
      return get(/databases/$(database)/documents/members/$(userId)).data.teams;
    }

    // --- User & Member Data ---
    // Users can read/update their own data. Admins have full access.
    match /users/{userId} {
      allow read, update: if isAdmin() || isOwner(userId);
      allow create: if isSignedIn(); 
      allow delete: if isAdmin();
    }

    match /members/{memberId} {
      allow read, update: if isAdmin() || isOwner(memberId);
      allow create: if isOwner(memberId); 
      allow delete: if isAdmin();
    }

    // --- Publicly Readable Data for any Signed-in User ---
    // These collections can be listed and read by any authenticated user.
    // Client-side queries handle the filtering of data relevant to the user.
    // Writes are restricted to admins.
    match /groups/{groupId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();

      // Members subcollection is also readable by any user, writable by admin.
      match /members/{memberId} {
          allow read: if isSignedIn();
          allow write: if isAdmin();
      }
    }
    
    match /appointmentTypes/{typeId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /locations/{locationId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    match /news/{newsId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /polls/{pollId} {
        // Allow any signed-in user to list and read all polls.
        // The client-side queries will perform the actual filtering based on visibility.
        allow read: if isSignedIn();
        allow create, delete: if isAdmin();
        // Allow any signed-in user to update (for voting).
        allow update: if isSignedIn();
    }

    match /penalties/{penaltyId} {
       allow read: if isSignedIn();
       allow write: if isAdmin();
    }
    
    match /appointmentExceptions/{exceptionId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // --- Appointments & Responses ---
    // Allow listing the collection for any authenticated user.
    // The client-side queries will perform the actual filtering.
    // Individual document reads (get) are more constrained.
    match /appointments/{appointmentId} {
      allow list: if isSignedIn(); 
      allow get: if isSignedIn() && 
                   (resource.data.visibility.type == 'all' || 
                    (resource.data.visibility.teamIds.size() > 0 && 
                     getMemberTeams(request.auth.uid).hasAny(resource.data.visibility.teamIds)));
      allow write: if isAdmin();
    }
    
    // Users can create their own responses.
    // They can read, update, or delete only their own responses. Admins have full access.
    match /appointmentResponses/{responseId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);
      allow list: if isAdmin(); // Only admins can list all responses.
    }

    // --- Team Treasury ---
    // Admins can read/write everything.
    // Authenticated users can only read transactions belonging to their teams.
    match /treasury/{transactionId} {
      allow read: if isAdmin() || (isSignedIn() && getMemberTeams(request.auth.uid).hasAny([resource.data.teamId]));
      allow write: if isAdmin();
    }
  }
}
