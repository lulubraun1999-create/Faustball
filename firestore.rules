rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own document.
     * @allow (get, update, delete) Authenticated user can access their own document.
     * @deny (list) User listing is not allowed.
     * @deny (create, update, delete) Unauthorized users cannot create, update or delete user documents.
     * @principle Enforces document ownership and prevents unauthorized modifications.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to member documents.
     * @path /members/{memberId}
     * @allow (get, update, delete) Authenticated user can access their own member document if userId matches.
     * @allow (create) Authenticated user can create a member if userId matches.
     * @deny (list) User listing is not allowed.
     * @deny (create, update, delete) Unauthorized users cannot create, update or delete member documents.
     * @principle Enforces document ownership and prevents unauthorized modifications.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(resource.data.userId) && exists(resource);
      }

      allow get: if isSignedIn() && get(/databases/$(database)/documents/users/$(resource.data.userId)).data.uid == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/users/$(resource.data.userId)).data.uid == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(resource.data.userId)).data.uid == request.auth.uid;
    }

    /**
     * @description Controls access to appointment documents.
     * @path /appointments/{appointmentId}
     * @allow (get, list) Appointments are publicly readable.
     * @deny (create, update, delete) Only admins can modify appointments.  Admin role not implemented.
     * @principle Allows public read access but restricts write access.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation.
    }

    /**
     * @description Controls access to group documents.
     * @path /groups/{groupId}
     * @allow (get, list) Groups are publicly readable.
     * @deny (create, update, delete) Only admins can modify groups. Admin role not implemented.
     * @principle Allows public read access but restricts write access.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add admin validation.
    }
  }
}