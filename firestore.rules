rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is an admin.
     * @details This function currently returns `false`. In a production environment, it would
     * need to retrieve the user's role from a trusted source (e.g., a custom claim on the user's
     * JWT, or a dedicated "users" collection with role information).
     * WARNING: DO NOT USE `get()` WITHIN SECURITY RULES IN PRODUCTION DUE TO PERFORMANCE AND BILLING IMPLICATIONS.
     */
    function isAdmin() {
      // TODO: Implement admin check using a trusted source of user roles.
      return request.auth.token.email == "lulubraun1999@gmail.com";
    }

    /**
     * @description Checks if the user is the owner and if the resource exists
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User 'alice' can create their own user document.
     * @allow (get) User 'alice' can read their own user document.
     * @allow (update) User 'alice' can update their own user document.
     * @deny (create) User 'bob' cannot create a user document for 'alice'.
     * @deny (get) User 'bob' cannot read 'alice's user document.
     * @principle Enforces document ownership and admin override for user data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false; // Disable user listing for privacy.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for the /members/{memberId} collection.
     * @path /members/{memberId}
     * @allow (create) User 'alice' can create their own member profile.
     * @allow (get) User 'alice' can read their own member profile.
     * @allow (update) User 'alice' can update their own member profile.
     * @deny (create) User 'bob' cannot create a member profile for 'alice'.
     * @deny (get) User 'bob' cannot read 'alice's member profile.
     * @principle Enforces document ownership and admin override for member profiles.
     */
    match /members/{memberId} {
      allow get: if isSignedIn() && (getSelfReference().data.userId == request.auth.uid || isAdmin());
      allow list: if false;  // Explicitly prevent listing of all member profiles.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && (getSelfReference().data.userId == request.auth.uid || isAdmin());
      allow delete: if isSignedIn() && isAdmin();

      function getSelfReference() {
        return get(/databases/$(database)/documents/members/$(memberId));
      }
    }

    /**
     * @description Rules for the /appointments/{appointmentId} collection.
     * @path /appointments/{appointmentId}
     * @allow (get) All users can read appointments.
     * @allow (create) Only admins can create appointments.
     * @deny (create) Regular users cannot create appointments.
     * @principle Public read, admin-only write for appointments.
     */
    match /appointments/{appointmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for the /groups/{groupId} collection.
     * @path /groups/{groupId}
     * @allow (get) All users can read groups.
     * @allow (create) Only admins can create groups.
     * @deny (create) Regular users cannot create groups.
     * @principle Public read, admin-only write for groups.
     */
    match /groups/{groupId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}