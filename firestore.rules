rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user accounts, ensuring only admins or the user can read and write.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' with matching id: request.auth.uid == 'user_abc'.
     * @allow (get) User 'user_abc' reading own data: request.auth.uid == 'user_abc'.
     * @allow (update) User 'user_abc' updating own data.
     * @deny  (create) User 'user_xyz' trying to create a document as 'user_abc': request.auth.uid != 'user_abc'.
     * @principle Enforces document ownership and admin override for user accounts.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if false;
    }

    /**
     * @description Secure member profiles, ensuring only admins or the member can read and write.
     * @path /members/{memberId}
     * @allow (create) Member 'member_abc' with valid data.
     * @allow (get) Member 'member_abc' reading own profile data.
     * @allow (update) Member 'member_abc' updating own profile data.
     * @deny  (create) User 'user_xyz' trying to create a member profile as 'member_abc'.
     * @principle Enforces document ownership for member profiles.
     */
    match /members/{memberId} {
      allow get: if isSignedIn() && (isMember(memberId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isMember(memberId);
      allow update: if isSignedIn() && (isMember(memberId) || isAdmin());
      allow delete: if false;
    }

    /**
     * @description Secure appointments, allowing anyone to read, but only admins to write.
     * @path /appointments/{appointmentId}
     * @allow (get) Anyone can read appointment data.
     * @allow (create) Admin creating a new appointment.
     * @deny  (create) Non-admin trying to create an appointment.
     * @principle Public read access with admin-only write access.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Secure groups, allowing anyone to read, but only admins to write.
     * @path /groups/{groupId}
     * @allow (get) Anyone can read group data.
     * @allow (create) Admin creating a new group.
     * @deny  (create) Non-admin trying to create a group.
     * @principle Public read access with admin-only write access.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

     /**
      * @description Secure polls, allowing anyone to read, but only admins to write.
      * @path /polls/{pollId}
      * @allow (get) Anyone can read poll data.
      * @allow (create) Admin creating a new poll.
      * @deny  (create) Non-admin trying to create a poll.
      * @principle Public read access with admin-only write access.
      */
    match /polls/{pollId} {
        allow get, list: if true;
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Secure news articles, allowing anyone to read, but only admins to write.
     * @path /news/{newsId}
     * @allow (get) Anyone can read news article data.
     * @allow (create) Admin creating a new news article.
     * @deny  (create) Non-admin trying to create a news article.
     * @principle Public read access with admin-only write access.
     */
    match /news/{newsId} {
        allow get, list: if true;
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Secure treasury transactions, allowing only admins to write.
     * @path /treasury/{transactionId}
     * @allow (create) Admin creating a new treasury transaction.
     * @deny  (create) Non-admin trying to create a treasury transaction.
     * @principle Admin-only write access.
     */
    match /treasury/{transactionId} {
        allow get, list: if isSignedIn() && isAdmin();
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Secure penalty catalog rules, allowing only admins to write.
     * @path /penalties/{penaltyId}
     * @allow (create) Admin creating a new penalty rule.
     * @deny  (create) Non-admin trying to create a penalty rule.
     * @principle Admin-only write access.
     */
    match /penalties/{penaltyId} {
        allow get, list: if isSignedIn() && isAdmin();
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isMember(memberId) {
      return request.auth.uid == memberId;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'admin';
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}