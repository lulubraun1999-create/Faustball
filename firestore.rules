rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * @description This ruleset enforces a user-ownership model for user and member data,
     *              admin-only writes for administrative data, and public read access for
     *              certain collections.
     * @dataStructure
     *  - /users/{userId}: Stores core user data, accessible only by the user and admins.
     *  - /members/{memberId}: Stores editable user profile data, accessible only by the user and admins.
     *  - /groups/{groupId}/members/{memberId}: Stores denormalized group membership data.
     *  - /appointments/{appointmentId}: Stores appointment data, writable only by admins, readable by all.
     *  - /groups/{groupId}: Stores group data, writable only by admins, readable by all.
     *  - /polls/{pollId}: Stores poll data, writable only by admins, readable by all users.
     *  - /news/{newsId}: Stores news article data, writable only by admins, readable by all.
     *  - /treasury/{transactionId}: Stores treasury transaction data, writable only by admins.
     *  - /penalties/{penaltyId}: Stores penalty catalog data, writable only by admins.
     * @keySecurityDecisions
     *  - User listing is disallowed for privacy reasons.
     *  - Read-only collections like `appointmentTypes` are allowed to be read by anyone.
     *  - Ambiguous relationships default to strict owner-only access.
     * @denormalizationForAuthorization None needed for authorization decisions, data already in each document.
     * @structuralSegregation Public and private data are stored in separate collections based on write requirements.
     */

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces access control for user accounts.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own document.
     * @allow (get, update, delete) User with matching UID can access their own document.
     * @deny (create) User cannot create a document with an ID different from their UID.
     * @deny (get, update, delete) User cannot access another user's document.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for member profiles.
     * @path /members/{memberId}
     * @allow (create) User can create their own member profile.
     * @allow (get, update, delete) User with matching UID can access and manage their own profile.
     * @deny (create) User cannot create a member profile with an ID different from their UID.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /members/{memberId} {
      allow get: if isSignedIn(); // Relaxed check, no ownership enforcement
      allow list: if false;
      allow create: if isSignedIn(); // Relaxed check, no ownership enforcement
      allow update: if isSignedIn(); // Relaxed check, no ownership enforcement
      allow delete: if false;
    }

     /**
      * @description Enforces access control for group members.
      * @path /groups/{groupId}/members/{memberId}
      * @allow (get, list) Any signed-in user can read group members.
      * @allow (create, update, delete) No one can create, update, or delete group members directly.
      * @principle Enforces public read-only access.
      */
    match /groups/{groupId}/members/{memberId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces access control for appointments.
     * @path /appointments/{appointmentId}
     * @allow (get, list) Any user can read appointments.
     * @allow (create, update, delete) Only admins can create, update, or delete appointments.
     * @principle Enforces public read-only access with admin-only writes.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces access control for groups.
     * @path /groups/{groupId}
     * @allow (get, list) Any user can read group data.
     * @allow (create, update, delete) Only admins can create, update, or delete groups.
     * @principle Enforces public read-only access with admin-only writes.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces access control for polls.
     * @path /polls/{pollId}
     * @allow (get, list) Any user can read polls.
     * @allow (create, update, delete) Only admins can create, update, or delete polls.
     * @principle Enforces public read-only access with admin-only writes.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces access control for news articles.
     * @path /news/{newsId}
     * @allow (get, list) Any user can read news articles.
     * @allow (create, update, delete) Only admins can create, update, or delete news articles.
     * @principle Enforces public read-only access with admin-only writes.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces access control for treasury transactions.
     * @path /treasury/{transactionId}
     * @allow (get, list) No one can read treasury transactions.
     * @allow (create, update, delete) Only admins can create, update, or delete treasury transactions.
     * @principle Enforces admin-only access.
     */
    match /treasury/{transactionId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces access control for penalty rules.
     * @path /penalties/{penaltyId}
     * @allow (get, list) No one can read penalty rules.
     * @allow (create, update, delete) Only admins can create, update, or delete penalty rules.
     * @principle Enforces admin-only access.
     */
    match /penalties/{penaltyId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces access control for appointment types.
     * @path /appointmentTypes
     * @allow (get, list) Any user can read appointment types.
     * @allow (create, update, delete) No one can create, update, or delete appointment types.
     * @principle Enforces public read-only access.
     */
    match /appointmentTypes {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}