rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      // Use exists() for safer checks. The get() will fail if the document or field doesn't exist.
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isMemberOfAnyTeam() {
      return isSignedIn() && exists(/databases/$(database)/documents/members/$(request.auth.uid)) && 'teams' in get(/databases/$(database)/documents/members/$(request.auth.uid)).data && get(/databases/$(database)/documents/members/$(request.auth.uid)).data.teams.size() > 0;
    }

    function isMemberOfTeams(teamIds) {
      // Check if the user is a member of any of the given teamIds
      return isMemberOfAnyTeam() && get(/databases/$(database)/documents/members/$(request.auth.uid)).data.teams.hasAny(teamIds);
    }
    
    // --- User & Member Data ---
    match /users/{userId} {
      allow read, update: if isAdmin() || isOwner(userId);
      allow create: if !exists(/databases/$(database)/documents/users/$(userId)); // Anyone can create their own user doc on signup.
      allow delete: if isAdmin();
    }

    match /members/{memberId} {
      allow read, update: if isAdmin() || isOwner(memberId);
      allow create: if isOwner(memberId);
      allow delete: if isAdmin();
    }

    // --- Publicly Readable Data for any Signed-in User ---
    match /groups/{groupId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();

      match /members/{memberId} {
          allow read: if isSignedIn();
          allow write: if isAdmin();
      }
    }

    match /appointmentTypes/{typeId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    match /locations/{locationId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    match /news/{newsId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    match /penalties/{penaltyId} {
       allow read: if isSignedIn();
       allow write: if isAdmin();
    }
    match /appointmentExceptions/{exceptionId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // --- Polls ---
    match /polls/{pollId} {
      allow list, get: if isSignedIn(); // Allow listing by any signed-in user, client will filter.
      allow create, delete: if isAdmin();
      allow update: if isSignedIn(); // Allow users to vote (update the 'votes' array)
    }

    // --- Appointments & Responses ---
    match /appointments/{appointmentId} {
      allow list: if isSignedIn(); // Allow listing so client can query and filter
      allow get: if isSignedIn() && (resource.data.visibility.type == 'all' || isMemberOfTeams(resource.data.visibility.teamIds));
      allow write: if isAdmin();
    }
    
    match /appointmentResponses/{responseId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);
      allow list: if isAdmin();
    }

    // --- Team Treasury ---
    // User can only see transactions of a team they are a member of.
    match /treasury/{transactionId} {
      allow list: if isMemberOfAnyTeam();
      allow get: if isAdmin() || (isMemberOfAnyTeam() && isMemberOfTeams([resource.data.teamId]));
      allow write: if isAdmin();
    }
  }
}
