rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the core user data. Users can only read/write their own data, and admins have full access.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own record with matching ID.
     * @allow (get, update, delete) - Authenticated user with a matching ID.
     * @deny (create) - Authenticated user attempts to create a record with a mismatched ID.
     * @deny (list) - Listing all users is prohibited.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Secures editable member profile data. Accessible by admins or the owning user.
     * @path /members/{memberId}
     * @allow (create) - Authenticated user creates their own record with matching ID.
     * @allow (get, update, delete) - Authenticated user with a matching ID.
     * @deny (create) - Authenticated user attempts to create a record with a mismatched ID.
     * @deny (list) - Listing all members is prohibited.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memberId) {
        return request.auth.uid == get(/databases/$(database)/documents/members/$(memberId)).data.userId;
      }

      function isExistingOwner(memberId) {
        return isOwner(memberId) && exists(resource);
      }

      allow get: if isSignedIn() && (isOwner(memberId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && (isOwner(memberId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(memberId) || isAdmin());
    }

    /**
     * @description Stores all appointments. Writable only by admins, readable by all users.
     * @path /appointments/{appointmentId}
     * @allow (get, list) - All users can read appointments.
     * @deny (create, update, delete) - Only admins should create, update, or delete appointments.
     * @principle Public read access with admin-only writes.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Stores all groups (classes and teams). Writable only by admins, readable by all users.
     * @path /groups/{groupId}
     * @allow (get, list) - All users can read groups.
     * @deny (create, update, delete) - Only admins should create, update, or delete groups.
     * @principle Public read access with admin-only writes.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Stores all polls. Writable only by admins, readable by designated users.
     * @path /polls/{pollId}
     * @allow (get, list) - All users can read polls.
     * @deny (create, update, delete) - Only admins should create, update, or delete polls.
     */
    match /polls/{pollId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Stores all news articles. Writable only by admins, readable by all users.
     * @path /news/{newsId}
     * @allow (get, list) - All users can read news articles.
     * @deny (create, update, delete) - Only admins should create, update, or delete news articles.
     * @principle Public read access with admin-only writes.
     */
    match /news/{newsId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Stores all financial transactions for all teams. Writable only by admins.
     * @path /treasury/{transactionId}
     * @deny (get, list, create, update, delete) - Only admins can access treasury transactions.
     */
    match /treasury/{transactionId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Stores the penalty catalog rules for all teams. Writable only by admins.
     * @path /penalties/{penaltyId}
     * @deny (get, list, create, update, delete) - Only admins can access penalty rules.
     */
    match /penalties/{penaltyId} {
      allow get, list, create, update, delete: if isAdmin();
    }
  }

    function isAdmin() {
      return request.auth.token.admin == true;
    }
}