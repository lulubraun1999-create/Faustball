rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getMemberTeams(userId) {
      // Use path escaping for security rule variables.
      return get(/databases/$(database)/documents/members/$(userId)).data.teams;
    }

    // --- User & Member Data ---
    // Users can read/update their own data. Admins have full access.
    match /users/{userId} {
      allow read, update: if isAdmin() || isOwner(userId);
      allow create: if isSignedIn(); 
      allow delete: if isAdmin();
    }

    match /members/{memberId} {
      allow read, update: if isAdmin() || isOwner(memberId);
      allow create: if isOwner(memberId); 
      allow delete: if isAdmin();
    }

    // --- Publicly Readable Data for any Signed-in User ---
    // These collections can be listed and read by any authenticated user.
    // Client-side queries handle filtering. Writes are restricted.
    match /groups/{groupId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();

      match /members/{memberId} {
          allow read: if isSignedIn();
          allow write: if isAdmin();
      }
    }
    
    match /appointmentTypes/{typeId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /locations/{locationId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    match /news/{newsId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /penalties/{penaltyId} {
       allow read: if isSignedIn();
       allow write: if isAdmin();
    }
    
    match /appointmentExceptions/{exceptionId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // --- Collections with specific access logic ---

    match /polls/{pollId} {
      // Allow any authenticated user to read/list all polls.
      // Client-side queries handle filtering for visibility.
      // Update is allowed for any user to cast a vote.
      allow read: if isSignedIn();
      allow create, delete: if isAdmin();
      allow update: if isSignedIn(); 
    }

    match /appointments/{appointmentId} {
      // Allow listing for any authenticated user. Client filters.
      // GET is more constrained for security, though LIST is open.
      allow list: if isSignedIn(); 
      allow get: if isSignedIn() && 
                   (resource.data.visibility.type == 'all' || 
                    (resource.data.visibility.teamIds.size() > 0 && 
                     getMemberTeams(request.auth.uid).hasAny(resource.data.visibility.teamIds)));
      allow write: if isAdmin();
    }
    
    match /appointmentResponses/{responseId} {
      // Users can create their own responses.
      // They can only read/update/delete their own responses. Admins have full access.
      allow create: if isSignedIn();
      allow read, update, delete: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);
      allow list: if isAdmin(); // Only admins can list ALL responses.
    }

    match /treasury/{transactionId} {
      // Admins have full access.
      // Users can read transactions belonging to their teams.
      allow read: if isAdmin() || (isSignedIn() && getMemberTeams(request.auth.uid).hasAny([resource.data.teamId]));
      allow write: if isAdmin();
    }
  }
}
