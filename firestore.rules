/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model where 'admin' users have broad write access and regular 'user's have limited access, primarily to their own data. Data is generally readable by all authenticated users unless explicitly restricted.
 *
 * Data Structure:
 * - /users/{userId}:  Stores core user data, secured via ownership (`isOwner(userId)`).
 * - /members/{memberId}: Stores editable user profile data, secured via ownership (`isOwner(memberId)`). The `memberId` MUST match the `userId` stored in the document.
 * - /groups/{groupId}: Stores group information; writable by admins, readable by all authenticated users.
 * - /groups/{groupId}/members/{memberId}: Denormalized group member data, writable by admins, readable by all authenticated users.
 * - /appointments/{appointmentId}: Stores appointment information; writable by admins, readable by all authenticated users.
 * - /polls/{pollId}: Stores poll data; writable by admins, readable by all authenticated users.
 * - /news/{newsId}: Stores news article data; writable only by admins, readable by all authenticated users.
 * - /treasury/{transactionId}: Stores treasury transaction data; writable only by admins.
 * - /penalties/{penaltyId}: Stores penalty definitions; writable only by admins.
 *
 * Key Security Decisions:
 * - Admin Role: The rules rely on an `isAdmin()` function to grant elevated privileges.
 * - No User Listing: Listing all users is explicitly denied to prevent information disclosure.
 * - Public Read, Owner Write: Several collections (`appointments`, `groups`, `polls`, `news`) use a pattern of public read access with owner-only (admin) write access.
 *
 * Denormalization for Authorization:
 *  - User Ownership: The `members` collection requires that each document's `userId` matches the document ID to ensure path integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user accounts. Only admins or the user themselves can read/write.
     * @path /users/{userId}
     * @allow (create) - User with matching UID creates their account.
     * @allow (get, update, delete) - User with matching UID reads/modifies/deletes their account.
     * @deny (create) - User attempts to create an account with an ID that doesn't match their UID.
     * @deny (get, update, delete) - Another user attempts to access or modify this user's account.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the document
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the requesting user is an admin.
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own document, enforcing that the ID matches their UID.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      // Allow read access to the user's own document.
      allow get: if isOwner(userId) || isAdmin();
      // Allow the user to update their own document.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin();
      // Allow the user to delete their own document.
      allow delete: if isExistingOwner(userId) || isAdmin();
      // Do not allow listing of all user documents.
      allow list: if false;
    }

    /**
     * @description Secure editable user profiles. Only admins or the user themselves can read/write.
     * @path /members/{memberId}
     * @allow (create) - User with matching UID creates their profile.
     * @allow (get, update, delete) - User with matching UID reads/modifies/deletes their profile.
     * @deny (create) - User attempts to create a profile with an ID that doesn't match their UID.
     * @deny (get, update, delete) - Another user attempts to access or modify this user's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /members/{memberId} {
        // Helper function to check if the user is signed in and owns the document
        function isOwner(memberId) {
          return request.auth != null && request.auth.uid == memberId;
        }

        // Helper function to check if the requesting user is an admin.
        function isAdmin() {
          return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        function isExistingOwner(memberId) {
          return isOwner(memberId) && resource != null;
        }

        // Allow the user to create their own document, enforcing that the ID matches their UID.
        allow create: if isOwner(memberId) && request.resource.data.userId == memberId;
        // Allow read access to the user's own document.
        allow get: if isOwner(memberId) || isAdmin();
        // Allow the user to update their own document, enforcing that the ID matches the UID from the path and that the userId is immutable.
        allow update: if isExistingOwner(memberId) && request.resource.data.userId == resource.data.userId || isAdmin();
        // Allow the user to delete their own document.
        allow delete: if isExistingOwner(memberId) || isAdmin();
        // Do not allow listing of all member documents.
        allow list: if false;
    }

     /**
      * @description Secure group members. Only admins can write, readable by all.
      * @path /groups/{groupId}/members/{memberId}
      * @allow (get, list) - Any authenticated user can read members of a group.
      * @allow (create, update, delete) - Only admins can create, update, or delete group members.
      * @principle Restricts write access to admins, allows public read access.
      */
    match /groups/{groupId}/members/{memberId} {
       // Helper function to check if the requesting user is an admin.
        function isAdmin() {
          return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Secure appointments. Only admins can write, readable by all.
     * @path /appointments/{appointmentId}
     * @allow (get, list) - Any authenticated user can read appointments.
     * @allow (create, update, delete) - Only admins can create, update, or delete appointments.
     * @principle Restricts write access to admins, allows public read access.
     */
    match /appointments/{appointmentId} {
        // Helper function to check if the requesting user is an admin.
        function isAdmin() {
          return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Secure groups. Only admins can write, readable by all.
     * @path /groups/{groupId}
     * @allow (get, list) - Any authenticated user can read groups.
     * @allow (create, update, delete) - Only admins can create, update, or delete groups.
     * @principle Restricts write access to admins, allows public read access.
     */
    match /groups/{groupId} {
        // Helper function to check if the requesting user is an admin.
        function isAdmin() {
          return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Secure polls. Only admins can write, readable by all.
     * @path /polls/{pollId}
     * @allow (get, list) - Any authenticated user can read polls.
     * @allow (create, update, delete) - Only admins can create, update, or delete polls.
     * @principle Restricts write access to admins, allows public read access.
     */
    match /polls/{pollId} {
        // Helper function to check if the requesting user is an admin.
        function isAdmin() {
          return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Secure news articles. Only admins can write, readable by all.
     * @path /news/{newsId}
     * @allow (get, list) - Any authenticated user can read news articles.
     * @allow (create, update, delete) - Only admins can create, update, or delete news articles.
     * @principle Restricts write access to admins, allows public read access.
     */
    match /news/{newsId} {
        // Helper function to check if the requesting user is an admin.
        function isAdmin() {
          return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Secure treasury transactions. Only admins can write.
     * @path /treasury/{transactionId}
     * @allow (create, update, delete) - Only admins can create, update, or delete treasury transactions.
     * @deny (get, list) - No one can list or get treasury transactions except admins.
     * @principle Restricts write access to admins.
     */
    match /treasury/{transactionId} {
        // Helper function to check if the requesting user is an admin.
        function isAdmin() {
          return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }
        allow create, update, delete: if isAdmin();
        allow get, list: if false;
    }

    /**
     * @description Secure penalties. Only admins can write.
     * @path /penalties/{penaltyId}
     * @allow (create, update, delete) - Only admins can create, update, or delete penalties.
     * @deny (get, list) - No one can list or get penalties except admins.
     * @principle Restricts write access to admins.
     */
    match /penalties/{penaltyId} {
        // Helper function to check if the requesting user is an admin.
        function isAdmin() {
          return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }
        allow create, update, delete: if isAdmin();
        allow get, list: if false;
    }
  }
}