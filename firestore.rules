
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() { return request.auth != null; }
    function isAdmin() { return request.auth.token.admin == true; }
    function getMemberDoc(uid) { return get(/databases/$(database)/documents/members/$(uid)); }
    
    function getUserTeams() {
      let memberData = getMemberDoc(request.auth.uid).data;
      return memberData != null && 'teams' in memberData ? memberData.teams : [];
    }
    
    function isMemberOfDocTeamResource() {
      let userTeams = getUserTeams();
      return isSignedIn() &&
             resource != null && resource.data != null &&
             'teamId' in resource.data &&
             userTeams.hasAny([resource.data.teamId]);
    }

    // --- /users/{userId} ---
    match /users/{userId} {
      function isOwner(userId) { return request.auth.uid == userId; }
      function isCreatingOwnDocument(userId) { return isOwner(userId) && request.resource.data.id == userId && (request.resource.data.role == 'user' || !('role' in request.resource.data)); }
      function isUpdatingOwnDocument(userId) { return isOwner(userId) && !('role' in request.resource.data); }

      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isCreatingOwnDocument(userId);
      allow update: if isSignedIn() && (isUpdatingOwnDocument(userId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    // --- /members/{memberId} ---
    match /members/{memberId} {
        function isOwner(memberId) { return request.auth.uid == memberId; }
        function isCreatingOwnProfile(memberId) { return isOwner(memberId) && request.resource.data.userId == request.auth.uid; }
        function isExistingOwner(memberId) { return isSignedIn() && resource.data.userId == request.auth.uid; }

        allow get: if isSignedIn() && (isOwner(memberId) || isAdmin());
        allow list: if isSignedIn() && isAdmin();
        allow create: if isSignedIn() && isCreatingOwnProfile(memberId);
        allow update: if isSignedIn() && (isExistingOwner(memberId) || isAdmin());
        allow delete: if isSignedIn() && (isOwner(memberId) || isAdmin());
    }

    // --- /groups/{groupId} ---
    match /groups/{groupId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /groups/{groupId}/members/{memberId} ---
    match /groups/{groupId}/members/{memberId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() && isAdmin();
    }
    
    // --- /appointments/{appointmentId} ---
    match /appointments/{appointmentId} {
        function isMemberOfVisibleTeam() {
          let userTeams = getUserTeams();
          return resource.data != null &&
                 'visibility' in resource.data &&
                 resource.data.visibility.type == 'specificTeams' &&
                 'teamIds' in resource.data.visibility &&
                 resource.data.visibility.teamIds.hasAny(userTeams);
        }

        allow read: if isSignedIn() && (
                      isAdmin() ||
                      resource.data.visibility.type == 'all' ||
                      isMemberOfVisibleTeam()
                    );
        allow write: if isSignedIn() && isAdmin();
    }
    
    match /appointmentExceptions/{exceptionId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isAdmin();
    }

    match /appointmentResponses/{responseId} {
        function isOwner() { return request.resource.data.userId == request.auth.uid; }
        function isExistingOwner() { return resource.data.userId == request.auth.uid; }

        allow read: if isSignedIn() && (isAdmin() || isExistingOwner());
        allow list: if isSignedIn(); // Erlaube LIST, gefiltert am Client
        allow create: if isSignedIn() && isOwner();
        allow update, delete: if isSignedIn() && isExistingOwner();
    }

    // --- /polls/{pollId} ---
    match /polls/{pollId} {
        function isMemberOfVisibleTeam() {
          let userTeams = getUserTeams();
          return resource.data != null &&
                 'visibility' in resource.data &&
                 resource.data.visibility.type == 'specificTeams' &&
                 'teamIds' in resource.data.visibility &&
                 resource.data.visibility.teamIds.hasAny(userTeams);
        }

        // KORRIGIERTE LIST-REGEL
        allow list: if isSignedIn() && (
                      (request.query.where.field == 'visibility.type' && request.query.where.value == 'all') ||
                      (request.query.where.field == 'visibility.teamIds' && request.query.where.value.hasAny(getUserTeams()))
                    );
                    
        allow get: if isSignedIn() && (
                     isAdmin() ||
                     resource.data.visibility.type == 'all' ||
                     isMemberOfVisibleTeam()
                   );

        allow create, delete: if isSignedIn() && isAdmin();
        
        allow update: if isSignedIn() && (
                      isAdmin() ||
                      (
                        (resource.data.visibility.type == 'all' || isMemberOfVisibleTeam()) &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['votes'])
                      )
                    );
    }


    // --- /news/{newsId} ---
    match /news/{newsId} {
        allow read: if true;
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /treasury/{transactionId} ---
    match /treasury/{transactionId} {
        allow read: if isSignedIn() && (isAdmin() || isMemberOfDocTeamResource());
        allow write: if isSignedIn() && isAdmin();
    }

    // --- /penalties/{penaltyId} ---
    match /penalties/{penaltyId} {
       allow read: if isSignedIn() && (isAdmin() || isMemberOfDocTeamResource());
       allow write: if isSignedIn() && isAdmin();
    }

    // --- Admin-only collections
    match /appointmentTypes/{typeId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() && isAdmin();
    }

    match /locations/{locationId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() && isAdmin();
    }
  }
}
