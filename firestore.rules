/**
 * @fileoverview Firestore Security Rules for FaustApp.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user documents and allows public read access to member profiles while restricting write access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user account information, accessible only by the user themselves.
 * - /members/{memberId}: Stores member profile information, publicly readable, but write-protected.
 *
 * Key Security Decisions:
 * - Users can only access their own data in the /users collection.
 * - The /members collection is publicly readable, but creation, update, and deletion are disallowed.
 * - Denormalization is employed by storing the userId within the member document, enabling efficient queries.
 * - User listing is implicitly disallowed by the rules structure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for documents in the /users collection.
     * @path /users/{userId}
     * @allow (create) - A user with UID 'user_abc' can create their own document at /users/user_abc if the document's 'id' field also equals 'user_abc'.
     * @allow (get, update, delete) - A user with UID 'user_abc' can read, update, or delete their own document at /users/user_abc.
     * @deny (create) - A user with UID 'user_abc' cannot create a document at /users/another_user_id.
     * @deny (get, update, delete) - A user with UID 'user_abc' cannot read, update, or delete the document at /users/another_user_id.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to documents in the /members collection, but restricts write access.
     * @path /members/{memberId}
     * @allow (get, list) - Any user, authenticated or not, can read any document in the /members collection.
     * @deny (create, update, delete) - No user can create, update, or delete documents in the /members collection.
     * @principle Provides public read access while maintaining control over data modification.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}