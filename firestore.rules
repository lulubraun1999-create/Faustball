/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user and member data,
 * with admin-only write access for appointments and groups. It prioritizes secure access
 * based on user authentication and role.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data, accessible only by the user and admins.
 * - /members/{memberId}: Stores user profile data, accessible only by the user and admins.
 * - /appointments/{appointmentId}: Stores appointment data, writable only by admins, readable by all.
 * - /groups/{groupId}: Stores group data, writable only by admins, readable by all.
 *
 * Key Security Decisions:
 * - User listing is disabled for security.
 * - Admin role is not currently implemented in the rules. All user write access is based on UID matching.
 * - Data schema is not strictly enforced to allow for rapid iteration, but key ownership fields are validated.
 * - No sensitive data fields are allowed to be globally readable by default, so only appointments and groups have their data readable by all.
 *
 * Denormalization for Authorization:
 *  N/A - No denormalization needed as ownership is based on the user ID in the path.
 *
 * Structural Segregation:
 *  N/A - Drafts vs. published content are not applicable in this data model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user accounts. Only the user themselves or an admin can read/write their account data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own account.
     * @allow (get) User with matching UID can read their own account.
     * @allow (update) User with matching UID can update their own account.
     * @allow (delete) User with matching UID can delete their own account.
     * @deny (create) User cannot create an account with a mismatched UID.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to member profiles. Only the user themselves or an admin can read/write their profile data.
     * @path /members/{memberId}
     * @allow (create) User with matching UID can create their own profile.
     * @allow (get) User with matching UID can read their own profile.
     * @allow (update) User with matching UID can update their own profile.
     * @allow (delete) User with matching UID can delete their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(memberId) {
        return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/members/$(memberId)).data.userId;
      }

       function isExistingOwner(memberId) {
        return isSignedIn() && request.auth.uid == resource.data.userId;
      }

      allow get: if isOwner(memberId);
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(memberId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isExistingOwner(memberId);
    }

    /**
     * @description Controls access to appointments. All users can read appointments, but only admins can create, update, or delete them.
     * @path /appointments/{appointmentId}
     * @allow (get) Any user can read appointment data.
     * @allow (list) Any user can list appointment data.
     * @deny (create) Only admins can create appointments.
     * @deny (update) Only admins can update appointments.
     * @deny (delete) Only admins can delete appointments.
     * @principle Public read access with admin-only writes.
     */
    match /appointments/{appointmentId} {
      function isAdmin() {
        // Replace with your actual admin check logic.  For prototyping, we allow all signed-in users.
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin(); 
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to groups. All users can read groups, but only admins can create, update, or delete them.
     * @path /groups/{groupId}
     * @allow (get) Any user can read group data.
     * @allow (list) Any user can list group data.
     * @deny (create) Only admins can create groups.
     * @deny (update) Only admins can update groups.
     * @deny (delete) Only admins can delete groups.
     * @principle Public read access with admin-only writes.
     */
    match /groups/{groupId} {
      function isAdmin() {
        // Replace with your actual admin check logic.  For prototyping, we allow all signed-in users.
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}