{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user account in the system.",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        }
      },
      "required": [
        "email",
        "firstName",
        "lastName"
      ]
    },
    "Team": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Team",
      "type": "object",
      "description": "Represents a Faustball team.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the team entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the team."
        },
        "description": {
          "type": "string",
          "description": "Description of the team."
        },
        "memberIds": {
          "type": "array",
          "description": "References to UserProfile. (Relationship: Team 1:N UserProfile)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "CalendarEvent": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CalendarEvent",
      "type": "object",
      "description": "Represents an event on the calendar.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the event."
        },
        "title": {
          "type": "string",
          "description": "Title of the event."
        },
        "description": {
          "type": "string",
          "description": "Description of the event."
        },
        "startTime": {
          "type": "string",
          "description": "Start time of the event.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "End time of the event.",
          "format": "date-time"
        },
        "teamId": {
          "type": "string",
          "description": "Reference to Team. (Relationship: Team 1:N CalendarEvent)"
        }
      },
      "required": [
        "id",
        "title",
        "startTime",
        "endTime"
      ]
    },
    "NewsArticle": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NewsArticle",
      "type": "object",
      "description": "Represents a news article.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the news article."
        },
        "title": {
          "type": "string",
          "description": "Title of the news article."
        },
        "content": {
          "type": "string",
          "description": "Content of the news article."
        },
        "authorId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N NewsArticle)"
        },
        "publishedDate": {
          "type": "string",
          "description": "Date the article was published.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "title",
        "content",
        "authorId",
        "publishedDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user account information. This collection is path-based owned. `userId` corresponds to `request.auth.uid`."
        }
      },
      {
        "path": "/teams/{teamId}",
        "definition": {
          "entityName": "Team",
          "schema": {
            "$ref": "#/backend/entities/Team"
          },
          "description": "Stores team information. The `memberIds` array contains the user IDs of team members.  Authorization rules should validate that `request.auth.uid` is present in this array for write operations. Includes denormalized 'memberIds' array for authorization independence."
        }
      },
      {
        "path": "/teams/{teamId}/calendar_events/{calendarEventId}",
        "definition": {
          "entityName": "CalendarEvent",
          "schema": {
            "$ref": "#/backend/entities/CalendarEvent"
          },
          "description": "Stores calendar events for teams. Access control is based on the team membership; only members of the team should be able to create and modify events.  Denormalizes the `teamId` for authorization independence."
        }
      },
      {
        "path": "/news_articles/{newsArticleId}",
        "definition": {
          "entityName": "NewsArticle",
          "schema": {
            "$ref": "#/backend/entities/NewsArticle"
          },
          "description": "Stores news articles. Access control allows read access for all users, but write access is restricted to admins or the article author. Includes denormalized `authorId` to simplify rules."
        }
      }
    ]
  }
}
