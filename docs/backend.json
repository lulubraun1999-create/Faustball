{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user account in the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "registrationCode": {
          "type": "string",
          "description": "Registration code used during user registration."
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Indicates whether the user's email has been verified."
        }
      },
      "required": [
        "id",
        "email",
        "firstName",
        "lastName",
        "registrationCode"
      ]
    },
    "Member": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Member",
      "type": "object",
      "description": "Represents a member in the Faustball team, extending user information with team-specific details.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the member entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:1 Member)"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the member."
        },
        "location": {
          "type": "string",
          "description": "Location/city of the member."
        },
        "position": {
          "type": "string",
          "description": "Playing position of the member (e.g., Abwehr, Spiel, Angriff)."
        },
        "birthday": {
          "type": "string",
          "description": "Birthday of the member.",
          "format": "date-time"
        },
        "gender": {
          "type": "string",
          "description": "Gender of the member (e.g., male, female, diverse (damenteam), diverse (herrenteam))."
        }
      },
      "required": [
        "id",
        "userId"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user account information. Path-based ownership ensures only the user can access their own document.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/members/{memberId}",
        "definition": {
          "entityName": "Member",
          "schema": {
            "$ref": "#/backend/entities/Member"
          },
          "description": "Stores member profile information. Includes a 'userId' field referencing the corresponding user document. Anyone who is logged in is able to query the members collection.",
          "params": [
            {
              "name": "memberId",
              "description": "The unique identifier of the member."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to store user and member data for the FaustApp. It uses a path-based ownership model for user data to ensure security and simplicity. The structure separates user accounts (`users`) from member profiles (`members`) to accommodate the different data requirements and access patterns. This design prioritizes Authorization Independence by avoiding `get()` calls in security rules, and supports QAPs by leveraging structural segregation and path-based ownership. Member documents contain a `userId` field which allows us to query members by `userId`."
  }
}