{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user account in the FaustApp.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "password": {
          "type": "string",
          "description": "Hashed password of the user.  Note:  This should be handled by an authentication service, and not stored directly."
        },
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "registrationCode": {
          "type": "string",
          "description": "Registration code used during account creation."
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Indicates whether the user's email address has been verified."
        }
      },
      "required": [
        "id",
        "email",
        "password",
        "firstName",
        "lastName",
        "registrationCode",
        "emailVerified"
      ]
    },
    "Member": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Member",
      "type": "object",
      "description": "Represents a member in the FaustApp, extending user information with team-related details.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the member entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:1 Member)"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the member."
        },
        "location": {
          "type": "string",
          "description": "Location of the member."
        },
        "position": {
          "type": "string",
          "description": "Playing position of the member (e.g., Abwehr, Spiel, Angriff)."
        },
        "birthday": {
          "type": "string",
          "description": "Birthday of the member.",
          "format": "date-time"
        },
        "gender": {
          "type": "string",
          "description": "Gender of the member (m√§nnlich, weiblich, divers (damenteam), divers (herrenteam))."
        }
      },
      "required": [
        "id",
        "userId"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user authentication and registration data. User data is stored in its own collection based on user ID for private data access.",
          "params": [
            {
              "name": "userId",
              "description": "Unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/members/{memberId}",
        "definition": {
          "entityName": "Member",
          "schema": {
            "$ref": "#/backend/entities/Member"
          },
          "description": "Stores member profile data, including contact information, location, position, birthday, and gender.",
          "params": [
            {
              "name": "memberId",
              "description": "Unique identifier for the member."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support the FaustApp's user management and profile features while adhering to the principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters). It uses structural segregation and denormalization to ensure efficient and secure data access.\n\n**Authorization Independence:** User and member data are stored independently. The `members` collection does not rely on parent document attributes for authorization. Each member document contains all necessary information for access control, eliminating the need for `get()` calls in security rules.\n\n**Structural Segregation:**  User data is stored in `/users/{userId}`. Member data, including profile details, is stored in `/members/{memberId}`.\n\n**Access Modeling:**  Private user data is stored under the `/users/{userId}` path, enabling path-based ownership for simple and secure rules. Since the `Member` entity has a `1:1` relationship with `User`, the Member ID is stored independently of the User ID and is used for accessing the member's profile. Profile data modifications are stored in the `members` collection. The User entity contains only authentication and registration information.\n\n**QAPs (Rules are not Filters):** The structure allows efficient `list` operations. Listing users or members can be performed securely using rules based on path ownership or membership, without requiring filtering of document data within the rules themselves.\n\n**Invariants:**  The structure supports ownership and the integrity of user and member data, ensuring that each user and member has a clearly defined profile."
  }
}